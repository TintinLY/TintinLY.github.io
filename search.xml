<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2022/04/04/MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/04/MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库的好处"><a href="#数据库的好处" class="headerlink" title="数据库的好处"></a>数据库的好处</h2><p>​    1.持久化数据到本地<br>​    2.可以实现结构化查询，方便管理</p><span id="more"></span>    <h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><p>​    1、DB：数据库，保存一组有组织的数据的容器<br>​    2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据<br>​    3、SQL:结构化查询语言，用于和DBMS通信的语言</p><h2 id="数据库存储数据的特点"><a href="#数据库存储数据的特点" class="headerlink" title="数据库存储数据的特点"></a>数据库存储数据的特点</h2><p>​    1、将数据放到表中，表再放到库中<br>​    2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。<br>​    3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。<br>​    4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”<br>​    5、表中的数据是按行存储的，每一行类似于java中的“对象”。</p><h2 id="MySQL产品的介绍和安装"><a href="#MySQL产品的介绍和安装" class="headerlink" title="MySQL产品的介绍和安装"></a>MySQL产品的介绍和安装</h2><h3 id="MySQL服务的启动和停止"><a href="#MySQL服务的启动和停止" class="headerlink" title="MySQL服务的启动和停止"></a>MySQL服务的启动和停止</h3><p>​    方式一：计算机——右击管理——服务<br>​    方式二：通过管理员身份运行<br>​    net start 服务名（启动服务）<br>​    net stop 服务名（停止服务）</p><h3 id="MySQL服务的登录和退出"><a href="#MySQL服务的登录和退出" class="headerlink" title="MySQL服务的登录和退出"></a>MySQL服务的登录和退出</h3><p>​    方式一：通过mysql自带的客户端<br>​    只限于root用户</p><pre><code>方式二：通过windows自带的客户端登录：mysql 【-h主机名 -P端口号 】-u用户名 -p密码退出：exit或ctrl+C</code></pre><p>​<br>​    </p><h3 id="MySQL的常见命令"><a href="#MySQL的常见命令" class="headerlink" title="MySQL的常见命令"></a>MySQL的常见命令</h3><pre><code>1.查看当前所有的数据库show databases;2.打开指定的库use 库名3.查看当前库的所有表show tables;4.查看其它库的所有表show tables from 库名;5.创建表create table 表名(    列名 列类型,    列名 列类型，    。。。);6.查看表结构desc 表名;7.查看服务器的版本方式一：登录到mysql服务端select version();方式二：没有登录到mysql服务端mysql --version或mysql --V</code></pre><h3 id="MySQL的语法规范"><a href="#MySQL的语法规范" class="headerlink" title="MySQL的语法规范"></a>MySQL的语法规范</h3><pre><code>1.不区分大小写,但建议关键字大写，表名、列名小写2.每条命令最好用分号结尾3.每条命令根据需要，可以进行缩进 或换行4.注释    单行注释：#注释文字    单行注释：-- 注释文字    多行注释：/* 注释文字  */</code></pre><p>​<br>​    </p><h3 id="SQL的语言分类"><a href="#SQL的语言分类" class="headerlink" title="SQL的语言分类"></a>SQL的语言分类</h3><pre><code>DQL（Data Query Language）：数据查询语言    select DML(Data Manipulate Language):数据操作语言    insert 、update、deleteDDL（Data Define Languge）：数据定义语言    create、drop、alterTCL（Transaction Control Language）：事务控制语言    commit、rollback</code></pre><h3 id="SQL的常见命令"><a href="#SQL的常见命令" class="headerlink" title="SQL的常见命令"></a>SQL的常见命令</h3><pre><code>show databases； 查看所有的数据库use 库名； 打开指定 的库show tables ; 显示库中的所有表show tables from 库名;显示指定库中的所有表create table 表名(    字段名 字段类型,        字段名 字段类型); 创建表desc 表名; 查看指定表的结构select * from 表名;显示表中的所有数据</code></pre><h2 id="DQL语言的学习"><a href="#DQL语言的学习" class="headerlink" title="DQL语言的学习"></a>DQL语言的学习</h2><h3 id="进阶1：基础查询"><a href="#进阶1：基础查询" class="headerlink" title="进阶1：基础查询"></a>进阶1：基础查询</h3><pre><code>语法：SELECT 要查询的东西【FROM 表名】;类似于Java中 :System.out.println(要打印的东西);特点：①通过select查询完的结果 ，是一个虚拟的表格，不是真实存在② 要查询的东西 可以是常量值、可以是表达式、可以是字段、可以是函数</code></pre><h3 id="进阶2：条件查询"><a href="#进阶2：条件查询" class="headerlink" title="进阶2：条件查询"></a>进阶2：条件查询</h3><pre><code>条件查询：根据条件过滤原始表的数据，查询到想要的数据语法：select     要查询的字段|表达式|常量值|函数from     表where     条件 ;分类：一、条件表达式    示例：salary&gt;10000    条件运算符：    &gt; &lt; &gt;= &lt;= = != &lt;&gt;二、逻辑表达式示例：salary&gt;10000 &amp;&amp; salary&lt;20000逻辑运算符：    and（&amp;&amp;）:两个条件如果同时成立，结果为true，否则为false    or(||)：两个条件只要有一个成立，结果为true，否则为false    not(!)：如果条件成立，则not后为false，否则为true三、模糊查询示例：last_name like &#39;a%&#39;</code></pre><h3 id="进阶3：排序查询"><a href="#进阶3：排序查询" class="headerlink" title="进阶3：排序查询"></a>进阶3：排序查询</h3><pre><code>语法：select    要查询的东西from    表where     条件order by 排序的字段|表达式|函数|别名 【asc|desc】</code></pre><p>​    </p><h3 id="进阶4：常见函数"><a href="#进阶4：常见函数" class="headerlink" title="进阶4：常见函数"></a>进阶4：常见函数</h3><p>​    一、单行函数<br>​    1、字符函数<br>​        concat拼接<br>​        substr截取子串<br>​        upper转换成大写<br>​        lower转换成小写<br>​        trim去前后指定的空格和字符<br>​        ltrim去左边空格<br>​        rtrim去右边空格<br>​        replace替换<br>​        lpad左填充<br>​        rpad右填充<br>​        instr返回子串第一次出现的索引<br>​        length 获取字节个数<br>​        </p><pre><code>2、数学函数    round 四舍五入    rand 随机数    floor向下取整    ceil向上取整    mod取余    truncate截断3、日期函数    now当前系统日期+时间    curdate当前系统日期    curtime当前系统时间    str_to_date 将字符转换成日期    date_format将日期转换成字符4、流程控制函数    if 处理双分支    case语句 处理多分支        情况1：处理等值判断        情况2：处理条件判断    5、其他函数    version版本    database当前库    user当前连接用户</code></pre><p>​    </p><p>二、分组函数</p><pre><code>    sum 求和    max 最大值    min 最小值    avg 平均值    count 计数    特点：    1、以上五个分组函数都忽略null值，除了count(*)    2、sum和avg一般用于处理数值型        max、min、count可以处理任何数据类型    3、都可以搭配distinct使用，用于统计去重后的结果    4、count的参数可以支持：        字段、*、常量值，一般放1       建议使用 count(*)</code></pre><h3 id="进阶5：分组查询"><a href="#进阶5：分组查询" class="headerlink" title="进阶5：分组查询"></a>进阶5：分组查询</h3><pre><code>语法：select 查询的字段，分组函数from 表group by 分组的字段</code></pre><p>​    </p><pre><code>特点：1、可以按单个字段分组2、和分组函数一同查询的字段最好是分组后的字段3、分组筛选        针对的表    位置            关键字分组前筛选：    原始表        group by的前面        where分组后筛选：    分组后的结果集    group by的后面        having4、可以按多个字段分组，字段之间用逗号隔开5、可以支持排序6、having后可以支持别名</code></pre><h3 id="进阶6：多表连接查询"><a href="#进阶6：多表连接查询" class="headerlink" title="进阶6：多表连接查询"></a>进阶6：多表连接查询</h3><pre><code>笛卡尔乘积：如果连接条件省略或无效则会出现解决办法：添加上连接条件</code></pre><p>一、传统模式下的连接 ：等值连接——非等值连接</p><pre><code>1.等值连接的结果 = 多个表的交集2.n表连接，至少需要n-1个连接条件3.多个表不分主次，没有顺序要求4.一般为表起别名，提高阅读性和性能</code></pre><p>二、sql99语法：通过join关键字实现连接</p><pre><code>含义：1999年推出的sql语法支持：等值连接、非等值连接 （内连接）外连接交叉连接语法：select 字段，...from 表1【inner|left outer|right outer|cross】join 表2 on  连接条件【inner|left outer|right outer|cross】join 表3 on  连接条件【where 筛选条件】【group by 分组字段】【having 分组后的筛选条件】【order by 排序的字段或表达式】好处：语句上，连接条件和筛选条件实现了分离，简洁明了！</code></pre><p>​<br>三、自连接</p><p>案例：查询员工名和直接上级的名称</p><p>sql99</p><pre><code>SELECT e.last_name,m.last_nameFROM employees eJOIN employees m ON e.`manager_id`=m.`employee_id`;</code></pre><p>sql92</p><pre><code>SELECT e.last_name,m.last_nameFROM employees e,employees m WHERE e.`manager_id`=m.`employee_id`;</code></pre><h3 id="进阶7：子查询"><a href="#进阶7：子查询" class="headerlink" title="进阶7：子查询"></a>进阶7：子查询</h3><p>含义：</p><pre><code>一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询在外面的查询语句，称为主查询或外查询</code></pre><p>特点：</p><pre><code>1、子查询都放在小括号内2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧3、子查询优先于主查询执行，主查询使用了子查询的执行结果4、子查询根据查询结果的行数不同分为以下两类：① 单行子查询    结果集只有一行    一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;=     非法使用子查询的情况：    a、子查询的结果为一组值    b、子查询的结果为空    ② 多行子查询    结果集有多行    一般搭配多行操作符使用：any、all、in、not in    in： 属于子查询结果中的任意一个就行    any和all往往可以用其他查询代替</code></pre><h3 id="进阶8：分页查询"><a href="#进阶8：分页查询" class="headerlink" title="进阶8：分页查询"></a>进阶8：分页查询</h3><p>应用场景：</p><pre><code>实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句</code></pre><p>语法：</p><pre><code>select 字段|表达式,...from 表【where 条件】【group by 分组字段】【having 条件】【order by 排序的字段】limit 【起始的条目索引，】条目数;</code></pre><p>特点：</p><pre><code>1.起始条目索引从0开始2.limit子句放在查询语句的最后3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage假如:每页显示条目数sizePerPage要显示的页数 page</code></pre><h3 id="进阶9：联合查询"><a href="#进阶9：联合查询" class="headerlink" title="进阶9：联合查询"></a>进阶9：联合查询</h3><p>引入：<br>    union 联合、合并</p><p>语法：</p><pre><code>select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union  【all】.....select 字段|常量|表达式|函数 【from 表】 【where 条件】</code></pre><p>特点：</p><pre><code>1、多条查询语句的查询的列数必须是一致的2、多条查询语句的查询的列的类型几乎相同3、union代表去重，union all代表不去重</code></pre><h2 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>语法：<br>    insert into 表名(字段名，…)<br>    values(值1，…);</p><p>特点：</p><pre><code>1、字段类型和值类型一致或兼容，而且一一对应2、可以为空的字段，可以不用插入值，或用null填充3、不可以为空的字段，必须插入值4、字段个数和值的个数必须一致5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致</code></pre><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>修改单表语法：</p><pre><code>update 表名 set 字段=新值,字段=新值【where 条件】</code></pre><p>修改多表语法：</p><pre><code>update 表1 别名1,表2 别名2set 字段=新值，字段=新值where 连接条件and 筛选条件</code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>方式1：delete语句 </p><p>单表的删除： ★<br>    delete from 表名 【where 筛选条件】</p><p>多表的删除：<br>    delete 别名1，别名2<br>    from 表1 别名1，表2 别名2<br>    where 连接条件<br>    and 筛选条件;</p><p>方式2：truncate语句</p><pre><code>truncate table 表名</code></pre><p>两种方式的区别【面试题】</p><pre><code>#1.truncate不能加where条件，而delete可以加where条件#2.truncate的效率高一丢丢#3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始#delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始#4.truncate删除不能回滚，delete删除可以回滚</code></pre><h2 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h2><h3 id="库和表的管理"><a href="#库和表的管理" class="headerlink" title="库和表的管理"></a>库和表的管理</h3><p>库的管理：</p><pre><code>一、创建库create database 库名二、删除库drop database 库名</code></pre><p>表的管理：<br>    #1.创建表</p><pre><code>CREATE TABLE IF NOT EXISTS stuinfo(    stuId INT,    stuName VARCHAR(20),    gender CHAR,    bornDate DATETIME</code></pre><p>​    </p><pre><code>);DESC studentinfo;#2.修改表 alter语法：ALTER TABLE 表名 ADD|MODIFY|DROP|CHANGE COLUMN 字段名 【字段类型】;#①修改字段名ALTER TABLE studentinfo CHANGE  COLUMN sex gender CHAR;#②修改表名ALTER TABLE stuinfo RENAME [TO]  studentinfo;#③修改字段类型和列级约束ALTER TABLE studentinfo MODIFY COLUMN borndate DATE ;#④添加字段ALTER TABLE studentinfo ADD COLUMN email VARCHAR(20) first;#⑤删除字段ALTER TABLE studentinfo DROP COLUMN email;</code></pre><p>​    </p><pre><code># 3.删除表DROP TABLE [IF EXISTS] studentinfo;</code></pre><p>​    </p><h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h3><pre><code>整型：    小数：    浮点型    定点型字符型：日期型：Blob类型：</code></pre><h3 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h3><pre><code>NOT NULLDEFAULTUNIQUECHECKPRIMARY KEYFOREIGN KEY</code></pre><h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><pre><code>通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态</code></pre><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><pre><code>（ACID）原子性：要么都执行，要么都回滚一致性：保证数据的状态操作前和操作后保持一致隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</code></pre><p>相关步骤：</p><pre><code>1、开启事务2、编写事务的一组逻辑操作单元（多条sql语句）3、提交事务或回滚事务</code></pre><h3 id="事务的分类："><a href="#事务的分类：" class="headerlink" title="事务的分类："></a>事务的分类：</h3><p>隐式事务，没有明显的开启和结束事务的标志</p><pre><code>比如insert、update、delete语句本身就是一个事务</code></pre><p>显式事务，具有明显的开启和结束事务的标志</p><pre><code>    1、开启事务    取消自动提交事务的功能        2、编写事务的一组逻辑操作单元（多条sql语句）    insert    update    delete        3、提交事务或回滚事务</code></pre><h3 id="使用到的关键字"><a href="#使用到的关键字" class="headerlink" title="使用到的关键字"></a>使用到的关键字</h3><pre><code>set autocommit=0;start transaction;commit;rollback;savepoint  断点commit to 断点rollback to 断点</code></pre><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别:"></a>事务的隔离级别:</h3><p>事务并发问题如何发生？</p><pre><code>当多个事务同时操作同一个数据库的相同数据时</code></pre><p>事务的并发问题有哪些？</p><pre><code>脏读：一个事务读取到了另外一个事务未提交的数据不可重复读：同一个事务中，多次读取到的数据不一致幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</code></pre><p>如何避免事务的并发问题？</p><pre><code>通过设置事务的隔离级别1、READ UNCOMMITTED2、READ COMMITTED 可以避免脏读3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读4、SERIALIZABLE可以避免脏读、不可重复读和幻读</code></pre><p>设置隔离级别：</p><pre><code>set session|global  transaction isolation level 隔离级别名;</code></pre><p>查看隔离级别：</p><pre><code>select @@tx_isolation;</code></pre><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>含义：理解成一张虚拟的表</p><p>视图和表的区别：</p><pre><code>    使用方式    占用物理空间视图    完全相同    不占用，仅仅保存的是sql逻辑表    完全相同    占用</code></pre><p>视图的好处：</p><pre><code>1、sql语句提高重用性，效率高2、和表实现了分离，提高了安全性</code></pre><h3 id="视图的创建"><a href="#视图的创建" class="headerlink" title="视图的创建"></a>视图的创建</h3><pre><code>语法：CREATE VIEW  视图名AS查询语句;</code></pre><h3 id="视图的增删改查"><a href="#视图的增删改查" class="headerlink" title="视图的增删改查"></a>视图的增删改查</h3><pre><code>1、查看视图的数据 ★SELECT * FROM my_v4;SELECT * FROM my_v1 WHERE last_name=&#39;Partners&#39;;2、插入视图的数据INSERT INTO my_v4(last_name,department_id) VALUES(&#39;虚竹&#39;,90);3、修改视图的数据UPDATE my_v4 SET last_name =&#39;梦姑&#39; WHERE last_name=&#39;虚竹&#39;;</code></pre><p>​    </p><pre><code>4、删除视图的数据DELETE FROM my_v4;</code></pre><p>###某些视图不能更新<br>    包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all<br>    常量视图<br>    Select中包含子查询<br>    join<br>    from一个不能更新的视图<br>    where子句的子查询引用了from子句中的表</p><h3 id="视图逻辑的更新"><a href="#视图逻辑的更新" class="headerlink" title="视图逻辑的更新"></a>视图逻辑的更新</h3><pre><code>#方式一：CREATE OR REPLACE VIEW test_v7ASSELECT last_name FROM employeesWHERE employee_id&gt;100;# 方式二:ALTER VIEW test_v7ASSELECT employee_id FROM employees;SELECT * FROM test_v7;</code></pre><h3 id="视图的删除"><a href="#视图的删除" class="headerlink" title="视图的删除"></a>视图的删除</h3><pre><code>DROP VIEW test_v1,test_v2,test_v3;</code></pre><h3 id="视图结构的查看"><a href="#视图结构的查看" class="headerlink" title="视图结构的查看"></a>视图结构的查看</h3><pre><code>DESC test_v7;SHOW CREATE VIEW test_v7;</code></pre><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>含义：一组经过预先编译的sql语句的集合<br>好处：</p><pre><code>1、提高了sql语句的重用性，减少了开发程序员的压力2、提高了效率3、减少了传输次数</code></pre><p>分类：</p><pre><code>1、无返回无参2、仅仅带in类型，无返回有参3、仅仅带out类型，有返回无参4、既带in又带out，有返回有参5、带inout，有返回有参注意：in、out、inout都可以在一个存储过程中带多个</code></pre><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><p>语法：</p><pre><code>create procedure 存储过程名(in|out|inout 参数名  参数类型,...)begin    存储过程体end</code></pre><p>类似于方法：</p><pre><code>修饰符 返回类型 方法名(参数类型 参数名,...)&#123;    方法体;&#125;</code></pre><p>注意</p><pre><code>1、需要设置新的结束标记delimiter 新的结束标记示例：delimiter $CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)BEGIN    sql语句1;    sql语句2;END $2、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end3、参数前面的符号的意思in:该参数只能作为输入 （该参数不能做返回值）out：该参数只能作为输出（该参数只能做返回值）inout：既能做输入又能做输出</code></pre><h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><pre><code>call 存储过程名(实参列表)</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><p>学过的函数：LENGTH、SUBSTR、CONCAT等<br>语法：</p><pre><code>CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型BEGIN    函数体END</code></pre><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><pre><code>SELECT 函数名（实参列表）</code></pre><h3 id="函数和存储过程的区别"><a href="#函数和存储过程的区别" class="headerlink" title="函数和存储过程的区别"></a>函数和存储过程的区别</h3><pre><code>        关键字        调用语法    返回值            应用场景函数        FUNCTION    SELECT 函数()    只能是一个        一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个存储过程    PROCEDURE    CALL 存储过程()    可以有0个或多个        一般用于更新</code></pre><h2 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h2><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><p>一、全局变量</p><p>作用域：针对于所有会话（连接）有效，但不能跨重启</p><pre><code>查看所有全局变量SHOW GLOBAL VARIABLES;查看满足条件的部分系统变量SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39;;查看指定的系统变量的值SELECT @@global.autocommit;为某个系统变量赋值SET @@global.autocommit=0;SET GLOBAL autocommit=0;</code></pre><p>二、会话变量</p><p>作用域：针对于当前会话（连接）有效</p><pre><code>查看所有会话变量SHOW SESSION VARIABLES;查看满足条件的部分会话变量SHOW SESSION VARIABLES LIKE &#39;%char%&#39;;查看指定的会话变量的值SELECT @@autocommit;SELECT @@session.tx_isolation;为某个会话变量赋值SET @@session.tx_isolation=&#39;read-uncommitted&#39;;SET SESSION tx_isolation=&#39;read-committed&#39;;</code></pre><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><p>一、用户变量</p><p>声明并初始化：</p><pre><code>SET @变量名=值;SET @变量名:=值;SELECT @变量名:=值;</code></pre><p>赋值：</p><pre><code>方式一：一般用于赋简单的值SET 变量名=值;SET 变量名:=值;SELECT 变量名:=值;方式二：一般用于赋表 中的字段值SELECT 字段名或表达式 INTO 变量FROM 表;</code></pre><p>使用：</p><pre><code>select @变量名;</code></pre><p>二、局部变量</p><p>声明：</p><pre><code>declare 变量名 类型 【default 值】;</code></pre><p>赋值：</p><pre><code>方式一：一般用于赋简单的值SET 变量名=值;SET 变量名:=值;SELECT 变量名:=值;方式二：一般用于赋表 中的字段值SELECT 字段名或表达式 INTO 变量FROM 表;</code></pre><p>使用：</p><pre><code>select 变量名</code></pre><p>二者的区别：</p><pre><code>        作用域            定义位置        语法</code></pre><p>用户变量    当前会话        会话的任何地方        加@符号，不用指定类型<br>局部变量    定义它的BEGIN END中     BEGIN END的第一句话    一般不用加@,需要指定类型</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>一、if函数<br>    语法：if(条件，值1，值2)<br>    特点：可以用在任何位置</p><p>二、case语句</p><p>语法：</p><pre><code>情况一：类似于switchcase 表达式when 值1 then 结果1或语句1(如果是语句，需要加分号) when 值2 then 结果2或语句2(如果是语句，需要加分号)...else 结果n或语句n(如果是语句，需要加分号)end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）情况二：类似于多重ifcase when 条件1 then 结果1或语句1(如果是语句，需要加分号) when 条件2 then 结果2或语句2(如果是语句，需要加分号)...else 结果n或语句n(如果是语句，需要加分号)end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）</code></pre><p>特点：<br>    可以用在任何位置</p><p>三、if elseif语句</p><p>语法：</p><pre><code>if 情况1 then 语句1;elseif 情况2 then 语句2;...else 语句n;end if;</code></pre><p>特点：<br>    只能用在begin end中！！！！！！！！！！！！！！！</p><p>三者比较：<br>            应用场合<br>    if函数        简单双分支<br>    case结构    等值判断 的多分支<br>    if结构        区间判断 的多分支</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>语法：</p><pre><code>【标签：】WHILE 循环条件  DO    循环体END WHILE 【标签】;</code></pre><p>特点：</p><pre><code>只能放在BEGIN END里面如果要搭配leave跳转语句，需要使用标签，否则可以不用标签leave类似于java中的break语句，跳出所在循环！！！</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2022/04/04/JDBC/"/>
      <url>/2022/04/04/JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章：JDBC概述"><a href="#第1章：JDBC概述" class="headerlink" title="第1章：JDBC概述"></a>第1章：JDBC概述</h1><h2 id="1-1-数据的持久化"><a href="#1-1-数据的持久化" class="headerlink" title="1.1 数据的持久化"></a>1.1 数据的持久化</h2><ul><li><p>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>上加以”固化”<strong>，而持久化的实现过程大多通过各种关系数据库来完成</strong>。<span id="more"></span></p></li><li><p>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</p><p><img src="/2022/04/04/JDBC/1566741430592.png" alt="1566741430592"></p></li></ul><h2 id="1-2-Java中的数据存储技术"><a href="#1-2-Java中的数据存储技术" class="headerlink" title="1.2 Java中的数据存储技术"></a>1.2 Java中的数据存储技术</h2><ul><li><p>在Java中，数据库存取技术可分为如下几类：</p><ul><li><p><strong>JDBC</strong>直接访问数据库</p></li><li><p>JDO (Java Data Object )技术</p></li><li><p><strong>第三方O&#x2F;R工具</strong>，如Hibernate, Mybatis 等</p></li></ul></li><li><p>JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。</p></li></ul><h2 id="1-3-JDBC介绍"><a href="#1-3-JDBC介绍" class="headerlink" title="1.3 JDBC介绍"></a>1.3 JDBC介绍</h2><ul><li>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</li><li>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</li><li>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li><li>如果没有JDBC，那么Java程序访问数据库时是这样的：</li></ul><p><img src="/2022/04/04/JDBC/1555575760234.png" alt="1555575760234"></p><hr><ul><li>有了JDBC，Java程序访问数据库时是这样的：</li></ul><p><img src="/2022/04/04/JDBC/1555575981203.png" alt="1555575981203"></p><hr><ul><li>总结如下：</li></ul><p><img src="/2022/04/04/JDBC/1566741692804.png" alt="1566741692804"></p><h2 id="1-4-JDBC体系结构"><a href="#1-4-JDBC体系结构" class="headerlink" title="1.4 JDBC体系结构"></a>1.4 JDBC体系结构</h2><ul><li>JDBC接口（API）包括两个层次：<ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li><strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li></ul></li></ul><blockquote><p><strong>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</strong></p><p><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。                                                                ————面向接口编程</strong></p></blockquote><h2 id="1-5-JDBC程序编写步骤"><a href="#1-5-JDBC程序编写步骤" class="headerlink" title="1.5 JDBC程序编写步骤"></a>1.5 JDBC程序编写步骤</h2><p><img src="/2022/04/04/JDBC/1565969323908.png" alt="1565969323908"></p><blockquote><p>补充：ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote><h1 id="第2章：获取数据库连接"><a href="#第2章：获取数据库连接" class="headerlink" title="第2章：获取数据库连接"></a>第2章：获取数据库连接</h1><h2 id="2-1-要素一：Driver接口实现类"><a href="#2-1-要素一：Driver接口实现类" class="headerlink" title="2.1 要素一：Driver接口实现类"></a>2.1 要素一：Driver接口实现类</h2><h3 id="2-1-1-Driver接口介绍"><a href="#2-1-1-Driver接口介绍" class="headerlink" title="2.1.1 Driver接口介绍"></a>2.1.1 Driver接口介绍</h3><ul><li><p>java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p></li><li><p>在程序中不需要直接去访问实现了 Driver 接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现。</p><ul><li>Oracle的驱动：<strong>oracle.jdbc.driver.OracleDriver</strong></li><li>mySql的驱动： <strong>com.mysql.jdbc.Driver</strong></li></ul></li></ul><p><img src="/2022/04/04/JDBC/1555576157618.png" alt="1555576157618"></p><p><img src="/2022/04/04/JDBC/1555576170074.png" alt="1555576170074"></p><ul><li>将上述jar包拷贝到Java工程的一个目录中，习惯上新建一个lib文件夹。</li></ul><p> <img src="/2022/04/04/JDBC/1566134718955.png" alt="1566134718955"></p><p>在驱动jar上右键–&gt;Build Path–&gt;Add to Build Path</p><p> <img src="/2022/04/04/JDBC/1566134781682.png" alt="1566134781682"></p><p>注意：如果是Dynamic Web Project（动态的web项目）话，则是把驱动jar放到WebContent（有的开发工具叫WebRoot）目录中的WEB-INF目录中的lib目录下即可</p><p> <img src="/2022/04/04/JDBC/1566135290460.png" alt="1566135290460"></p><h3 id="2-1-2-加载与注册JDBC驱动"><a href="#2-1-2-加载与注册JDBC驱动" class="headerlink" title="2.1.2 加载与注册JDBC驱动"></a>2.1.2 加载与注册JDBC驱动</h3><ul><li><p>加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p><ul><li><strong>Class.forName(“com.mysql.jdbc.Driver”);</strong></li></ul></li><li><p>注册驱动：DriverManager 类是驱动程序管理器类，负责管理驱动程序</p><ul><li><p><strong>使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动</strong></p></li><li><p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类<strong>都</strong>包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。下图是MySQL的Driver实现类的源码：</p><p><img src="/2022/04/04/JDBC/1566136831283.png" alt="1566136831283"></p></li></ul></li></ul><h2 id="2-2-要素二：URL"><a href="#2-2-要素二：URL" class="headerlink" title="2.2 要素二：URL"></a>2.2 要素二：URL</h2><ul><li><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</p></li><li><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。 </p><ul><li><strong>jdbc:子协议:子名称</strong></li><li><strong>协议</strong>：JDBC URL中的协议总是jdbc </li><li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li><li><strong>子名称</strong>：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)<strong>，端口号，数据库名</strong></li></ul></li><li><p>举例：</p><p><img src="/2022/04/04/JDBC/1555576477107.png" alt="1555576477107"></p></li><li><p><strong>几种常用数据库的 JDBC URL</strong></p><ul><li><p>MySQL的连接URL编写方式：</p><ul><li>jdbc:mysql:&#x2F;&#x2F;主机名称:mysql服务端口号&#x2F;数据库名称?参数&#x3D;值&amp;参数&#x3D;值</li><li>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;atguigu</li><li>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;atguigu**?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8**（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</li><li>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;atguigu?user&#x3D;root&amp;password&#x3D;123456</li></ul></li><li><p>Oracle 9i的连接URL编写方式：</p><ul><li>jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</li><li>jdbc:oracle:thin:@localhost:1521:atguigu</li></ul></li><li><p>SQLServer的连接URL编写方式：</p><ul><li><p>jdbc:sqlserver:&#x2F;&#x2F;主机名称:sqlserver服务端口号:DatabaseName&#x3D;数据库名称</p></li><li><p>jdbc:sqlserver:&#x2F;&#x2F;localhost:1433:DatabaseName&#x3D;atguigu</p></li></ul></li></ul></li></ul><h2 id="2-3-要素三：用户名和密码"><a href="#2-3-要素三：用户名和密码" class="headerlink" title="2.3 要素三：用户名和密码"></a>2.3 要素三：用户名和密码</h2><ul><li>user,password可以用“属性名&#x3D;属性值”方式告诉数据库</li><li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li></ul><h2 id="2-4-数据库连接方式举例"><a href="#2-4-数据库连接方式举例" class="headerlink" title="2.4 数据库连接方式举例"></a>2.4 数据库连接方式举例</h2><h3 id="2-4-1-连接方式一"><a href="#2-4-1-连接方式一" class="headerlink" title="2.4.1 连接方式一"></a>2.4.1 连接方式一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnection1</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.提供java.sql.Driver接口实现类的对象</span></span><br><span class="line">           <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">           driver = <span class="keyword">new</span> <span class="title class_">com</span>.mysql.jdbc.Driver();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.提供url，指明具体操作的数据</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.提供Properties的对象，指明用户名和密码</span></span><br><span class="line">           <span class="type">Properties</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">           info.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">           info.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.调用driver的connect()，获取连接</span></span><br><span class="line">           <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> driver.connect(url, info);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：上述代码中显式出现了第三方数据库的API</p></blockquote><h3 id="2-4-2-连接方式二"><a href="#2-4-2-连接方式二" class="headerlink" title="2.4.2 连接方式二"></a>2.4.2 连接方式二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnection2</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.实例化Driver</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">           <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">           <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.提供url，指明具体操作的数据</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.提供Properties的对象，指明用户名和密码</span></span><br><span class="line">           <span class="type">Properties</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">           info.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">           info.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.调用driver的connect()，获取连接</span></span><br><span class="line">           <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> driver.connect(url, info);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。</p></blockquote><h3 id="2-4-3-连接方式三"><a href="#2-4-3-连接方式三" class="headerlink" title="2.4.3 连接方式三"></a>2.4.3 连接方式三</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnection3</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.数据库连接的4个基本要素：</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">driverName</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.实例化Driver</span></span><br><span class="line">           <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(driverName);</span><br><span class="line">           <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) clazz.newInstance();</span><br><span class="line">           <span class="comment">//3.注册驱动</span></span><br><span class="line">           DriverManager.registerDriver(driver);</span><br><span class="line">           <span class="comment">//4.获取连接</span></span><br><span class="line">           <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。</p></blockquote><h3 id="2-4-4-连接方式四"><a href="#2-4-4-连接方式四" class="headerlink" title="2.4.4 连接方式四"></a>2.4.4 连接方式四</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnection4</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.数据库连接的4个基本要素：</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">driverName</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.加载驱动 （①实例化Driver ②注册驱动）</span></span><br><span class="line">           Class.forName(driverName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//Driver driver = (Driver) clazz.newInstance();</span></span><br><span class="line">           <span class="comment">//3.注册驱动</span></span><br><span class="line">           <span class="comment">//DriverManager.registerDriver(driver);</span></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           可以注释掉上述代码的原因，是因为在mysql的Driver类中声明有：</span></span><br><span class="line"><span class="comment">           static &#123;</span></span><br><span class="line"><span class="comment">               try &#123;</span></span><br><span class="line"><span class="comment">                   DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">               &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="comment">                   throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span></span><br><span class="line"><span class="comment">               &#125;</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.获取连接</span></span><br><span class="line">           <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。</p></blockquote><h3 id="2-4-5-连接方式五-最终版"><a href="#2-4-5-连接方式五-最终版" class="headerlink" title="2.4.5 连接方式五(最终版)"></a>2.4.5 连接方式五(最终版)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testConnection5</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="comment">//1.加载配置文件</span></span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> ConnectionTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">       <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">       pros.load(is);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//2.读取配置信息</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">driverClass</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.加载驱动</span></span><br><span class="line">       Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.获取连接</span></span><br><span class="line">       <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">       System.out.println(conn);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其中，配置文件声明在工程的src目录下：【jdbc.properties】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">abc123</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：使用配置文件的方式保存配置信息，在代码中加载配置文件</p><p><strong>使用配置文件的好处：</strong></p><p>①实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码<br>②如果修改了配置信息，省去重新编译的过程。</p></blockquote><h1 id="第3章：使用PreparedStatement实现CRUD操作"><a href="#第3章：使用PreparedStatement实现CRUD操作" class="headerlink" title="第3章：使用PreparedStatement实现CRUD操作"></a>第3章：使用PreparedStatement实现CRUD操作</h1><h2 id="3-1-操作和访问数据库"><a href="#3-1-操作和访问数据库" class="headerlink" title="3.1 操作和访问数据库"></a>3.1 操作和访问数据库</h2><ul><li><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p></li><li><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p><img src="/2022/04/04/JDBC/1566573842140.png" alt="1566573842140"></p></li></ul><h2 id="3-2-使用Statement操作数据表的弊端"><a href="#3-2-使用Statement操作数据表的弊端" class="headerlink" title="3.2 使用Statement操作数据表的弊端"></a>3.2 使用Statement操作数据表的弊端</h2><ul><li><p>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</p></li><li><p>Statement 接口中定义了下列方法用于执行 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> excuteUpdate(String <span class="keyword">sql</span>)：执行更新操作<span class="keyword">INSERT</span>、<span class="keyword">UPDATE</span>、<span class="keyword">DELETE</span></span><br><span class="line">ResultSet executeQuery(String <span class="keyword">sql</span>)：执行查询操作<span class="keyword">SELECT</span></span><br></pre></td></tr></table></figure></li><li><p>但是使用Statement操作数据表存在弊端：</p><ul><li><strong>问题一：存在拼串操作，繁琐</strong></li><li><strong>问题二：存在SQL注入问题</strong></li></ul></li><li><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令(如：SELECT user, password FROM user_table WHERE user&#x3D;’a’ OR 1 &#x3D; ‘ AND password &#x3D; ‘ OR ‘1’ &#x3D; ‘1’) ，从而利用系统的 SQL 引擎完成恶意行为的做法。</p></li><li><p>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了。</p></li><li><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StatementTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Statement的弊端：需要拼写sql语句，并且存在SQL注入的问题</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLogin</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;用户名：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> scan.nextLine();</span><br><span class="line">System.out.print(<span class="string">&quot;密   码：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scan.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT user,password FROM user_table WHERE USER = &#x27;1&#x27; or &#x27; AND PASSWORD = &#x27;=&#x27;1&#x27; or &#x27;1&#x27; = &#x27;1&#x27;;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT user,password FROM user_table WHERE USER = &#x27;&quot;</span> + userName + <span class="string">&quot;&#x27; AND PASSWORD = &#x27;&quot;</span> + password</span><br><span class="line">+ <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> get(sql, User.class);</span><br><span class="line"><span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;登陆成功!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Statement实现对数据表的查询操作</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">get</span><span class="params">(String sql, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.加载配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> StatementTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"><span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">pros.load(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.读取配置信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">driverClass</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.加载驱动</span></span><br><span class="line">Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.获取连接</span></span><br><span class="line">conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">rs = st.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果集的元数据</span></span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果集的列数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line"></span><br><span class="line">t = clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line"><span class="comment">// //1. 获取列的名称</span></span><br><span class="line"><span class="comment">// String columnName = rsmd.getColumnName(i+1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取列的别名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 根据列名获取对应数据表中的数据</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">columnVal</span> <span class="operator">=</span> rs.getObject(columnName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 将数据表中得到的数据，封装进对象</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnName);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line"><span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (st != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>综上：</p><p><img src="/2022/04/04/JDBC/1566569819744.png" alt="1566569819744"></p><h2 id="3-3-PreparedStatement的使用"><a href="#3-3-PreparedStatement的使用" class="headerlink" title="3.3 PreparedStatement的使用"></a>3.3 PreparedStatement的使用</h2><h3 id="3-3-1-PreparedStatement介绍"><a href="#3-3-1-PreparedStatement介绍" class="headerlink" title="3.3.1 PreparedStatement介绍"></a>3.3.1 PreparedStatement介绍</h3><ul><li><p>可以通过调用 Connection 对象的 <strong>preparedStatement(String sql)</strong> 方法获取 PreparedStatement 对象</p></li><li><p><strong>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</strong></p></li><li><p>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</p></li></ul><h3 id="3-3-2-PreparedStatement-vs-Statement"><a href="#3-3-2-PreparedStatement-vs-Statement" class="headerlink" title="3.3.2 PreparedStatement vs Statement"></a>3.3.2 PreparedStatement vs Statement</h3><ul><li><p>代码的可读性和可维护性。</p></li><li><p><strong>PreparedStatement 能最大可能提高性能：</strong></p><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li><li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样<u>每执行一次都要对传入的语句编译一次。</u></li><li>(语法检查，语义检查，翻译成二进制命令，缓存)</li></ul></li><li><p>PreparedStatement 可以防止 SQL 注入</p></li></ul><h3 id="3-3-3-Java与SQL对应数据类型转换表"><a href="#3-3-3-Java与SQL对应数据类型转换表" class="headerlink" title="3.3.3 Java与SQL对应数据类型转换表"></a>3.3.3 Java与SQL对应数据类型转换表</h3><table><thead><tr><th>Java类型</th><th>SQL类型</th></tr></thead><tbody><tr><td>boolean</td><td>BIT</td></tr><tr><td>byte</td><td>TINYINT</td></tr><tr><td>short</td><td>SMALLINT</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>BIGINT</td></tr><tr><td>String</td><td>CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td>byte   array</td><td>BINARY  ,    VAR BINARY</td></tr><tr><td>java.sql.Date</td><td>DATE</td></tr><tr><td>java.sql.Time</td><td>TIME</td></tr><tr><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr></tbody></table><h3 id="3-3-4-使用PreparedStatement实现增、删、改操作"><a href="#3-3-4-使用PreparedStatement实现增、删、改操作" class="headerlink" title="3.3.4 使用PreparedStatement实现增、删、改操作"></a>3.3.4 使用PreparedStatement实现增、删、改操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String sql,Object ... args)</span>&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取数据库的连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-5-使用PreparedStatement实现查询操作"><a href="#3-3-5-使用PreparedStatement实现查询操作" class="headerlink" title="3.3.5 使用PreparedStatement实现查询操作"></a>3.3.5 使用PreparedStatement实现查询操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的针对于不同表的查询:返回一个对象 (version 1.0)</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getInstance</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.预编译sql语句，得到PreparedStatement对象</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.执行executeQuery(),得到结果集：ResultSet</span></span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.得到结果集的元数据：ResultSetMetaData</span></span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnCount; i++) &#123;<span class="comment">// 遍历每一个列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">columnVal</span> <span class="operator">=</span> rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 获取列的别名:列的别名，使用类的属性名充当</span></span><br><span class="line"><span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 6.2使用反射，给对象的相应属性赋值</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnLabel);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 7.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入问题。</p></blockquote><h2 id="3-4-ResultSet与ResultSetMetaData"><a href="#3-4-ResultSet与ResultSetMetaData" class="headerlink" title="3.4 ResultSet与ResultSetMetaData"></a>3.4 ResultSet与ResultSetMetaData</h2><h3 id="3-4-1-ResultSet"><a href="#3-4-1-ResultSet" class="headerlink" title="3.4.1 ResultSet"></a>3.4.1 ResultSet</h3><ul><li><p>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</p></li><li><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</p></li><li><p>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</p></li><li><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</p></li><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li><li><p>ResultSet 接口的常用方法：</p><ul><li><p>boolean next()</p></li><li><p>getString()</p></li><li><p>…</p></li></ul><p><img src="/2022/04/04/JDBC/1555580152530.png" alt="1555580152530"></p></li></ul><h3 id="3-4-2-ResultSetMetaData"><a href="#3-4-2-ResultSetMetaData" class="headerlink" title="3.4.2 ResultSetMetaData"></a>3.4.2 ResultSetMetaData</h3><ul><li><p>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</p></li><li><p>ResultSetMetaData meta &#x3D; rs.getMetaData();</p><ul><li><p><strong>getColumnName</strong>(int column)：获取指定列的名称</p></li><li><p><strong>getColumnLabel</strong>(int column)：获取指定列的别名</p></li><li><p><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </p></li><li><p>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。 </p></li><li><p>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。 </p></li><li><p><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。 </p></li><li><p>isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。</p></li></ul></li></ul><p><img src="/2022/04/04/JDBC/1555579494691.png" alt="1555579494691"></p><p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p><p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p><p><strong>问题2：关于ResultSetMetaData</strong></p><ol><li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li><li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li><li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li></ol><p><img src="/2022/04/04/JDBC/1555579816884.png" alt="1555579816884"></p><h2 id="3-5-资源的释放"><a href="#3-5-资源的释放" class="headerlink" title="3.5 资源的释放"></a>3.5 资源的释放</h2><ul><li>释放ResultSet, Statement,Connection。</li><li>数据库连接（Connection）是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早的释放。</strong></li><li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li></ul><h2 id="3-6-JDBC-API小结"><a href="#3-6-JDBC-API小结" class="headerlink" title="3.6 JDBC API小结"></a>3.6 JDBC API小结</h2><ul><li><p>两种思想</p><ul><li><p>面向接口编程的思想</p></li><li><p>ORM思想(object relational mapping)</p><ul><li>一个数据表对应一个java类</li><li>表中的一条记录对应java类的一个对象</li><li>表中的一个字段对应java类的一个属性</li></ul></li></ul><blockquote><p>sql是需要结合列名和表的属性名来写。注意起别名。</p></blockquote></li><li><p>两种技术</p><ul><li>JDBC结果集的元数据：ResultSetMetaData<ul><li>获取列数：getColumnCount()</li><li>获取列的别名：getColumnLabel()</li></ul></li><li>通过反射，创建指定类的对象，获取指定的属性并赋值</li></ul></li></ul><hr><h1 id="章节练习"><a href="#章节练习" class="headerlink" title="章节练习"></a>章节练习</h1><p><strong>练习题1：从控制台向数据库的表customers中插入一条数据，表结构如下：</strong></p><p><img src="/2022/04/04/JDBC/1555580275036.png" alt="1555580275036"></p><p><strong>练习题2：创立数据库表 examstudent，表结构如下：</strong></p><p><img src="/2022/04/04/JDBC/1555580735377.png" alt="1555580735377"></p><p>向数据表中添加如下数据：</p><p><img src="/2022/04/04/JDBC/1555580763636.png" alt="1555580763636"></p><p><strong>代码实现1：插入一个新的student 信息</strong></p><p>请输入考生的详细信息</p><p>Type:<br>IDCard:<br>ExamCard:<br>StudentName:<br>Location:<br>Grade:</p><p>信息录入成功!</p><p><strong>代码实现2：在 eclipse中建立 java 程序：输入身份证号或准考证号可以查询到学生的基本信息。结果如下：</strong></p><p><img src="/2022/04/04/JDBC/1555580937490.png" alt="1555580937490"></p><p><strong>代码实现3：完成学生信息的删除功能</strong></p><p><img src="/2022/04/04/JDBC/1555580965019.png" alt="1555580965019"></p><hr><h1 id="第4章-操作BLOB类型字段"><a href="#第4章-操作BLOB类型字段" class="headerlink" title="第4章 操作BLOB类型字段"></a>第4章 操作BLOB类型字段</h1><h2 id="4-1-MySQL-BLOB类型"><a href="#4-1-MySQL-BLOB类型" class="headerlink" title="4.1 MySQL BLOB类型"></a>4.1 MySQL BLOB类型</h2><ul><li><p>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</p></li><li><p>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</p></li><li><p>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</p></li></ul><p><img src="/2022/04/04/JDBC/1555581069798.png" alt="1555581069798"></p><ul><li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet&#x3D;16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li></ul><h2 id="4-2-向数据表中插入大数据类型"><a href="#4-2-向数据表中插入大数据类型" class="headerlink" title="4.2 向数据表中插入大数据类型"></a>4.2 向数据表中插入大数据类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into customers(name,email,birth,photo)values(?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充占位符</span></span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;徐海强&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">2</span>, <span class="string">&quot;xhq@126.com&quot;</span>);</span><br><span class="line">ps.setDate(<span class="number">3</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">java</span>.util.Date().getTime()));</span><br><span class="line"><span class="comment">// 操作Blob类型的变量</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xhq.png&quot;</span>);</span><br><span class="line">ps.setBlob(<span class="number">4</span>, fis);</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-3-修改数据表中的Blob类型字段"><a href="#4-3-修改数据表中的Blob类型字段" class="headerlink" title="4.3 修改数据表中的Blob类型字段"></a>4.3 修改数据表中的Blob类型字段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update customers set photo = ? where id = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充占位符</span></span><br><span class="line"><span class="comment">// 操作Blob类型的变量</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;coffee.png&quot;</span>);</span><br><span class="line">ps.setBlob(<span class="number">1</span>, fis);</span><br><span class="line">ps.setInt(<span class="number">2</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></table></figure><h2 id="4-4-从数据表中读取大数据类型"><a href="#4-4-从数据表中读取大数据类型" class="headerlink" title="4.4 从数据表中读取大数据类型"></a>4.4 从数据表中读取大数据类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id, name, email, birth, photo FROM customer WHERE id = ?&quot;</span>;</span><br><span class="line">conn = getConnection();</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setInt(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> rs.getString(<span class="number">3</span>);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">birth</span> <span class="operator">=</span> rs.getDate(<span class="number">4</span>);</span><br><span class="line"><span class="type">Customer</span> <span class="variable">cust</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(id, name, email, birth);</span><br><span class="line">    System.out.println(cust); </span><br><span class="line">    <span class="comment">//读取Blob类型的字段</span></span><br><span class="line"><span class="type">Blob</span> <span class="variable">photo</span> <span class="operator">=</span> rs.getBlob(<span class="number">5</span>);</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> photo.getBinaryStream();</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;c.jpg&quot;</span>);</span><br><span class="line"><span class="type">byte</span> [] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">    JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">is.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(os !=  <span class="literal">null</span>)&#123;</span><br><span class="line">os.close();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第5章-批量插入"><a href="#第5章-批量插入" class="headerlink" title="第5章 批量插入"></a>第5章 批量插入</h1><h2 id="5-1-批量执行SQL语句"><a href="#5-1-批量执行SQL语句" class="headerlink" title="5.1 批量执行SQL语句"></a>5.1 批量执行SQL语句</h2><p>当需要成批插入或者更新记录时，可以采用Java的批量<strong>更新</strong>机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</p><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul><h2 id="5-2-高效的批量插入"><a href="#5-2-高效的批量插入" class="headerlink" title="5.2 高效的批量插入"></a>5.2 高效的批量插入</h2><p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表。创建如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> goods(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="5-2-1-实现层次一：使用Statement"><a href="#5-2-1-实现层次一：使用Statement" class="headerlink" title="5.2.1 实现层次一：使用Statement"></a>5.2.1 实现层次一：使用Statement</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">20000</span>;i++)&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into goods(name) values(&#x27;name_&#x27; + &quot;</span>+ i +<span class="string">&quot;)&quot;</span>;</span><br><span class="line">st.executeUpdate(sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-实现层次二：使用PreparedStatement"><a href="#5-2-2-实现层次二：使用PreparedStatement" class="headerlink" title="5.2.2 实现层次二：使用PreparedStatement"></a>5.2.2 实现层次二：使用PreparedStatement</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into goods(name)values(?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">20000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;name_&quot;</span> + i);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="comment">//82340</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></table></figure><h3 id="5-2-3-实现层次三"><a href="#5-2-3-实现层次三" class="headerlink" title="5.2.3 实现层次三"></a>5.2.3 实现层次三</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 修改1： 使用 addBatch() / executeBatch() / clearBatch()</span></span><br><span class="line"><span class="comment"> * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。</span></span><br><span class="line"><span class="comment"> *  ?rewriteBatchedStatements=true 写在配置文件的url后面</span></span><br><span class="line"><span class="comment"> * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into goods(name)values(?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">1000000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;name_&quot;</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.“攒”sql</span></span><br><span class="line">ps.addBatch();</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line">ps.executeBatch();</span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line">ps.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="comment">//20000条：625                                                                         //1000000条:14733  </span></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-4-实现层次四"><a href="#5-2-4-实现层次四" class="headerlink" title="5.2.4 实现层次四"></a>5.2.4 实现层次四</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 层次四：在层次三的基础上操作</span></span><br><span class="line"><span class="comment">* 使用Connection 的 setAutoCommit(false)  /  commit()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.设置为不自动提交数据</span></span><br><span class="line">conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into goods(name)values(?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">1000000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;name_&quot;</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.“攒”sql</span></span><br><span class="line">ps.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line">ps.executeBatch();</span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line">ps.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="comment">//1000000条:4978 </span></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第6章：-数据库事务"><a href="#第6章：-数据库事务" class="headerlink" title="第6章： 数据库事务"></a>第6章： 数据库事务</h1><h2 id="6-1-数据库事务介绍"><a href="#6-1-数据库事务介绍" class="headerlink" title="6.1 数据库事务介绍"></a>6.1 数据库事务介绍</h2><ul><li><p><strong>事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。</strong></p></li><li><p><strong>事务处理（事务操作）：</strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都**被提交(commit)<strong>，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务</strong>回滚(rollback)**到最初状态。</p></li><li><p>为确保数据库中数据的<strong>一致性</strong>，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。</p></li></ul><h2 id="6-2-JDBC事务处理"><a href="#6-2-JDBC事务处理" class="headerlink" title="6.2 JDBC事务处理"></a>6.2 JDBC事务处理</h2><ul><li><p>数据一旦提交，就不可回滚。</p></li><li><p>数据什么时候意味着提交？</p><ul><li><strong>当一个连接对象被创建时，默认情况下是自动提交事务</strong>：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li><li><strong>关闭数据库连接，数据就会自动的提交。</strong>如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li></ul></li><li><p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p><ul><li>调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 <strong>commit();</strong> 方法提交事务</li><li>在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</li></ul><blockquote><p>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p></blockquote></li></ul><p>【案例：用户AA向用户BB转账100】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJDBCTransaction</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">// 2.开启事务</span></span><br><span class="line">conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 3.进行数据库操作</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update user_table set balance = balance - 100 where user = ?&quot;</span>;</span><br><span class="line">update(conn, sql1, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟网络异常</span></span><br><span class="line"><span class="comment">//System.out.println(10 / 0);</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update user_table set balance = balance + 100 where user = ?&quot;</span>;</span><br><span class="line">update(conn, sql2, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"><span class="comment">// 4.若没有异常，则提交事务</span></span><br><span class="line">conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">// 5.若有异常，则回滚事务</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//6.恢复每次DML操作的自动提交功能</span></span><br><span class="line">conn.setAutoCommit(<span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//7.关闭连接</span></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>, <span class="literal">null</span>); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，对数据库操作的方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用事务以后的通用的增删改操作（version 2.0）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Connection conn ,String sql, Object... args)</span> &#123;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 2.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 4.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(<span class="literal">null</span>, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-事务的ACID属性"><a href="#6-3-事务的ACID属性" class="headerlink" title="6.3 事务的ACID属性"></a>6.3 事务的ACID属性</h2><ol><li><p><strong>原子性（Atomicity）</strong><br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p><strong>一致性（Consistency）</strong><br>事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong><br>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><strong>持久性（Durability）</strong><br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol><h3 id="6-3-1-数据库的并发问题"><a href="#6-3-1-数据库的并发问题" class="headerlink" title="6.3.1 数据库的并发问题"></a>6.3.1 数据库的并发问题</h3><ul><li><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li><li><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</li><li><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li></ul></li><li><p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, <strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p></li></ul><h3 id="6-3-2-四种隔离级别"><a href="#6-3-2-四种隔离级别" class="headerlink" title="6.3.2 四种隔离级别"></a>6.3.2 四种隔离级别</h3><ul><li><p>数据库提供的4种事务隔离级别：</p><p><img src="/2022/04/04/JDBC/1555586275271.png" alt="1555586275271"></p></li><li><p>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: <strong>READ COMMITED</strong> 。</p></li><li><p>Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: <strong>REPEATABLE READ。</strong></p></li></ul><h3 id="6-3-3-在MySql中设置隔离级别"><a href="#6-3-3-在MySql中设置隔离级别" class="headerlink" title="6.3.3 在MySql中设置隔离级别"></a>6.3.3 在MySql中设置隔离级别</h3><ul><li><p>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。</p></li><li><p>查看当前的隔离级别: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@tx_isolation;</span><br></pre></td></tr></table></figure></li><li><p>设置当前 mySQL 连接的隔离级别:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set  transaction isolation level read committed;</span><br></pre></td></tr></table></figure></li><li><p>设置数据库系统的全局的隔离级别:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global transaction isolation level read committed;</span><br></pre></td></tr></table></figure></li><li><p>补充操作：</p><ul><li><p>创建mysql数据库用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user tom identified by &#x27;abc123&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>授予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#授予通过网络方式登录的tom用户，对所有库所有表的全部权限，密码设为abc123.</span><br><span class="line">grant all privileges on *.* to tom@&#x27;%&#x27;  identified by &#x27;abc123&#x27;; </span><br><span class="line"></span><br><span class="line"> #给tom用户使用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。</span><br><span class="line">grant select,insert,delete,update on atguigudb.* to tom@localhost identified by &#x27;abc123&#x27;; </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="第7章：DAO及相关实现类"><a href="#第7章：DAO及相关实现类" class="headerlink" title="第7章：DAO及相关实现类"></a>第7章：DAO及相关实现类</h1><ul><li>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO</li><li>作用：为了实现功能的模块化，更有利于代码的维护和升级。</li><li>下面是尚硅谷JavaWeb阶段书城项目中DAO使用的体现：</li></ul><p><img src="/2022/04/04/JDBC/1566726681515.png" alt="1566726681515"></p><ul><li>层次结构：</li></ul><p><img src="/2022/04/04/JDBC/1566745811244.png" alt="1566745811244"></p><h2 id="【BaseDAO-java】"><a href="#【BaseDAO-java】" class="headerlink" title="【BaseDAO.java】"></a>【BaseDAO.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个用来被继承的对数据库进行基本操作的Dao</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HanYanBing</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseDao</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"><span class="comment">// 定义一个变量来接收泛型的类型</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;T&gt; type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BaseDao</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 获取子类的类型</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass();</span><br><span class="line"><span class="comment">// 获取父类的类型</span></span><br><span class="line"><span class="comment">// getGenericSuperclass()用来获取当前类的父类的类型</span></span><br><span class="line"><span class="comment">// ParameterizedType表示的是带泛型的类型</span></span><br><span class="line"><span class="type">ParameterizedType</span> <span class="variable">parameterizedType</span> <span class="operator">=</span> (ParameterizedType) clazz.getGenericSuperclass();</span><br><span class="line"><span class="comment">// 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型</span></span><br><span class="line"><span class="comment">// 这个方法会返回一个Type的数组</span></span><br><span class="line">Type[] types = parameterizedType.getActualTypeArguments();</span><br><span class="line"><span class="comment">// 获取具体的泛型的类型·</span></span><br><span class="line"><span class="built_in">this</span>.type = (Class&lt;T&gt;) types[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的增删改操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Connection conn,String sql, Object... params)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">count = queryRunner.update(conn, sql, params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getBean</span><span class="params">(Connection conn,String sql, Object... params)</span> &#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">t = queryRunner.query(conn, sql, <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;T&gt;(type), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getBeanList</span><span class="params">(Connection conn,String sql, Object... params)</span> &#123;</span><br><span class="line">List&lt;T&gt; list = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">list = queryRunner.query(conn, sql, <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;T&gt;(type), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">(Connection conn,String sql, Object... params)</span> &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">count</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 调用queryRunner的query方法获取一个单一的值</span></span><br><span class="line">count = queryRunner.query(conn, sql, <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>&lt;&gt;(), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【BookDAO-java】"><a href="#【BookDAO-java】" class="headerlink" title="【BookDAO.java】"></a>【BookDAO.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Book;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中查询出所有的记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Book&gt; <span class="title function_">getBooks</span><span class="params">(Connection conn)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向数据库中插入一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">saveBook</span><span class="params">(Connection conn,Book book)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中根据图书的id删除一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBookById</span><span class="params">(Connection conn,String bookId)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据图书的id从数据库中查询出一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Book <span class="title function_">getBookById</span><span class="params">(Connection conn,String bookId)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据图书的id从数据库中更新一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateBook</span><span class="params">(Connection conn,Book book)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取带分页的图书信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Page&lt;Book&gt; <span class="title function_">getPageBooks</span><span class="params">(Connection conn,Page&lt;Book&gt; page)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取带分页和价格范围的图书信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Page&lt;Book&gt; <span class="title function_">getPageBooksByPrice</span><span class="params">(Connection conn,Page&lt;Book&gt; page, <span class="type">double</span> minPrice, <span class="type">double</span> maxPrice)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【UserDAO-java】"><a href="#【UserDAO-java】" class="headerlink" title="【UserDAO.java】"></a>【UserDAO.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据User对象中的用户名和密码从数据库中获取一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> User 数据库中有记录 null 数据库中无此记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">getUser</span><span class="params">(Connection conn,User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据User对象中的用户名从数据库中获取一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true 数据库中有记录 false 数据库中无此记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">checkUsername</span><span class="params">(Connection conn,User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向数据库中插入User对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(Connection conn,User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【BookDaoImpl-java】"><a href="#【BookDaoImpl-java】" class="headerlink" title="【BookDaoImpl.java】"></a>【BookDaoImpl.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Book;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Page;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BookDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&lt;Book&gt; <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getBooks</span><span class="params">(Connection conn)</span> &#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中得到一个List的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books&quot;</span>;</span><br><span class="line">beanList = getBeanList(conn,sql);</span><br><span class="line"><span class="keyword">return</span> beanList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveBook</span><span class="params">(Connection conn,Book book)</span> &#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(),book.getImgPath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBookById</span><span class="params">(Connection conn,String bookId)</span> &#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM books WHERE id = ?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用增删改的方法</span></span><br><span class="line">update(conn,sql, bookId);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getBookById</span><span class="params">(Connection conn,String bookId)</span> &#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books where id = ?&quot;</span>;</span><br><span class="line">book = getBean(conn,sql, bookId);</span><br><span class="line"><span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBook</span><span class="params">(Connection conn,Book book)</span> &#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update books set title = ? , author = ? , price = ? , sales = ? , stock = ? where id = ?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(), book.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title function_">getPageBooks</span><span class="params">(Connection conn,Page&lt;Book&gt; page)</span> &#123;</span><br><span class="line"><span class="comment">// 获取数据库中图书的总记录数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from books&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个单一值的方法</span></span><br><span class="line"><span class="type">long</span> <span class="variable">totalRecord</span> <span class="operator">=</span> (<span class="type">long</span>) getValue(conn,sql);</span><br><span class="line"><span class="comment">// 将总记录数设置都page对象中</span></span><br><span class="line">page.setTotalRecord((<span class="type">int</span>) totalRecord);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中的记录存放的List</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books limit ?,?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个集合的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = getBeanList(conn,sql2, (page.getPageNo() - <span class="number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line"><span class="comment">// 将这个List设置到page对象中</span></span><br><span class="line">page.setList(beanList);</span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title function_">getPageBooksByPrice</span><span class="params">(Connection conn,Page&lt;Book&gt; page, <span class="type">double</span> minPrice, <span class="type">double</span> maxPrice)</span> &#123;</span><br><span class="line"><span class="comment">// 获取数据库中图书的总记录数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from books where price between ? and ?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个单一值的方法</span></span><br><span class="line"><span class="type">long</span> <span class="variable">totalRecord</span> <span class="operator">=</span> (<span class="type">long</span>) getValue(conn,sql,minPrice,maxPrice);</span><br><span class="line"><span class="comment">// 将总记录数设置都page对象中</span></span><br><span class="line">page.setTotalRecord((<span class="type">int</span>) totalRecord);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中的记录存放的List</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? limit ?,?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个集合的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = getBeanList(conn,sql2, minPrice , maxPrice , (page.getPageNo() - <span class="number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line"><span class="comment">// 将这个List设置到page对象中</span></span><br><span class="line">page.setList(beanList);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【UserDaoImpl-java】"><a href="#【UserDaoImpl-java】" class="headerlink" title="【UserDaoImpl.java】"></a>【UserDaoImpl.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.User;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&lt;User&gt; <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(Connection conn,User user)</span> &#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line"><span class="type">User</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,username,password,email from users where username = ? and password = ?&quot;</span>;</span><br><span class="line">bean = getBean(conn,sql, user.getUsername(), user.getPassword());</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkUsername</span><span class="params">(Connection conn,User user)</span> &#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line"><span class="type">User</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,username,password,email from users where username = ?&quot;</span>;</span><br><span class="line">bean = getBean(conn,sql, user.getUsername());</span><br><span class="line"><span class="keyword">return</span> bean != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(Connection conn,User user)</span> &#123;</span><br><span class="line"><span class="comment">//写sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into users(username,password,email) values(?,?,?)&quot;</span>;</span><br><span class="line"><span class="comment">//调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, user.getUsername(),user.getPassword(),user.getEmail());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【Book-java】"><a href="#【Book-java】" class="headerlink" title="【Book.java】"></a>【Book.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图书类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String title; <span class="comment">// 书名</span></span><br><span class="line"><span class="keyword">private</span> String author; <span class="comment">// 作者</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> price; <span class="comment">// 价格</span></span><br><span class="line"><span class="keyword">private</span> Integer sales; <span class="comment">// 销量</span></span><br><span class="line"><span class="keyword">private</span> Integer stock; <span class="comment">// 库存</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">imgPath</span> <span class="operator">=</span> <span class="string">&quot;static/img/default.jpg&quot;</span>; <span class="comment">// 封面图片的路径</span></span><br><span class="line"><span class="comment">//构造器，get()，set()，toString()方法略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【Page-java】"><a href="#【Page-java】" class="headerlink" title="【Page.java】"></a>【Page.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页码类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Page</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;T&gt; list; <span class="comment">// 每页查到的记录存放的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PAGE_SIZE</span> <span class="operator">=</span> <span class="number">4</span>; <span class="comment">// 每页显示的记录数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pageNo; <span class="comment">// 当前页</span></span><br><span class="line"><span class="comment">//private int totalPageNo; // 总页数，通过计算得到</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> totalRecord; <span class="comment">// 总记录数，通过查询数据库得到</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="【User-java】"><a href="#【User-java】" class="headerlink" title="【User.java】"></a>【User.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第8章：数据库连接池"><a href="#第8章：数据库连接池" class="headerlink" title="第8章：数据库连接池"></a>第8章：数据库连接池</h1><h2 id="8-1-JDBC数据库连接池的必要性"><a href="#8-1-JDBC数据库连接池的必要性" class="headerlink" title="8.1 JDBC数据库连接池的必要性"></a>8.1 JDBC数据库连接池的必要性</h2><ul><li><p>在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：　　</p><ul><li><strong>在主程序（如servlet、beans）中建立数据库连接</strong></li><li><strong>进行sql操作</strong></li><li><strong>断开数据库连接</strong></li></ul></li><li><p>这种模式开发，存在的问题:</p><ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用。</strong>若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li><strong>对于每一次数据库连接，使用完后都得断开。</strong>否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？）</li><li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。</li></ul></li></ul><h2 id="8-2-数据库连接池技术"><a href="#8-2-数据库连接池技术" class="headerlink" title="8.2 数据库连接池技术"></a>8.2 数据库连接池技术</h2><ul><li><p>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。</p></li><li><p><strong>数据库连接池的基本思想</strong>：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p></li></ul><p><img src="/2022/04/04/JDBC/1555593464033.png" alt="1555593464033"></p><ul><li><strong>工作原理：</strong></li></ul><p><img src="/2022/04/04/JDBC/1555593598606.png" alt="1555593598606"></p><ul><li><p><strong>数据库连接池技术的优点</strong></p><p><strong>1. 资源重用</strong></p><p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p><p><strong>2. 更快的系统反应速度</strong></p><p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p><p><strong>3. 新的资源分配手段</strong></p><p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p><p><strong>4. 统一的连接管理，避免数据库连接泄漏</strong></p><p>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</p></li></ul><h2 id="8-3-多种开源的数据库连接池"><a href="#8-3-多种开源的数据库连接池" class="headerlink" title="8.3 多种开源的数据库连接池"></a>8.3 多种开源的数据库连接池</h2><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以。</strong>hibernate官方推荐使用</li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li><li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li><li>特别注意：<ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul><h3 id="8-3-1-C3P0数据库连接池"><a href="#8-3-1-C3P0数据库连接池" class="headerlink" title="8.3.1 C3P0数据库连接池"></a>8.3.1 C3P0数据库连接池</h3><ul><li>获取连接方式一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">ComboPooledDataSource</span> <span class="variable">cpds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">cpds.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); </span><br><span class="line">cpds.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">cpds.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">cpds.setPassword(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//cpds.setMaxPoolSize(100);</span></span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取连接方式二</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">DataSource</span> <span class="variable">cpds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;helloc3p0&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，src下的配置文件为：【c3p0-config.xml】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;helloc3p0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取连接的4个基本信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>abc123<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql:///test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3-2-DBCP数据库连接池"><a href="#8-3-2-DBCP数据库连接池" class="headerlink" title="8.3.2 DBCP数据库连接池"></a>8.3.2 DBCP数据库连接池</h3><ul><li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：<ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul></li><li><strong>Tomcat 的连接池正是采用该连接池来实现的。</strong>该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li><li>配置属性说明</li></ul><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table><ul><li>获取连接方式一：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">BasicDataSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDataSource</span>();</span><br><span class="line"></span><br><span class="line">source.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">source.setUrl(<span class="string">&quot;jdbc:mysql:///test&quot;</span>);</span><br><span class="line">source.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">source.setPassword(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">source.setInitialSize(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> source.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取连接方式二：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用dbcp数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">DataSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> DBCPTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcp.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">pros.load(is);</span><br><span class="line"><span class="comment">//根据提供的BasicDataSourceFactory创建对应的DataSource对象</span></span><br><span class="line">source = BasicDataSourceFactory.createDataSource(pros);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> source.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，src下的配置文件为：【dbcp.properties】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&amp;useServerPrepStmts=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">abc123</span></span><br><span class="line"></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#...</span></span><br></pre></td></tr></table></figure><h3 id="8-3-3-Druid（德鲁伊）数据库连接池"><a href="#8-3-3-Druid（德鲁伊）数据库连接池" class="headerlink" title="8.3.3 Druid（德鲁伊）数据库连接池"></a>8.3.3 Druid（德鲁伊）数据库连接池</h3><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDruid</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>(); pro.load(TestDruid.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，src下的配置文件为：【druid.properties】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test?rewriteBatchedStatements=true</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line">maxActive=<span class="number">20</span></span><br><span class="line">maxWait=<span class="number">1000</span></span><br><span class="line">filters=wall</span><br></pre></td></tr></table></figure><ul><li>详细配置参数：</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql:&#x2F;&#x2F;10.20.153.104:3306&#x2F;druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h1 id="第9章：Apache-DBUtils实现CRUD操作"><a href="#第9章：Apache-DBUtils实现CRUD操作" class="headerlink" title="第9章：Apache-DBUtils实现CRUD操作"></a>第9章：Apache-DBUtils实现CRUD操作</h1><h2 id="9-1-Apache-DBUtils简介"><a href="#9-1-Apache-DBUtils简介" class="headerlink" title="9.1 Apache-DBUtils简介"></a>9.1 Apache-DBUtils简介</h2><ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p></li><li><p>API介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>工具类：org.apache.commons.dbutils.DbUtils</li></ul></li><li><p>API包说明：</p></li></ul><p><img src="/2022/04/04/JDBC/1555595163263.png" alt="1555595163263"></p><p><img src="/2022/04/04/JDBC/1555595198644.png" alt="1555595198644"></p><h2 id="9-2-主要API的使用"><a href="#9-2-主要API的使用" class="headerlink" title="9.2 主要API的使用"></a>9.2 主要API的使用</h2><h3 id="9-2-1-DbUtils"><a href="#9-2-1-DbUtils" class="headerlink" title="9.2.1 DbUtils"></a>9.2.1 DbUtils</h3><ul><li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 </li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul></li></ul><h3 id="9-2-2-QueryRunner类"><a href="#9-2-2-QueryRunner类" class="headerlink" title="9.2.2 QueryRunner类"></a>9.2.2 QueryRunner类</h3><ul><li><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p></li><li><p>QueryRunner类提供了两个构造器：</p><ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li><p>QueryRunner类的主要方法：</p><ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li><li>……</li></ul></li><li><strong>插入</strong><ul><li>public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</T></T></li><li>….</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object[][] params)throws SQLException：只支持INSERT语句</T></T></li><li>…..</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li><li>……</li></ul></li></ul></li><li><p>测试</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试添加</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection3();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> runner.update(conn, sql, <span class="string">&quot;何成飞&quot;</span>, <span class="string">&quot;he@qq.com&quot;</span>, <span class="string">&quot;1992-09-08&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;添加了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection3();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from customers where id &lt; ?&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> runner.update(conn, sql,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;删除了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-3-ResultSetHandler接口及实现类"><a href="#9-2-3-ResultSetHandler接口及实现类" class="headerlink" title="9.2.3 ResultSetHandler接口及实现类"></a>9.2.3 ResultSetHandler接口及实现类</h3><ul><li><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p></li><li><p>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p></li><li><p>接口的主要实现类：</p><ul><li><p>ArrayHandler：把结果集中的第一行数据转成对象数组。</p></li><li><p>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</p></li><li><p><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</p></li><li><p><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</p></li><li><p>ColumnListHandler：将结果集中某一列的数据存放到List中。</p></li><li><p>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</p></li><li><p><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</p></li><li><p><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</p></li><li><p><strong>ScalarHandler：</strong>查询单个值对象</p></li></ul></li><li><p>测试</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanHandler&lt;Customer&gt; handler = <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;&gt;(Customer.class);</span><br><span class="line"><span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">System.out.println(customer);</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询多条记录构成的集合</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanListHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryList</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanListHandler&lt;Customer&gt; handler = <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;&gt;(Customer.class);</span><br><span class="line">List&lt;Customer&gt; list = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义ResultSetHandler的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryInstance1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">ResultSetHandler&lt;Customer&gt; handler = <span class="keyword">new</span> <span class="title class_">ResultSetHandler</span>&lt;Customer&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Customer <span class="title function_">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;handle&quot;</span>);</span><br><span class="line"><span class="comment">//return new Customer(1,&quot;Tom&quot;,&quot;tom@126.com&quot;,new Date(123323432L));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">birth</span> <span class="operator">=</span> rs.getDate(<span class="string">&quot;birth&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(id, name, email, birth);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(customer);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如何查询类似于最大的，最小的，平均的，总和，个数相关的数据，</span></span><br><span class="line"><span class="comment"> * 使用ScalarHandler</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryValue</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试一：</span></span><br><span class="line"><span class="comment">//String sql = &quot;select count(*) from customers where id &lt; ?&quot;;</span></span><br><span class="line"><span class="comment">//ScalarHandler handler = new ScalarHandler();</span></span><br><span class="line"><span class="comment">//long count = (long) runner.query(conn, sql, handler, 20);</span></span><br><span class="line"><span class="comment">//System.out.println(count);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试二：</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select max(birth) from customers&quot;</span>;</span><br><span class="line"><span class="type">ScalarHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>();</span><br><span class="line"><span class="type">Date</span> <span class="variable">birth</span> <span class="operator">=</span> (Date) runner.query(conn, sql, handler);</span><br><span class="line">System.out.println(birth);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JDBC总结"><a href="#JDBC总结" class="headerlink" title="JDBC总结"></a>JDBC总结</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">总结</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateWithTx</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取连接的操作（</span></span><br><span class="line"><span class="comment">//① 手写的连接：JDBCUtils.getConnection();</span></span><br><span class="line"><span class="comment">//② 使用数据库连接池：C3P0;DBCP;Druid</span></span><br><span class="line"><span class="comment">//2.对数据表进行一系列CRUD操作</span></span><br><span class="line"><span class="comment">//① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \ version 2.0)</span></span><br><span class="line"><span class="comment">//version2.0的增删改public void update(Connection conn,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line"><span class="comment">//version2.0的查询 public &lt;T&gt; T getInstance(Connection conn,Class&lt;T&gt; clazz,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line"><span class="comment">//② 使用dbutils提供的jar包中提供的QueryRunner类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//回滚数据</span></span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//3.关闭连接等操作</span></span><br><span class="line"><span class="comment">//① JDBCUtils.closeResource();</span></span><br><span class="line"><span class="comment">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven自动化构建工具</title>
      <link href="/2022/04/04/Maven%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/04/04/Maven%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-Maven简介"><a href="#第一章-Maven简介" class="headerlink" title="第一章 Maven简介"></a>第一章 Maven简介</h1><h2 id="1-1-软件开发中的阶段"><a href="#1-1-软件开发中的阶段" class="headerlink" title="1.1 软件开发中的阶段"></a>1.1 软件开发中的阶段</h2><p>需要分析： 分析项目具体完成的功能，有什么要求， 具体怎么实现。</p><p>设计阶段：根据分析的结果， 设计项目的使用什么技术， 解决难点。</p><span id="more"></span><p>开发阶段：编码实现功能。 编译代码。自我测试</p><p>测试阶段：专业的测试人员，测整个项目的功能十分符合设计要求。出一个测试报告。</p><p>项目的打包，发布阶段： 给用户安装项目</p><h2 id="1-2-Maven能做什么"><a href="#1-2-Maven能做什么" class="headerlink" title="1.2 Maven能做什么"></a>1.2 Maven能做什么</h2><p>1）项目的自动构建，帮助开发人员做项目代码的编译，测试， 打包，安装，部署等工作。</p><p>2）管理依赖（管理项目中使用的各种jar包）。</p><p>​      依赖：项目中需要使用的其他资源，  常见的是jar 。 比如项目要使用mysql驱动。我们就说项目依赖mysql驱动。</p><h2 id="1-3-没有使用maven怎么管理依赖"><a href="#1-3-没有使用maven怎么管理依赖" class="headerlink" title="1.3 没有使用maven怎么管理依赖"></a>1.3 没有使用maven怎么管理依赖</h2><p>管理jar ，需要从网络中单独下载某个jar </p><p>需要选择正确版本</p><p>手工处理jar文件之间的依赖。 a.jar里面要使用b.jar的类。</p><h2 id="1-4-什么是maven"><a href="#1-4-什么是maven" class="headerlink" title="1.4 什么是maven"></a>1.4 什么是maven</h2><p>maven是apache基金会的开源项目，使用java语法开发。 Maven 这个单词的本意是：专家，内行。读音是[‘meɪv(ə)n]  或  [‘mevn]。</p><p>maven是项目的自动化构建工具。 管理项目的依赖。</p><h2 id="1-5-maven中的概念"><a href="#1-5-maven中的概念" class="headerlink" title="1.5 maven中的概念"></a>1.5 maven中的概念</h2><p>①POM<br>②约定的目录结构<br>③坐标<br>④依赖管理<br>⑤仓库管理<br>⑥生命周期<br>⑦插件和目标<br>⑧继承<br>⑨聚合</p><h2 id="1-6-maven工具的获取和安装"><a href="#1-6-maven工具的获取和安装" class="headerlink" title="1.6 maven工具的获取和安装"></a>1.6 maven工具的获取和安装</h2><p>地址： <a href="http://maven.apache.org/">http://maven.apache.org/</a>  从中下载  .zip文件。 使用的 apache-maven-3.3.9-bin.zip</p><p>安装：</p><ol><li><p>确定JAVA_HOME 指定jdk的安装目录， 如果没有JAVA_HOME， 需要在windows的环境变量中创建JAVA_HOME, 它的值是jdk的安装目录</p></li><li><p>解压缩  apache-maven-3.3.9-bin.zip ，把解压后的文件放到一个目录中。 </p><p>目录的路径不要有中文， 不要有空格。</p></li><li><p>把maven安装目录中下的bin的路径添加到path中</p></li><li><p>测试maven的安装。 在命令行执行 mvn     -v</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\NING MEI&gt;mvn -v</span><br><span class="line">Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:47+08:00)</span><br><span class="line">Maven home: D:\tools\apache-maven-3.3.9\bin\..</span><br><span class="line">Java version: 1.8.0_101, vendor: Oracle Corporation</span><br><span class="line">Java home: C:\Program Files\Java\jdk1.8.0_101\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;dos&quot;</span><br></pre></td></tr></table></figure></li></ol><p>maven解压后的目录结构</p><p><img src="/2022/04/04/Maven%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/image-20201015162301261.png" alt="image-20201015162301261"></p><p>maven的其他安装方式：</p><ol><li><p>确定JAVA_HOME是否有效</p></li><li><p>在环境变量中，创建一个叫做M2_HOME (或者MAVEN_HOME) ，它的值是maven的安装目录</p><p>M2_HOME&#x3D;D:\tools\apache-maven-3.3.9</p></li><li><p>在path环境变量中，加入 %M2_HOME%\bin    </p></li><li><p>测试maven的安装，在命令行执行 mvn  -v</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\NING MEI&gt;mvn -v</span><br><span class="line">Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:47+08:00)</span><br><span class="line">Maven home: D:\tools\apache-maven-3.3.9\bin\..</span><br><span class="line">Java version: 1.8.0_101, vendor: Oracle Corporation</span><br><span class="line">Java home: C:\Program Files\Java\jdk1.8.0_101\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;dos&quot;</span><br></pre></td></tr></table></figure></li></ol><h1 id="第二章Maven的核心概念"><a href="#第二章Maven的核心概念" class="headerlink" title="第二章Maven的核心概念"></a>第二章Maven的核心概念</h1><h2 id="2-1-约定的目录结构"><a href="#2-1-约定的目录结构" class="headerlink" title="2.1 约定的目录结构"></a>2.1 约定的目录结构</h2><p>maven项目使用的大多人 遵循的目录结构。 叫做约定的目录结构。</p><p>一个maven项目是一个文件夹。 比如项目叫做Hello</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Hello 项目文件夹</span><br><span class="line">    \src</span><br><span class="line">    \main叫做主程序目录（完成项目功能的代码和配置文件）</span><br><span class="line">             \java          源代码（包和相关的类定义）</span><br><span class="line">     \resources    配置文件</span><br><span class="line">    \test               放置测试程序代码的（开发人员自己写的测试代码）</span><br><span class="line">     \java          测试代码的（junit）</span><br><span class="line">     \resources     测试程序需要的配置文件</span><br><span class="line">    \pom.xml                maven的配置文件， 核心文件</span><br></pre></td></tr></table></figure><p>maven的使用方式：</p><p>1）maven可以独立使用： 创建项目，编译代码，测试程序，打包，部署等等</p><p>2）maven和idea一起使用：通过idea借助maven，实现编码，测试，打包等等</p><h2 id="2-2-POM"><a href="#2-2-POM" class="headerlink" title="2.2 POM"></a>2.2 POM</h2><p>POM： Project Object Model 项目对象模型， maven把项目当做模型处理。 操作这个模型就是操作项目。</p><p>maven通过pom.xml文件实现 项目的构建和依赖的管理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- project是根标签， 后面的是约束文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- pom模型的版本， 就是4.0.0 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 坐标 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>maven由于他的约定大于配置,我们之后可以能遇到我们写的配置文件,无法被导岀或者生效的问题,解决方</p><h2 id="2-3-坐标"><a href="#2-3-坐标" class="headerlink" title="2.3 坐标"></a>2.3 坐标</h2><p>坐标组成是 groupid, artifiactId, version。  坐标概念来自数学。·</p><p>坐标作用：确定资源的，是资源的唯一标识。 在maven中，每个资源都是坐标。 坐标值是唯一的。简称叫gav</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">groupId: 组织名称，代码。 公司，团体或者单位的标识。 这个值常使用的公司域名的倒写。</span><br><span class="line">         例如：学校的网站 www.bjpowernode.com, groupId: com.bjpowernode</span><br><span class="line"></span><br><span class="line">         如果项目规模比较大， 也可以是 域名倒写+大项目名称。</span><br><span class="line">     例如： www.baidu.com ,  无人车： com.baidu.appollo</span><br><span class="line">artifactId:项目名称， 如果groupId中有项目， 此时当前的值就是子项目名。 项目名称是唯一的。</span><br><span class="line">version：版本， 项目的版本号， 使用的数字。 三位组成。 例如 主版本号.次版本号.小版本号， 例如： 5.2.5。</span><br><span class="line">         注意：版本号中有-SNAPSHOT， 表示快照，不是稳定的版本。      </span><br><span class="line">   </span><br><span class="line">packaging 项目打包的类型， 有jar ，war， ear， pom等等 默认是jar</span><br></pre></td></tr></table></figure><p>项目使用gav：</p><p>1.每个maven项目，都需要有一个自己的gav</p><p>2.管理依赖，需要使用其他的jar ，也需要使用gav作为标识。</p><p>搜索坐标的地址： <a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><h2 id="2-4-依赖-dependency"><a href="#2-4-依赖-dependency" class="headerlink" title="2.4 依赖 dependency"></a>2.4 依赖 dependency</h2><p>依赖：项目中要使用的其他资源（jar）。  </p><p>需要使用maven表示依赖，管理依赖。 通过使用dependency和gav一起完成依赖的使用</p><p>需要在pom.xml文件中，使用dependencies 和dependency， 还有gav 完成依赖的说明。</p><p>格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">maven使用gav作为标识，从互联网下载依赖的jar。 下载到你的本机上。  由maven管理项目使用的这些jar</span><br></pre></td></tr></table></figure><h2 id="2-5-仓库"><a href="#2-5-仓库" class="headerlink" title="2.5 仓库"></a>2.5 仓库</h2><p>仓库是存东西的，maven的仓库存放的是：</p><ol><li><p>maven工具自己的jar包。</p></li><li><p>第三方的其他jar， 比如项目中要使用mysql驱动。</p></li><li><p>自己写的程序，可以打包为jar 。 存放到仓库。</p></li></ol><p>仓库的分类：</p><ol><li><p>本地仓库（本机仓库）： 位于你自己的计算机， 它是磁盘中的某个目录。</p><p>本地仓库：默认路径，是你登录操作系统的账号的目录中&#x2F;.m2&#x2F;repository</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\NING MEI\.m2\repository</span><br></pre></td></tr></table></figure><p>修改本地仓库的位置：修改maven工具的配置文件（maven的安装路径\conf\setting.xml）</p><p>​    步骤：</p><p>​     1）创建一个目录，作为仓库使用。  目录不要有中文和空格。 目录不要太深。</p><p>​           例如： D:\openrepository</p><p>​     2）修改setting.xml文件，指定 D:\openrepository这个目录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/openrepository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    3) 把我给你提供的 仓库的资源 拷贝到 D:&#x2F;openrepository</p></li><li><p>远程仓库： 需要通过联网访问的</p><p>1）中央仓库： 一个ftp服务器， 存放了所有的资源。 </p><p>2）中央仓库的镜像： 就是中央仓库的拷贝。 在各大主要城市都有镜像。</p><p>3）私服：在局域网中使用的。 私服就是自己的仓库服务器。 在公司内部使用的。</p></li></ol><p>maven使用仓库： maven自动使用仓库， 当项目启动后， 执行了maven的命令， maven首先访问的是本地仓库， 从仓库中获取所需的jar， 如果本地仓库没有 ，需要访问私服或者中央仓库或者镜像。</p><p><img src="/2022/04/04/Maven%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/image-20201016114322189.png" alt="image-20201016114322189"></p><h2 id="2-6-maven的生命周期，插件和命令"><a href="#2-6-maven的生命周期，插件和命令" class="headerlink" title="2.6 maven的生命周期，插件和命令"></a>2.6 maven的生命周期，插件和命令</h2><p>maven的生命周期： 项目构建的各个阶段。 包括 清理， 编译， 测试，报告，打包，安装，部署</p><p>插件：要完成构建项目的各个阶段，要使用maven的命令， 执行命令的功能是通过插件完成的。插件就是jar，一些类。</p><p>命令： 执行maven功能是 由命令发出的。 比如 mvn compile</p><p>单元测试（junit）：</p><p>junit是一个单元测试的工具， 在java中经常使用。</p><p>单元：在java中指的是方法。  一个方法就是一个单元， 方法是测试的最小单位。</p><p>作用：使用junit去测试方法是否完成了要求。 开发人员自测。</p><p>使用单元测试：</p><p>1）加入junit的依赖（一些类和方法）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2)在src&#x2F;test&#x2F;java 目录中创建测试类文件。 写测试代码</p><p>   单元测试使用的建议：</p><p>​    1.测试类的定义， 名称一般是Test+要测试的类名称</p><p>​    2.测试类它的包名和要测试的类包名一样。</p><p>​    3.在类中定义方法，要测试代码。</p><p>​       方法的定义：public方法， </p><p>​                               没有返回值</p><p>​                               方法名称自定义（建议 Test+测试的方法名称）</p><p>​                               方法没有参数</p><p>   4.在测试类中的方法，可以单独执行。 测试类也可以单独执行</p><p>   5.在方法的上面加入@Test</p><p>命令：</p><p>1） mvn clean: 清理命令， 作用删除以前生成的数据， 删除target目录。</p><p>​      插件： maven-clean-plugin   ， 版本是 2.5</p><p>2）mvn compile:编译命令，执行的代码编译， 把src&#x2F;main&#x2F;java目录中的java代码编译为class文件。</p><p>​     同时把class文件拷贝到 target&#x2F;classes目录。 这个目录classes是存放类文件的根目录（也叫做类路径，classpath）</p><p>​    插件： maven-compiler-plugin 版本3.1。  编译代码的插件</p><p>​                maven-resources-plugin 版本2.6 。 资源插件， 处理文件的。 作用是把src&#x2F;main&#x2F;resources目录中的                </p><p>​                                                             文件拷贝target&#x2F;classes目录中。</p><p>3）mvn test-compile: 编译命令， 编译src&#x2F;test&#x2F;java目录中的源文件， 把生成的class拷贝到target&#x2F;test-classes目录。同时把src&#x2F;test&#x2F;resources目录中的文件拷贝到 test-clasess目录</p><p>​    插件： maven-compiler-plugin 版本3.1。  编译代码的插件</p><p>​                maven-resources-plugin 版本2.6 。 资源插件， 处理文件的</p><p>4）mvn test:测试命令， 作用执行 test-classes目录的程序， 测试src&#x2F;main&#x2F;java目录中的主程序代码是否符合要求。</p><p>​     插件： maven-surefire-plugin 版本 2.12.4</p><p>5）mvn package:打包，作用是把项目中的资源class文件和配置文件都放到一个压缩文件中， 默认压缩文件是jar类型的。 web应用是war类型， 扩展是jar，war的。</p><p>​    插件：maven-jar-plugin 版本 2.4。 执行打包处理。 生成一个jar扩展的文件， 放在target目录下.</p><p>​               打包的文件包含的是 src&#x2F;main目录中的所有的生成的class和配置文件和test无关。</p><p>​    生成的是 ch01-maven-1.0-SNAPSHOT.jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">打包的文件名： artifactId-version.packaging</span><br></pre></td></tr></table></figure><p>6）mvn install : 把生成的打包的文件 ，安装到maven仓库。</p><p>​     插件： maven-install-plugin 版本 2.4 。 把生成的jar文件安装到本地仓库。 </p><p>​    查看查看中的jar文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">groupId中的值， 如果有 &quot;.&quot; 前和后都是独立的文件夹。 com\bjpowernode</span><br><span class="line">artifactId, 独立的文件夹</span><br><span class="line">version，独立的文件夹</span><br></pre></td></tr></table></figure><h2 id="2-7-自定义配置插件"><a href="#2-7-自定义配置插件" class="headerlink" title="2.7 自定义配置插件"></a>2.7 自定义配置插件</h2><p>在pom.xml文件中， build标签中。设置插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置构建项目相关的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span> <span class="comment">&lt;!-- 指定编译代码的jdk版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span> <span class="comment">&lt;!-- 运行java程序使用的jdk版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span> </span><br></pre></td></tr></table></figure><h1 id="第三章-Maven和idea的集成"><a href="#第三章-Maven和idea的集成" class="headerlink" title="第三章 Maven和idea的集成"></a>第三章 Maven和idea的集成</h1><h2 id="3-1-idea中集成maven"><a href="#3-1-idea中集成maven" class="headerlink" title="3.1 idea中集成maven"></a>3.1 idea中集成maven</h2><p>idea中有一个自带的maven。  我们要让idea使用自己安装的maven。</p><ol><li>选择File- Settings</li></ol><p><img src="/2022/04/04/Maven%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/桌面\学习资料\自学\Maven\06-笔记\maven\images\image-20201016151034872.png" alt="image-20201016151034872"></p><p><img src="/2022/04/04/Maven%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/桌面\学习资料\自学\Maven\06-笔记\maven\images\image-20201016151528678.png" alt="image-20201016151528678"></p><p>设置项： -DarchetypeCatalog&#x3D;internal</p><p>2） File - Other Settings</p><p>同上的设置</p><h2 id="3-2-创建基于maven的普通java项目"><a href="#3-2-创建基于maven的普通java项目" class="headerlink" title="3.2 创建基于maven的普通java项目"></a>3.2 创建基于maven的普通java项目</h2><p><img src="/2022/04/04/Maven%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/桌面\学习资料\自学\Maven\06-笔记\maven\images\image-20201016161028977.png" alt="image-20201016161028977"></p><h2 id="3-3-创建web项目"><a href="#3-3-创建web项目" class="headerlink" title="3.3 创建web项目"></a>3.3 创建web项目</h2><p><img src="/2022/04/04/Maven%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/image-20201016170153694.png" alt="image-20201016170153694"></p><h2 id="3-4-导入module到idea"><a href="#3-4-导入module到idea" class="headerlink" title="3.4 导入module到idea"></a>3.4 导入module到idea</h2><p><img src="/2022/04/04/Maven%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/image-20201017085816226.png" alt="image-20201017085816226"></p><h1 id="第四章-依赖管理"><a href="#第四章-依赖管理" class="headerlink" title="第四章 依赖管理"></a>第四章 依赖管理</h1><p>依赖范围：使用scope表示依赖的范围。 </p><p>依赖范围表示： 这个依赖（jar和里面类）在项目构建的那个阶段起作用。</p><p>依赖范围scope ：</p><p>​     compile:默认， 参与构建项目的所有阶段</p><p>​     test：测试，在测试阶段使用， 比如执行mvn test会使用junit 。</p><p>​    provided: 提供者。 项目在部署到服务器时，不需要提供这个依赖的jar ， 而是由服务器这个依赖的jar包</p><p>​                      明显的是servlet 和jsp 依赖</p><h1 id="第五章-常用设置"><a href="#第五章-常用设置" class="headerlink" title="第五章 常用设置"></a>第五章 常用设置</h1><p>1)讲的是properties它里面的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span> 源码编译 jdk 版本</span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span> 运行代码的 jdk 版本</span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span> 项目</span><br><span class="line">构建使用的编码，避免中文乱码</span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8</span><br><span class="line"><span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span> 生成报告的编码</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>全局变量</li></ol><p>在properties定义标签，这个标签就是一个变量， 标签的文本就是变量的值。 </p><p>使用全局变量表示 多个依赖使用的版本号。</p><p>使用步骤：</p><p>1.在properties标签中，定义一个标签，指定版本的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--自定义变量--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用全局变量， 语法 ${变量名}</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）使用资源插件</p><p>处理的配置文件的信息， maven默认处理配置文件</p><p>①：maven会把src&#x2F;main&#x2F;resources目录中的文件， 拷贝到target&#x2F;classes目录下</p><p>②：maven只处理src&#x2F;main&#x2F;java目录中的 .java文件，把这些java文件编译为class，拷贝到 target&#x2F;classes目录中。 不处理其他文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--资源插件</span></span><br><span class="line"><span class="comment">      告诉maven把 src/main/java目录中的 指定扩展名的文件 拷贝到 target/classes目录中。</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  filtering 选项 false 不启用过滤器， *.property 已经起到过</span></span><br><span class="line"><span class="comment">        滤的作用了 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2022/04/04/Docker/"/>
      <url>/2022/04/04/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1 Docker简介"></a>1 Docker简介</h1><p><img src="/2022/04/04/Docker/image-20220210153017503.png" alt="image-20220210153017503"></p><h2 id="1-1-Docker为什么出现"><a href="#1-1-Docker为什么出现" class="headerlink" title="1.1 Docker为什么出现"></a>1.1 Docker为什么出现</h2><p>其他开发人员身处的环境配置也各有不同。您正在开发的应用依赖于您当前的配置且还要依赖于某些配置文件。此外，您的企业还拥有标准化的测试和生产环境，且具有自身的配置和一系列支持文件。您希望尽可能多在本地模拟这些环境而不产生重新创建服务器环境的开销。<span id="more"></span>请问？您要如何确保应用能够在这些环境中运行和通过质量检测？并且在部署过程中不出现令人头疼的版本、配置问题，也无需重新编写代码和进行故障修复？</p><p>答案就是使用容器。Docker之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案—–<strong>系统平滑移植，容器虚拟化技术</strong>。</p><p>环境配置相当麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，<strong>软件可以带环境安装</strong>？也就是说，安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。</p><p><img src="/2022/04/04/Docker/image-20220210165151254.png" alt="image-20220210165151254"><img src="/2022/04/04/Docker/image-20220210165321952.png" alt="image-20220210165321952"></p><p>之前在服务器配置一个应用的运行环境，要安装各种软件，就拿尚硅谷电商项目的环境来说，Java&#x2F;RabbitMQ&#x2F;MySQL&#x2F;JDBC驱动包等。安装和配置这些东西有多麻烦就不说了，它还不能跨平台。假如我们是在 Windows 上安装的这些环境，到了 Linux 又得重新装。况且就算不跨操作系统，换另一台同样操作系统的服务器，要移植应用也是非常麻烦的。</p><p>传统上认为，软件编码开发&#x2F;测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等(java为例)。而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。<strong>Docker的出现使得Docker得以打破过去「程序即应用」的观念。透过镜像(images)将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作。</strong></p><h2 id="1-2-Docker理念"><a href="#1-2-Docker理念" class="headerlink" title="1.2 Docker理念"></a>1.2 Docker理念</h2><p>Docker是基于<strong>Go语言</strong>实现的云开源项目。<br>Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到<strong>“一次镜像，处处运行”</strong>。</p><p><img src="/2022/04/04/Docker/image-20220210170058386.png" alt="image-20220210170058386"></p><p>Linux容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用打成镜像，通过镜像成为运行在Docker容器上面的实例，而 Docker容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。<strong>只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</strong></p><p> <strong>总结</strong></p><p>解决了运行环境和配置问题的软件容器，<br>方便做持续集成并有助于整体发布的<strong>容器虚拟化技术</strong>。</p><h2 id="1-3-容器与虚拟机比较"><a href="#1-3-容器与虚拟机比较" class="headerlink" title="1.3 容器与虚拟机比较"></a>1.3 容器与虚拟机比较</h2><h3 id="1-3-1-容器发展史"><a href="#1-3-1-容器发展史" class="headerlink" title="1.3.1 容器发展史"></a>1.3.1 容器发展史</h3><p><img src="/2022/04/04/Docker/image-20220210171155384.png" alt="image-20220210171155384"></p><p><img src="/2022/04/04/Docker/image-20220210171208091.png" alt="image-20220210171208091"></p><h3 id="1-3-2-传统虚拟机技术"><a href="#1-3-2-传统虚拟机技术" class="headerlink" title="1.3.2 传统虚拟机技术"></a>1.3.2 传统虚拟机技术</h3><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。<br>它可以在一种操作系统里面运行另一种操作系统，比如在Windows10系统里面运行Linux系统CentOS7。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使应用程序，操作系统和硬件三者之间的逻辑不变。  </p><p><img src="/2022/04/04/Docker/image-20220210171555757.png" alt="image-20220210171555757"></p><h3 id="1-3-3-容器虚拟化技术"><a href="#1-3-3-容器虚拟化技术" class="headerlink" title="1.3.3 容器虚拟化技术"></a>1.3.3 容器虚拟化技术</h3><p>由于前面虚拟机存在某些缺点，Linux发展出了另一种虚拟化技术：<strong>Linux容器(Linux Containers，缩写为 LXC)</strong></p><p>Linux容器是<strong>与系统其他部分隔离开</strong>的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。</p><p>Linux 容器不是模拟一个完整的操作系统而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。<strong>容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。</strong>系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p><p>   <img src="/2022/04/04/Docker/image-20220212013150890.png" alt="image-20220212013150890"></p><p>传统虚拟机：在硬件层面进行虚拟化</p><p>Docker：在操作系统层面实现虚拟化 </p><h3 id="1-3-4-对比"><a href="#1-3-4-对比" class="headerlink" title="1.3.4 对比"></a>1.3.4 对比</h3><p>比较了 Docker 和传统虚拟化方式的不同之处：</p><ul><li>传统虚拟机技术是<strong>虚拟出一套硬件</strong>后，<strong>在其上运行一个完整操作系统</strong>，在该系统上再运行所需应用进程；</li><li>容器内的应用进程<strong>直接运行于宿主的内核</strong>，容器内没有自己的内核且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</li><li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</li></ul><h2 id="1-4-Docker的影响"><a href="#1-4-Docker的影响" class="headerlink" title="1.4 Docker的影响"></a>1.4 Docker的影响</h2><p>技术职位级别变化</p><p><img src="/2022/04/04/Docker/image-20220219021003414.png" alt="image-20220219021003414"></p><p><img src="/2022/04/04/Docker/image-20220219021309559.png" alt="image-20220219021309559"></p><p>应用环境</p><p><img src="/2022/04/04/Docker/image-20220219021509282.png" alt="image-20220219021509282"></p><h2 id="1-5-官网"><a href="#1-5-官网" class="headerlink" title="1.5 官网"></a>1.5 官网</h2><p><a href="http://www.docker.com/">http://www.docker.com</a></p><p>Docker镜像仓库 <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h1 id="2-Docker安装"><a href="#2-Docker安装" class="headerlink" title="2 Docker安装"></a>2 Docker安装</h1><h2 id="2-1-系统前提"><a href="#2-1-系统前提" class="headerlink" title="2.1 系统前提"></a>2.1 系统前提</h2><p><img src="/2022/04/04/Docker/image-20220219022842965.png" alt="image-20220219022842965"><br>目前，CentOS 仅发行版本中的内核支持 Docker。Docker 运行在CentOS 7 (64-bit)上，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[tintin@hadoop102 ~]$ <span class="built_in">cat</span> /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.5.1804 (Core) </span><br><span class="line">[tintin@hadoop102 ~]$ <span class="built_in">uname</span> -r</span><br><span class="line">3.10.0-862.el7.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2-Docker三要素"><a href="#2-2-Docker三要素" class="headerlink" title="2.2 Docker三要素"></a>2.2 Docker三要素</h2><h3 id="2-2-1-镜像"><a href="#2-2-1-镜像" class="headerlink" title="2.2.1 镜像"></a>2.2.1 镜像</h3><p>Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker <strong>容器</strong>，一个镜像可以创建很多容器。</p><p>它也相当于是一个<strong>root文件系统</strong>。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统。<br>相当于容器的“源代码”，docker镜像文件类似于Java的类模板，而docker容器实例类似于java中new出来的实例对象。</p><h3 id="2-2-2-容器"><a href="#2-2-2-容器" class="headerlink" title="2.2.2 容器"></a>2.2.2 容器</h3><ul><li><p>从面向对象角度</p><p>Docker 利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，<strong>容器就类似于一个虚拟化的运行环境</strong>，容器是用镜像创建的运行实例。就像是Java中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台</p></li><li><p>从镜像容器角度<br>可以把容器看做是一个<strong>简易版的 Linux 环境</strong>（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p></li></ul><h3 id="2-2-3-仓库"><a href="#2-2-3-仓库" class="headerlink" title="2.2.3 仓库"></a>2.2.3 仓库</h3><p>仓库（Repository）是集中存放镜像文件的场所。</p><p>类似于<br><strong>Maven仓库，存放各种jar包的地方；</strong><br><strong>github仓库，存放各种git项目的地方；</strong></p><p>Docker公司提供的官方registry被称为Docker Hub，存放各种镜像模板的地方。</p><p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。<br>最大的公开仓库是 Docker Hub(<a href="https://hub.docker.com/)%EF%BC%8C">https://hub.docker.com/)，</a><br>存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等</p><h3 id="2-2-4-总结"><a href="#2-2-4-总结" class="headerlink" title="2.2.4 总结"></a>2.2.4 总结</h3><p>Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。</p><h2 id="2-3-Docker平台架构图解"><a href="#2-3-Docker平台架构图解" class="headerlink" title="2.3 Docker平台架构图解"></a>2.3 Docker平台架构图解</h2><p><img src="/2022/04/04/Docker/image-20220219025941146.png" alt="image-20220219025941146"></p><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。可以对比mysql演示对比讲解</p><p><img src="/2022/04/04/Docker/image-20220219133611254.png" alt="image-20220219133611254"></p><h2 id="2-4-Docker在CentOS7上安装"><a href="#2-4-Docker在CentOS7上安装" class="headerlink" title="2.4 Docker在CentOS7上安装"></a>2.4 Docker在CentOS7上安装</h2><p><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Documentation</a></p><p>卸载旧版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>安装gcc相关</p><p>安装yum-utils</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><p>设置稳定的仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[tintin@hadoop102 ~]$ sudo yum-config-manager --add-repo   http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">已加载插件：fastestmirror, langpacks</span><br><span class="line">adding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">grabbing file http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">repo saved to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更新yum软件包索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[tintin@hadoop102 ~]$ yum makecache fast</span><br></pre></td></tr></table></figure><p>安装Docker ce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[tintin@hadoop102 ~]$ yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>启动Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>测试</p><p><img src="/2022/04/04/Docker/image-20220219141539811.png" alt="image-20220219141539811"></p><p><img src="/2022/04/04/Docker/image-20220219141552716.png" alt="image-20220219141552716"></p><p>关闭docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker </span><br></pre></td></tr></table></figure><p>卸载docker</p><p><img src="/2022/04/04/Docker/image-20220219141657239.png" alt="image-20220219141657239"></p><p>阿里云镜像加速</p><p><img src="/2022/04/04/Docker/image-20220219142622142.png" alt="image-20220219142622142"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://1lsxn6mi.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>测试运行将会被加速</p><p>docker run命令的作用</p><p><img src="/2022/04/04/Docker/image-20220219142850362.png" alt="image-20220219142850362"></p><h2 id="2-5-为什么docker比vm虚拟机快"><a href="#2-5-为什么docker比vm虚拟机快" class="headerlink" title="2.5 为什么docker比vm虚拟机快"></a>2.5 为什么docker比vm虚拟机快</h2><p>[与vm虚拟机对比](#1.3.4 对比)</p><ul><li>docker不需要Hypervisor(虚拟机)实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。</li><li>docker利用的是宿主机的内核,而不需要加载操作系统OS内核</li></ul><p><img src="/2022/04/04/Docker/image-20220219143251678.png" alt="image-20220219143251678"></p><h1 id="3-Docker常用命令"><a href="#3-Docker常用命令" class="headerlink" title="3 Docker常用命令"></a>3 Docker常用命令</h1><h2 id="3-1-帮助启动类命令"><a href="#3-1-帮助启动类命令" class="headerlink" title="3.1 帮助启动类命令"></a>3.1 帮助启动类命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">启动docker： systemctl start docker</span><br><span class="line">开机自启docker：systemctl <span class="built_in">enable</span> docker</span><br><span class="line">停止docker： systemctl stop docker</span><br><span class="line">重启docker： systemctl restart docker</span><br><span class="line">查看docker状态： systemctl status docker</span><br><span class="line">查看docker概要信息： docker info</span><br><span class="line">查看docker总体帮助文档： docker --<span class="built_in">help</span></span><br><span class="line">查看docker命令帮助文档： docker 具体命令 --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h2 id="3-2-镜像命令"><a href="#3-2-镜像命令" class="headerlink" title="3.2 镜像命令"></a>3.2 镜像命令</h2><p>docker images 列出本地主机上的镜像</p><p><img src="/2022/04/04/Docker/image-20220219232941925.png" alt="image-20220219232941925"></p><p>docker search 某个XXX镜像名字 </p><p><img src="/2022/04/04/Docker/image-20220219233030035.png" alt="image-20220219233030035"></p><p>docker pull 某个XXX镜像名字 下载镜像</p><p><img src="/2022/04/04/Docker/image-20220219233606446.png" alt="image-20220219233606446"></p><p><img src="/2022/04/04/Docker/image-20220219233754676.png" alt="image-20220219233754676"></p><p>docker system df 查看镜像&#x2F;容器&#x2F;数据卷所占的空间</p><p><img src="/2022/04/04/Docker/image-20220219234010987.png" alt="image-20220219234010987"></p><p>docker rmi 某个XXX镜像名字ID 删除镜像</p><p>docker rmi -f $(docker images -qa) 删除全部</p><p>面试题：谈谈docker虚悬镜像是什么？ 仓库名、标签都是<none>的镜像，俗称虚悬镜像dangling image</none></p><p><img src="/2022/04/04/Docker/image-20220219235224999.png" alt="image-20220219235224999"></p><h2 id="3-3-容器命令"><a href="#3-3-容器命令" class="headerlink" title="3.3 容器命令"></a>3.3 容器命令</h2><h3 id="3-3-1-新建-启动容器"><a href="#3-3-1-新建-启动容器" class="headerlink" title="3.3.1 新建+启动容器"></a>3.3.1 新建+启动容器</h3><p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p><p>–name&#x3D;”容器新名字”       为容器指定一个名称；<br>-d: 后台运行容器并返回容器ID，也即启动守护式容器(后台运行)；</p><p>-i：以交互模式运行容器，通常与 -t 同时使用；<br>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；<br>也即启动交互式容器(前台有伪终端，等待交互)；</p><p>-P: 随机端口映射，大写P<br>-p: 指定端口映射，小写p</p><p><img src="/2022/04/04/Docker/image-20220220025640346.png" alt="image-20220220025640346"></p><h3 id="3-3-2-列出当前所有正在运行的容器"><a href="#3-3-2-列出当前所有正在运行的容器" class="headerlink" title="3.3.2  列出当前所有正在运行的容器"></a>3.3.2  列出当前所有正在运行的容器</h3><p>docker ps [OPTIONS]</p><p>-a :列出当前所有正在运行的容器+历史上运行过的<br>-l :显示最近创建的容器。<br>-n：显示最近n个创建的容器。<br>-q :静默模式，只显示容器编号。</p><p><img src="/2022/04/04/Docker/image-20220220030241183.png" alt="image-20220220030241183"></p><h3 id="3-3-3-退出容器"><a href="#3-3-3-退出容器" class="headerlink" title="3.3.3 退出容器"></a>3.3.3 退出容器</h3><p>exit 退出，容器停止</p><p>ctrl+p+q 退出，容器不停止</p><h3 id="3-3-4-对已有容器进行操作"><a href="#3-3-4-对已有容器进行操作" class="headerlink" title="3.3.4 对已有容器进行操作"></a>3.3.4 对已有容器进行操作</h3><p>开启已停止的容器 docker start 容器ID或者容器名</p><p>重启容器 docker restart 容器ID或者容器名</p><p>停止容器 docker stop 容器ID或者容器名 （或exit 退出所有前台进程，容器停止）</p><p>强制停止容器 docker kill 容器ID或容器名</p><p>删除已停止的容器 docker rm 容器ID</p><p><img src="/2022/04/04/Docker/image-20220220031522725.png" alt="image-20220220031522725"></p><h3 id="3-3-5-后台启动守护式容器"><a href="#3-3-5-后台启动守护式容器" class="headerlink" title="3.3.5 后台启动守护式容器"></a>3.3.5 后台启动守护式容器</h3><p>docker run -d 容器名</p><p>然后docker ps -a 进行查看, 会发现容器已经退出<br>很重要的要说明的一点: Docker容器后台运行,就必须有一个前台进程.<br>容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。</p><h3 id="3-3-6-监控容器"><a href="#3-3-6-监控容器" class="headerlink" title="3.3.6 监控容器"></a>3.3.6 监控容器</h3><p>查看容器日志 docker logs 容器ID</p><p>查看容器内运行的进程 docker top 容器ID</p><p>查看容器内部细节 docker inspect 容器ID</p><h3 id="3-3-6-与正在运行的容器交互"><a href="#3-3-6-与正在运行的容器交互" class="headerlink" title="3.3.6 与正在运行的容器交互"></a>3.3.6 与正在运行的容器交互</h3><p>docker exec -it 容器ID bashShell</p><p>重新进入docker attach 容器ID</p><p><img src="/2022/04/04/Docker/image-20220221153331600.png" alt="image-20220221153331600"></p><p>一般用-d后台启动的程序，再用exec进入对应容器实例</p><p>推荐大家使用 docker exec 命令，因为退出容器终端，不会导致容器的停止。</p><h3 id="3-3-7-从容器内拷贝文件到主机上"><a href="#3-3-7-从容器内拷贝文件到主机上" class="headerlink" title="3.3.7 从容器内拷贝文件到主机上"></a>3.3.7 从容器内拷贝文件到主机上</h3><p>docker cp  容器ID:容器内路径 目的主机路径</p><p><img src="/2022/04/04/Docker/image-20220221155703092.png" alt="image-20220221155703092"></p><h3 id="3-3-8-导入和导出容器"><a href="#3-3-8-导入和导出容器" class="headerlink" title="3.3.8 导入和导出容器"></a>3.3.8 导入和导出容器</h3><p>docker export 容器ID &gt; 文件名.tar  导出容器的内容留作为一个tar归档文件[对应import命令]</p><p><img src="/2022/04/04/Docker/image-20220221155758086.png" alt="image-20220221155758086"></p><p>docker import - 镜像用户&#x2F;镜像名:镜像版本号 导出容器的内容留作为一个tar归档文件[对应import命令]</p><p><img src="/2022/04/04/Docker/image-20220221160404798.png" alt="image-20220221160404798"></p><p><img src="/2022/04/04/Docker/image-20220221160411523.png" alt="image-20220221160411523"></p><p><img src="/2022/04/04/Docker/image-20220221160445849.png" alt="image-20220221160445849"></p><h2 id="3-4-总结"><a href="#3-4-总结" class="headerlink" title="3.4 总结"></a>3.4 总结</h2><p><img src="/2022/04/04/Docker/image-20220221160517126.png" alt="image-20220221160517126"></p><h1 id="4-Docker镜像"><a href="#4-Docker镜像" class="headerlink" title="4 Docker镜像"></a>4 Docker镜像</h1><h2 id="4-1-镜像概念"><a href="#4-1-镜像概念" class="headerlink" title="4.1 镜像概念"></a>4.1 镜像概念</h2><p>是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括<strong>代码、运行时需要的库、环境变量和配置文件</strong>等)，这个打包好的运行环境就是image镜像文件。</p><h3 id="4-1-1镜像分层"><a href="#4-1-1镜像分层" class="headerlink" title="4.1.1镜像分层"></a>4.1.1镜像分层</h3><p>以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载，镜像是分层的</p><h3 id="4-1-2-UnionFS（联合文件系统）"><a href="#4-1-2-UnionFS（联合文件系统）" class="headerlink" title="4.1.2 UnionFS（联合文件系统）"></a>4.1.2 UnionFS（联合文件系统）</h3><p>Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><h3 id="4-1-3-镜像加载原理"><a href="#4-1-3-镜像加载原理" class="headerlink" title="4.1.3 镜像加载原理"></a>4.1.3 镜像加载原理</h3><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>bootfs(boot file system)主要包含bootloader和kernel，bootloader主要是引导加载kernel，在Docker镜像的最底层是引导文件系统bootfs。</p><p>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 &#x2F;dev, &#x2F;proc, &#x2F;bin, &#x2F;etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。 </p><p><img src="/2022/04/04/Docker/image-20220221213107194.png" alt="image-20220221213107194"></p><p>以安装centos为例，平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M。因为Docker容器中，对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。</p><h3 id="4-1-3-镜像分层的原因"><a href="#4-1-3-镜像分层的原因" class="headerlink" title="4.1.3 镜像分层的原因"></a>4.1.3 镜像分层的原因</h3><p>镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。</p><p>比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像；<br>同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><h2 id="4-2-镜像层与容器层"><a href="#4-2-镜像层与容器层" class="headerlink" title="4.2 镜像层与容器层"></a>4.2 镜像层与容器层</h2><p>当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。</p><p>所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。只有容器层是<strong>可写的</strong>，容器层下面的所有镜像层都是<strong>只读的</strong>。</p><p><img src="/2022/04/04/Docker/image-20220221213932060.png" alt="image-20220221213932060"></p><h2 id="4-3-Docker镜像commit操作"><a href="#4-3-Docker镜像commit操作" class="headerlink" title="4.3 Docker镜像commit操作"></a>4.3 Docker镜像commit操作</h2><p>docker commit提交容器副本使之成为一个新的镜像</p><p>docker commit -m&#x3D;”提交的描述信息” -a&#x3D;”作者” 容器ID 要创建的目标镜像名:[标签名]</p><p><img src="/2022/04/04/Docker/image-20220222015419910.png" alt="image-20220222015419910"></p><h2 id="4-4-总结"><a href="#4-4-总结" class="headerlink" title="4.4 总结"></a>4.4 总结</h2><p>Docker中的镜像分层，支持通过扩展现有镜像，创建新的镜像。类似Java继承于一个Base基础类，自己再按需扩展。<br>新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层</p><p><img src="/2022/04/04/Docker/image-20220222015637686.png" alt="image-20220222015637686"></p><h1 id="5-本地镜像发布到阿里云"><a href="#5-本地镜像发布到阿里云" class="headerlink" title="5 本地镜像发布到阿里云"></a>5 本地镜像发布到阿里云</h1><h2 id="5-1-流程"><a href="#5-1-流程" class="headerlink" title="5.1 流程"></a>5.1 流程</h2><p><img src="/2022/04/04/Docker/image-20220222020301480.png" alt="image-20220222020301480"></p><h2 id="5-2-平台"><a href="#5-2-平台" class="headerlink" title="5.2 平台"></a>5.2 平台</h2><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances">容器镜像服务 (aliyun.com)</a></p><h2 id="5-3-创建镜像仓库"><a href="#5-3-创建镜像仓库" class="headerlink" title="5.3 创建镜像仓库"></a>5.3 创建镜像仓库</h2><p>个人实例</p><p><img src="/2022/04/04/Docker/image-20220222020722477.png" alt="image-20220222020722477"></p><p>命名空间</p><p><img src="/2022/04/04/Docker/image-20220222020851091.png" alt="image-20220222020851091"></p><p>镜像仓库</p><p><img src="/2022/04/04/Docker/image-20220222021141621.png" alt="image-20220222021141621"></p><p><img src="/2022/04/04/Docker/image-20220222021159139.png" alt="image-20220222021159139"></p><h3 id="5-3-将镜像推送到阿里云"><a href="#5-3-将镜像推送到阿里云" class="headerlink" title="5.3 将镜像推送到阿里云"></a>5.3 将镜像推送到阿里云</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker login --username=我就是大名丁丁的鼎鼎 registry.cn-hangzhou.aliyuncs.com <span class="comment"># 登录</span></span><br><span class="line">$ docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/tintinly/myubuntu:[镜像版本号] </span><br><span class="line">$ docker push registry.cn-hangzhou.aliyuncs.com/tintinly/myubuntu:[镜像版本号]</span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/Docker/image-20220222022330070.png" alt="image-20220222022330070"></p><p><img src="/2022/04/04/Docker/image-20220222022247361.png" alt="image-20220222022247361"></p><h2 id="5-4-从仓库中拉取镜像"><a href="#5-4-从仓库中拉取镜像" class="headerlink" title="5.4 从仓库中拉取镜像"></a>5.4 从仓库中拉取镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull registry.cn-hangzhou.aliyuncs.com/tintinly/myubuntu:[镜像版本号]</span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/Docker/image-20220222022600309.png" alt="image-20220222022600309"></p><h1 id="5-本地镜像发布到私有库"><a href="#5-本地镜像发布到私有库" class="headerlink" title="5 本地镜像发布到私有库"></a>5 本地镜像发布到私有库</h1><h2 id="5-1-私有库"><a href="#5-1-私有库" class="headerlink" title="5.1 私有库"></a>5.1 私有库</h2><p>1 官方Docker Hub地址：<a href="https://hub.docker.com/%EF%BC%8C%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86%E8%AE%BF%E9%97%AE%E5%A4%AA%E6%85%A2%E4%BA%86%E4%B8%94%E5%87%86%E5%A4%87%E8%A2%AB%E9%98%BF%E9%87%8C%E4%BA%91%E5%8F%96%E4%BB%A3%E7%9A%84%E8%B6%8B%E5%8A%BF%EF%BC%8C%E4%B8%8D%E5%A4%AA%E4%B8%BB%E6%B5%81%E3%80%82">https://hub.docker.com/，中国大陆访问太慢了且准备被阿里云取代的趋势，不太主流。</a></p><p>2 Dockerhub、阿里云这样的公共镜像仓库可能不太方便，涉及机密的公司不可能提供镜像给公网，所以需要创建一个本地私人仓库供给团队使用，基于公司内部项目构建镜像。</p><p><strong>Docker Registry是官方提供的工具，可以用于构建私有镜像仓库</strong></p><h2 id="5-2-将本地镜像推送到私有库"><a href="#5-2-将本地镜像推送到私有库" class="headerlink" title="5.2 将本地镜像推送到私有库"></a>5.2 将本地镜像推送到私有库</h2><p>下载镜像 Registry</p><p><img src="/2022/04/04/Docker/image-20220222123710084.png" alt="image-20220222123710084"></p><p>运行私有库Registry，相当于本地有个私有Docker hub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">$ docker run -d -p 5000:5000  -v /zzyyuse/myregistry/:/tmp/registry --privileged=<span class="literal">true</span> registry</span><br><span class="line"><span class="comment"># 默认情况，仓库被创建在容器的/var/lib/registry目录下，建议自行用容器卷映射，方便于宿主机联调</span></span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/Docker/image-20220222124039738.png" alt="image-20220222124039738"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl验证私服库上有什么镜像 curl -XGET http://192.168.111.162:5000/v2/_catalog</span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/Docker/image-20220222124316156.png" alt="image-20220222124316156"></p><p>可以看到，目前私服库没有任何镜像上传过。。。。。。</p><p>上传镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker   tag   镜像:Tag   Host:Port/Repository:Tag <span class="comment"># 将新镜像nettoolubuntu:1.2修改符合私服规范的Tag</span></span><br><span class="line">$ vim /etc/docker/daemon.json <span class="comment"># 修改配置文件使之支持http  &quot;insecure-registries&quot;: [&quot;192.168.111.162:5000&quot;] 重启</span></span><br><span class="line">$ docker push Host:Port/Repository:Tag <span class="comment"># push推送到私服库</span></span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/Docker/image-20220222130649532.png" alt="image-20220222130649532"></p><p>下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull 192.168.10.102:5000/nettoolubuntu:1.5</span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/Docker/image-20220222130935116.png" alt="image-20220222130935116"></p><h1 id="7-Docker容器数据卷"><a href="#7-Docker容器数据卷" class="headerlink" title="7 Docker容器数据卷"></a>7 Docker容器数据卷</h1><h2 id="7-1-允许挂载目录"><a href="#7-1-允许挂载目录" class="headerlink" title="7.1 允许挂载目录"></a>7.1 允许挂载目录</h2><p>CentOS7安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为，<br>在SELinux里面挂载目录被禁止掉了额，如果要开启，我们一般使用–privileged&#x3D;true命令，扩大容器的权限解决挂载目录没有权限的问题，也即使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限。</p><p>Docker挂载主机目录访问如果出现cannot open directory .: Permission denied<br>解决办法：在挂载目录后多加一个<code>--privileged=true</code>参数即可</p><h2 id="7-2-容器数据卷的意义"><a href="#7-2-容器数据卷的意义" class="headerlink" title="7.2 容器数据卷的意义"></a>7.2 容器数据卷的意义</h2><p><img src="/2022/04/04/Docker/image-20220222152130519.png" alt="image-20220222152130519"></p><p> 将运用与运行的环境打包镜像，run后形成容器实例运行 ，但是我们对数据的要求希望是<strong>持久化</strong>的</p><p>Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。<br>为了能保存数据在docker中我们使用卷。</p><p>特点：</p><ol><li>数据卷可在容器之间共享或重用数据</li><li>卷中的更改可以直接实时生效，爽</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止</li></ol><h2 id="7-3-容器数据卷是什么"><a href="#7-3-容器数据卷是什么" class="headerlink" title="7.3 容器数据卷是什么"></a>7.3 容器数据卷是什么</h2><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：</p><p>卷的设计目的就是<strong>数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --privileged=<span class="literal">true</span> -v /宿主机绝对路径目录:/容器内目录      镜像名 <span class="comment"># 运行容器将docker容器内的数据保存进宿主机的磁盘中</span></span><br></pre></td></tr></table></figure><h2 id="7-4-挂载容器数据卷案例"><a href="#7-4-挂载容器数据卷案例" class="headerlink" title="7.4 挂载容器数据卷案例"></a>7.4 挂载容器数据卷案例</h2><h3 id="7-4-1-宿主vs容器之间映射添加容器卷"><a href="#7-4-1-宿主vs容器之间映射添加容器卷" class="headerlink" title="7.4.1 宿主vs容器之间映射添加容器卷"></a>7.4.1 宿主vs容器之间映射添加容器卷</h3><p><img src="/2022/04/04/Docker/image-20220222155330709.png" alt="image-20220222155330709"></p><p>查看数据卷是否挂载成功</p><p><img src="/2022/04/04/Docker/image-20220222155444574.png" alt="image-20220222155444574"></p><p><img src="/2022/04/04/Docker/image-20220222155500150.png" alt="image-20220222155500150"></p><p>容器与宿主机之间数据共享</p><p><img src="/2022/04/04/Docker/image-20220222155958726.png" alt="image-20220222155958726"></p><p><img src="/2022/04/04/Docker/image-20220222155948405.png" alt="image-20220222155948405"></p><p><strong>假设docker容器stop，主机修改，docker容器重启看数据依然同步。</strong></p><h3 id="7-4-2-读写规则映射添加说明"><a href="#7-4-2-读写规则映射添加说明" class="headerlink" title="7.4.2 读写规则映射添加说明"></a>7.4.2 读写规则映射添加说明</h3><p><img src="/2022/04/04/Docker/image-20220222160056180.png" alt="image-20220222160056180"></p><h3 id="7-4-3-卷的继承和共享"><a href="#7-4-3-卷的继承和共享" class="headerlink" title="7.4.3 卷的继承和共享"></a>7.4.3 卷的继承和共享</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it  --privileged=<span class="literal">true</span> --volumes-from 父类  --name u2 ubuntu <span class="comment"># 继承了父容器的挂载规则 生命周期也与父容器无关</span></span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/Docker/image-20220222161435099.png" alt="image-20220222161435099"></p><p>宿主机和能与多个继承容器共享</p><h1 id="8-Docker常规安装"><a href="#8-Docker常规安装" class="headerlink" title="8 Docker常规安装"></a>8 Docker常规安装</h1><h2 id="8-1-总体步骤"><a href="#8-1-总体步骤" class="headerlink" title="8.1 总体步骤"></a>8.1 总体步骤</h2><p><img src="/2022/04/04/Docker/image-20220222161738356.png" alt="image-20220222161738356"></p><h2 id="8-2-Tomcat"><a href="#8-2-Tomcat" class="headerlink" title="8.2 Tomcat"></a>8.2 Tomcat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker search tomcat</span><br><span class="line"></span><br><span class="line">docker pull tomcat</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">docker run -it -p 8080:8080 tomcat</span><br></pre></td></tr></table></figure><p>打不开首页</p><p>可能没有映射端口或者没有关闭防火墙</p><p>把webapps.dist目录换成webapps</p><h2 id="8-3-MySQL"><a href="#8-3-MySQL" class="headerlink" title="8.3 MySQL"></a>8.3 MySQL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br><span class="line">docker ps</span><br><span class="line">docker exec -it 容器ID /bin/bash</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/Docker/image-20220222200016111.png" alt="image-20220222200016111"></p><p>外部主机连接</p><p><img src="/2022/04/04/Docker/image-20220222200747197.png" alt="image-20220222200747197"></p><p>问题：docker上默认字符集编码隐患</p><p><img src="/2022/04/04/Docker/image-20220222201217195.png" alt="image-20220222201217195"></p><p><img src="/2022/04/04/Docker/image-20220222201358871.png" alt="image-20220222201358871"></p><p><strong>实战(容器持久化)</strong></p><p>新建mysql容器实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 3306:3306 --privileged=<span class="literal">true</span> -v /zzyyuse/mysql/log:/var/log/mysql -v /zzyyuse/mysql/data:/var/lib/mysql -v /zzyyuse/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456  --name mysql mysql:5.7</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过容器卷同步my.cnf给mysql容器实例</p><p><img src="/2022/04/04/Docker/image-20220222202334126.png" alt="image-20220222202334126"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation_server = utf8_general_ci</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure><p>解决中文编码问题</p><p><img src="/2022/04/04/Docker/image-20220222202617543.png" alt="image-20220222202617543"></p><p>同时删除容器后重新建立实例，数据与配置依然存在</p><h2 id="8-4-redis"><a href="#8-4-redis" class="headerlink" title="8.4 redis"></a>8.4 redis</h2><p>拷贝配置文件到数据卷目录中</p><p><img src="/2022/04/04/Docker/image-20220222204734158.png" alt="image-20220222204734158"></p><p>修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">3 /app/redis目录下修改redis.conf文件</span><br><span class="line">  3.1 开启redis验证    可选</span><br><span class="line">    requirepass 123</span><br><span class="line"></span><br><span class="line">  3.2 允许redis外地连接  必须</span><br><span class="line">     注释掉 # bind 127.0.0.1</span><br><span class="line"></span><br><span class="line">  3.3   daemonize no</span><br><span class="line">     将daemonize yes注释起来或者 daemonize no设置，因为该配置和docker run中-d参数冲突，会导致容器一直启动失败</span><br><span class="line"></span><br><span class="line">  3.4 开启redis数据持久化  appendonly yes  可选</span><br></pre></td></tr></table></figure><p> 新建实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run  -p 6379:6379 --name myr3 --privileged=<span class="literal">true</span> -v /app/redis/redis.conf:/etc/redis/redis.conf -v /app/redis/data:/data -d redis:6.0.8 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ</title>
      <link href="/2022/04/04/ActiveMQ/"/>
      <url>/2022/04/04/ActiveMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="0-前置知识"><a href="#0-前置知识" class="headerlink" title="0 前置知识"></a>0 前置知识</h1><p>MQ产品种类</p><p>||编程语言|</p><table><thead><tr><th>消息中间件</th><th>编程语言</th></tr></thead><tbody><tr><td>Kafka</td><td>Java&#x2F;Scale</td></tr><tr><td>RabbitMQ</td><td>erlang</td></tr><tr><td>RocketMQ</td><td>Java</td></tr><tr><td>ActiveMQ</td><td>Java</td></tr></tbody></table><span id="more"></span><p>Kafka<br>RabbitMQ<br>RocketMQ<br>ActiveMQ</p><p>技术维度</p><p><img src="/2022/04/04/ActiveMQ/image-20211224111509083.png" alt="image-20211224111509083"></p><h1 id="1-入门概述"><a href="#1-入门概述" class="headerlink" title="1 入门概述"></a>1 入门概述</h1><h2 id="1-1-为什么要引入消息中间件"><a href="#1-1-为什么要引入消息中间件" class="headerlink" title="1.1 为什么要引入消息中间件"></a>1.1 为什么要引入消息中间件</h2><p>系统之间<strong>直接调用</strong>实际工程落地，存在的问题</p><p>系统之间接口耦合比较严重<br>面对大流量并发时，容易被冲垮<br>等待同步存在性能问题</p><p>引入消息中间件</p><p>解决耦合调用问题<br>异步模型<br>抵御洪峰流量，达到保护主业务的目的，流量削峰</p><h2 id="1-2-什么是消息中间件"><a href="#1-2-什么是消息中间件" class="headerlink" title="1.2 什么是消息中间件"></a>1.2 什么是消息中间件</h2><p>是指利用高效可靠的消息传递机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。<br>通过提供<strong>消息传递</strong>和<strong>消息排队</strong>模型在分布式环境下提供应用解耦、弹性伸缩、冗余存储、流量削峰、异步通信、数据同步等功能。</p><p>发送者把消息发送给消息服务器，消息服务器将消息存放在若干<strong>队列&#x2F;主题</strong>中，在合适的时候，消息服务器会将消息转发给接受者。<br>在这个过程中，发送和接受是<strong>异步</strong>的，也就是发送无需等待，而且发送者和接受者的生命周期也没有必然关系；<br>尤其在发布pub&#x2F;订阅sub模式下，也可以完成一对多的通信，即让一个消息有多个接受者。</p><p><img src="/2022/04/04/ActiveMQ/image-20211224203701964.png" alt="image-20211224203701964"></p><h2 id="1-3-特点"><a href="#1-3-特点" class="headerlink" title="1.3 特点"></a>1.3 特点</h2><ul><li><p>采用异步处理模式</p></li><li><p>应用系统之间解耦</p><ul><li>发送者和接收者不必了解对方，只需确认消息</li><li>发送者和接收者不必同时在线</li></ul></li><li><p><img src="/2022/04/04/ActiveMQ/image-20211224204539276.png" alt="image-20211224204522217"></p></li></ul><h2 id="1-4-官网"><a href="#1-4-官网" class="headerlink" title="1.4 官网"></a>1.4 官网</h2><p><a href="https://activemq.apache.org/">ActiveMQ (apache.org)</a></p><h2 id="1-5-安装启动"><a href="#1-5-安装启动" class="headerlink" title="1.5 安装启动"></a>1.5 安装启动</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[tintin@hadoop102 ~]$ tar -zxvf apache-activemq-5.16.3-bin.tar.gz -C /opt/module</span><br><span class="line">[tintin@hadoop102 activemq-5.16.3]$ <span class="built_in">mv</span> apache-activemq-5.16.3/ activemq-5.16.3</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[tintin@hadoop102 activemq-5.16.3]$ bin/activemq start</span><br></pre></td></tr></table></figure><p>默认端口61616</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[tintin@hadoop102 activemq-5.16.3]$ ps -ef | grep activemq</span><br><span class="line">tintin     6840      1  0 12月25 pts/0  00:00:36 /opt/module/jdk1.8.0_311/bin/java -Xms64M -Xmx1G -Djava.util.logging.config.file=logging.properties -Djava.security.auth.login.config=/opt/module/activemq-5.16.3//conf/login.config -Dcom.sun.management.jmxremote -Djava.awt.headless=<span class="literal">true</span> -Djava.io.tmpdir=/opt/module/activemq-5.16.3//tmp -Dactivemq.classpath=/opt/module/activemq-5.16.3//conf:/opt/module/activemq-5.16.3//../lib/: -Dactivemq.home=/opt/module/activemq-5.16.3/ -Dactivemq.base=/opt/module/activemq-5.16.3/ -Dactivemq.conf=/opt/module/activemq-5.16.3//conf -Dactivemq.data=/opt/module/activemq-5.16.3//data -jar /opt/module/activemq-5.16.3//bin/activemq.jar start</span><br><span class="line">tintin     8662   2072  0 00:19 pts/0    00:00:00 grep --color=auto activemq</span><br><span class="line">[tintin@hadoop102 activemq-5.16.3]$ netstat -anp|grep 61616</span><br><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp6       0      0 :::61616                :::*                    LISTEN      6840/java       </span><br><span class="line">[tintin@hadoop102 activemq-5.16.3]$ lsof -i:61616</span><br><span class="line">COMMAND  PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    6840 tintin  137u  IPv6  79095      0t0  TCP *:61616 (LISTEN)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>带运行日志启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[tintin@hadoop102 activemq-5.16.3]$ bin/activemq start &gt; myrunmq.log</span><br></pre></td></tr></table></figure><h2 id="1-6-前台页面"><a href="#1-6-前台页面" class="headerlink" title="1.6 前台页面"></a>1.6 前台页面</h2><ol><li>发现8161对应的ip地址是127.0.0.1，这个地址一般都是localhost的地址，所以需要把这个地址改成0.0.0.0，即广播地址，这样通过本机ip地址就可以访问到了，所以需要修改bin&#x2F;conf&#x2F;jetty.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jettyPort&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.activemq.web.WebConsolePort&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- the default port number for the web console --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0.0.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;8161&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>关闭防火墙或开放端口61616、8161</li></ol><p>采用61616端口提供JMS服务<br>采用8161端口提供管理控制台服务</p><p><a href="%E6%9D%82%E8%AE%B0.md#linux%E9%98%B2%E7%81%AB%E5%A2%99%E5%91%BD%E4%BB%A4">linux防火墙命令</a></p><ol start="3"><li><p>访问服务器的端口8161<a href="http://192.168.10.102:8161/">http://192.168.10.102:8161</a></p></li><li><p>输入默认账号密码admin</p></li></ol><p><img src="/2022/04/04/ActiveMQ/image-20211226125602539.png" alt="image-20211226125602539"></p><h1 id="2-Java实现ActiveMQ通讯"><a href="#2-Java实现ActiveMQ通讯" class="headerlink" title="2 Java实现ActiveMQ通讯"></a>2 Java实现ActiveMQ通讯</h1><h2 id="2-1-依赖"><a href="#2-1-依赖" class="headerlink" title="2.1 依赖"></a>2.1 依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        activemq所需必备依赖--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.activemq/activemq-all --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.xbean/xbean-spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        junit/log4j基础依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-JMS编码总体架构"><a href="#2-2-JMS编码总体架构" class="headerlink" title="2.2 JMS编码总体架构"></a>2.2 JMS编码总体架构</h2><p>Java消息服务（Java Message Service）</p><p><img src="/2022/04/04/ActiveMQ/image-20211226143357100.png" alt="image-20211226143357100"></p><h2 id="2-3-目的地Destination"><a href="#2-3-目的地Destination" class="headerlink" title="2.3 目的地Destination"></a>2.3 目的地Destination</h2><p>队列（点对点）</p><p><img src="/2022/04/04/ActiveMQ/image-20211226144208629.png" alt="image-20211226144208629"></p><p>主题（订阅与发布）</p><p><img src="/2022/04/04/ActiveMQ/image-20211226144224900.png" alt="image-20211226144224900"></p><h2 id="2-4-队列实现案例"><a href="#2-4-队列实现案例" class="headerlink" title="2.4 队列实现案例"></a>2.4 队列实现案例</h2><h3 id="2-4-1-队列生产者"><a href="#2-4-1-队列生产者" class="headerlink" title="2.4.1 队列生产者"></a>2.4.1 队列生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JmsProducer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACTIVE_MQ</span> <span class="operator">=</span> <span class="string">&quot;tcp://192.168.10.102:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;queue1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line">        <span class="comment">//根据给定的url地址，创建连接工厂</span></span><br><span class="line">        <span class="type">ActiveMQConnectionFactory</span> <span class="variable">activeMQConnectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(ACTIVE_MQ);</span><br><span class="line">        <span class="comment">//获取连接并启动访问</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//创建会话session 设置事务与签收</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//创建目的地队列</span></span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> session.createQueue(queueName);</span><br><span class="line">        <span class="comment">//创建消息生产者</span></span><br><span class="line">        <span class="type">MessageProducer</span> <span class="variable">messageProducer</span> <span class="operator">=</span> session.createProducer(queue);</span><br><span class="line">        <span class="comment">//生产者生产消息到mq队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//创建消息</span></span><br><span class="line">            <span class="type">TextMessage</span> <span class="variable">textMessage</span> <span class="operator">=</span> session.createTextMessage(<span class="string">&quot;msg&quot;</span> + i + <span class="number">1</span>);</span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        messageProducer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送到了MQ成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/ActiveMQ/image-20211226151721490.png" alt="image-20211226151721490"></p><h3 id="2-4-2-队列消费者"><a href="#2-4-2-队列消费者" class="headerlink" title="2.4.2 队列消费者"></a>2.4.2 队列消费者</h3><p><strong>同步阻塞方式receive()</strong><br>订阅者或接收者调用MessageConsumer 的receive(）方法来接收消息，receive方法在能够接收到消息之前（或超时之前）将一直阻塞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JmsConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACTIVE_MQ</span> <span class="operator">=</span> <span class="string">&quot;tcp://192.168.10.102:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;queue1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line">        <span class="comment">//根据给定的url地址，创建连接工厂</span></span><br><span class="line">        <span class="type">ActiveMQConnectionFactory</span> <span class="variable">activeMQConnectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(ACTIVE_MQ);</span><br><span class="line">        <span class="comment">//获取连接并启动访问</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//创建会话session 设置事务与签收</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//创建目的地队列</span></span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> session.createQueue(queueName);</span><br><span class="line">        <span class="comment">//创建消息消费者</span></span><br><span class="line">        <span class="type">MessageConsumer</span> <span class="variable">messageConsumer</span> <span class="operator">=</span> session.createConsumer(queue);</span><br><span class="line">        <span class="comment">//接受消息</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//设置延时不等待</span></span><br><span class="line">            <span class="type">TextMessage</span> <span class="variable">textMessage</span> <span class="operator">=</span>(TextMessage) messageConsumer.receive(<span class="number">4000L</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != textMessage) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费者接收到消息：&quot;</span> + textMessage.getText());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        messageConsumer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/ActiveMQ/image-20211226152853344.png" alt="image-20211226152853344"></p><p>4s内消费者仍在接收消息，4s后不在接收</p><p><strong>异步非阻塞方式 监听器onMessage()</strong><br>订阅者或接收者通过MessageConsumer的setMessageListener(MessageListener listener)注册一个消息监听器，<br>当消息到达之后，系统自动调用监听器MessageListener的onMessage(Message message)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听消息</span></span><br><span class="line">      messageConsumer.setMessageListener(message -&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="literal">null</span> != message &amp;&amp; message <span class="keyword">instanceof</span> TextMessage) &#123;</span><br><span class="line">              <span class="type">TextMessage</span> <span class="variable">textMessage</span> <span class="operator">=</span> (TextMessage) message;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  System.out.println(<span class="string">&quot;消费者接收到消息：&quot;</span> + textMessage.getText());</span><br><span class="line">              &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; );</span><br><span class="line"></span><br><span class="line">      System.in.read();<span class="comment">//保证进程不停止，按任意键退出</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>先生产消息，只启动1号消费者，再启动2号消费者，问题：2号消费者还能消费消息吗？ no</li><li>先启动2个消费者，再生产6条消息，请向，消费情况如何？轮询<br><img src="/2022/04/04/ActiveMQ/image-20211226160423820.png" alt="image-20211226160423820"></li></ol><p><img src="/2022/04/04/ActiveMQ/image-20211226160429926.png" alt="image-20211226160429926"></p></blockquote><h3 id="2-4-3-特点"><a href="#2-4-3-特点" class="headerlink" title="2.4.3 特点"></a>2.4.3 特点</h3><p>点对点消息传递域的特点如下：<br>（1）每个消息只能有一个消费者，类似1对1的关系。好比个人快递自己领取自己的。<br>（2）消息的生产者和消费者之间<strong>没有时间上的相关性</strong>。无论消费者在生产者发送消息的时候是否处于运行状态，消费<br>者都可以提取消息。好比我们的发送短信，发送者发送后不见得接收者会即收即看。<br>（3）消息被消费后队列中不会再存储，所以消费者不会消费到已经被消费掉的消息。</p><h2 id="2-5-主题实现案例"><a href="#2-5-主题实现案例" class="headerlink" title="2.5 主题实现案例"></a>2.5 主题实现案例</h2><h3 id="2-5-1-发布主题生产者"><a href="#2-5-1-发布主题生产者" class="headerlink" title="2.5.1 发布主题生产者"></a>2.5.1 发布主题生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JmsProducer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACTIVE_MQ</span> <span class="operator">=</span> <span class="string">&quot;tcp://192.168.10.102:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOPIC_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line">        <span class="comment">//根据给定的url地址，创建连接工厂</span></span><br><span class="line">        <span class="type">ActiveMQConnectionFactory</span> <span class="variable">activeMQConnectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(ACTIVE_MQ);</span><br><span class="line">        <span class="comment">//获取连接并启动访问</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//创建会话session 设置事务与签收</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//创建目的地队列</span></span><br><span class="line">        <span class="type">Topic</span> <span class="variable">topic</span> <span class="operator">=</span> session.createTopic(TOPIC_NAME);</span><br><span class="line">        <span class="comment">//创建消息生产者</span></span><br><span class="line">        <span class="type">MessageProducer</span> <span class="variable">messageProducer</span> <span class="operator">=</span> session.createProducer(topic);</span><br><span class="line">        <span class="comment">//生产者生产消息到mq队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//创建消息</span></span><br><span class="line">            <span class="type">TextMessage</span> <span class="variable">textMessage</span> <span class="operator">=</span> session.createTextMessage(<span class="string">&quot;msg&quot;</span> + (i + <span class="number">1</span>));</span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        messageProducer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送到了MQ成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5-2-订阅订阅消费者"><a href="#2-5-2-订阅订阅消费者" class="headerlink" title="2.5.2 订阅订阅消费者"></a>2.5.2 订阅订阅消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JmsConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACTIVE_MQ</span> <span class="operator">=</span> <span class="string">&quot;tcp://192.168.10.102:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOPIC_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;三号消费者启动&quot;</span>);</span><br><span class="line">        <span class="comment">//根据给定的url地址，创建连接工厂</span></span><br><span class="line">        <span class="type">ActiveMQConnectionFactory</span> <span class="variable">activeMQConnectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(ACTIVE_MQ);</span><br><span class="line">        <span class="comment">//获取连接并启动访问</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//创建会话session 设置事务与签收</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//创建目的地队列</span></span><br><span class="line">        <span class="type">Topic</span> <span class="variable">topic</span> <span class="operator">=</span> session.createTopic(TOPIC_NAME);</span><br><span class="line">        <span class="comment">//创建消息消费者</span></span><br><span class="line">        <span class="type">MessageConsumer</span> <span class="variable">messageConsumer</span> <span class="operator">=</span> session.createConsumer(topic);</span><br><span class="line"><span class="comment">//        //接受消息</span></span><br><span class="line"><span class="comment">//        while (true) &#123;</span></span><br><span class="line"><span class="comment">//            //设置延时不等待</span></span><br><span class="line"><span class="comment">//            TextMessage textMessage =(TextMessage) messageConsumer.receive(4000L);</span></span><br><span class="line"><span class="comment">//            if (null != textMessage) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;消费者接收到消息：&quot; + textMessage.getText());</span></span><br><span class="line"><span class="comment">//            &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        messageConsumer.setMessageListener(message -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != message &amp;&amp; message <span class="keyword">instanceof</span> TextMessage) &#123;</span><br><span class="line">                <span class="type">TextMessage</span> <span class="variable">textMessage</span> <span class="operator">=</span> (TextMessage) message;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;三号消费者接收到消息：&quot;</span> + textMessage.getText());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        System.in.read();<span class="comment">//保证进程不停止，按任意键退出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        messageConsumer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/ActiveMQ/image-20211226175917458.png" alt="image-20211226175917458"></p><h3 id="2-5-3-特点"><a href="#2-5-3-特点" class="headerlink" title="2.5.3 特点"></a>2.5.3 特点</h3><p>发布订阅消息传递域的特点如下：<br>（1）生产者将消息发布到topic中，每个消息可以有多个消费者，属于1：N的关系<br>（2）生产者和消费者之间<strong>有时间上的相关性</strong>。订阅某一个主题的消费者只能消费自它订阅之后发布的消息。<br>（3）生产者生产时，topic不保存消息它是无状态的不落地，假如无人订阅就去生产，那就是一条废消息，所以，一般先启动消费者再启动生产者。<br>JMS规范允许客户创建持久订阅，这在一定程度上放松了时间上的相关性要求。持久订阅允许消费者消费它在未处于激活状态时发送的消息。。一句话，好比我们的微信公众号订阅</p><h2 id="2-6-两大模式对比"><a href="#2-6-两大模式对比" class="headerlink" title="2.6 两大模式对比"></a>2.6 两大模式对比</h2><table><thead><tr><th></th><th>Topic模式</th><th>Queue模式</th></tr></thead><tbody><tr><td>工作模式</td><td>订阅-发布”模式，如果当前没有订阅者，消息将会被丢弃。如果有多个订阅者，那么这些订阅者都会收到消息</td><td>负载均衡”模式，如果当前没有消费者，消息也不会丢弃；如果有多个消费者，那么一条消息也只会发送给其中一个消费者，并且要求消费者ack信息。</td></tr><tr><td>有无状态</td><td>无状态</td><td>Queue数据默认会在mq服务器上以文件形式保存，比如Active MQ股保存在SAMQ HOME\datalkr-storeldata下面。也可以配置成DB存储。</td></tr><tr><td>传递完整性</td><td>如果没有订阅者，消息将会被丢弃</td><td>消息不会丢弃</td></tr><tr><td>处理效率</td><td>由于消息要按照订阅者的数量进行复制，所以处理性能会随着订阅者的增加而明显降低，并且还要结合不同消息协议自身的姓能差异</td><td>由于一条消息只发送给一个消费者，所以就算消费者再多，性能也不会有明显降低。当然不忄消息协议的具体性能也是有差异的</td></tr></tbody></table><h1 id="3-JMS规范与落地产品"><a href="#3-JMS规范与落地产品" class="headerlink" title="3 JMS规范与落地产品"></a>3 JMS规范与落地产品</h1><h2 id="3-1-JMS"><a href="#3-1-JMS" class="headerlink" title="3.1 JMS"></a>3.1 JMS</h2><p>Java Message Service(Java消息服务是JavaEE中的一个技术)</p><p>Java消息服务指的是两个应用程序之间进行异步通信。它为标准消息协议和消息服务提供了一组通用接口，包括创建、发送、读取消息等，用于支持JAVA应用程序开发。在JavaEE中，当两个应用程序使用JMS进行通信时，它们之间并不是直接相连的，而是通过一个共同的消息收发服务组件关联起来以达到解耦&#x2F;异步削峰的效果。</p><h2 id="3-2-其他消息中间件"><a href="#3-2-其他消息中间件" class="headerlink" title="3.2  其他消息中间件"></a>3.2  其他消息中间件</h2><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>Kafka</th><th>RocketMQ</th></tr></thead><tbody><tr><td>Producer-Consumer</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Publish-Subscribe</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Request-Reply</td><td>支持</td><td>支持</td><td>-</td><td>支持</td></tr><tr><td>API完备性</td><td>高</td><td>高</td><td>高</td><td>低（静态配置）</td></tr><tr><td>多语言支持</td><td>支持，Java优先</td><td>语言无关</td><td>支持，Java优先</td><td>支持</td></tr><tr><td>单机吞吐量</td><td>万级</td><td>万级</td><td>十万级</td><td>单机万级</td></tr><tr><td>消息延迟</td><td>-</td><td>微妙级</td><td>毫秒级</td><td>-</td></tr><tr><td>可用性</td><td>高（主从）</td><td>高（主从）</td><td>非常高（分布式）</td><td>高</td></tr><tr><td>消息丢失</td><td>-</td><td>低</td><td>理论不会</td><td>-</td></tr><tr><td>消息重复</td><td>-</td><td>可控制</td><td>理论上会有重复</td><td>-</td></tr><tr><td>文档完备性</td><td>高</td><td>高</td><td>高</td><td>中</td></tr><tr><td>提供快速入门</td><td>有</td><td>有</td><td>有</td><td>无</td></tr><tr><td>首次部署难度</td><td>-</td><td>低</td><td>中</td><td>高</td></tr></tbody></table><h2 id="3-3-组成结构和特点"><a href="#3-3-组成结构和特点" class="headerlink" title="3.3 组成结构和特点"></a>3.3 组成结构和特点</h2><p><strong>JMS provider</strong> 实现JMs接口和规范的消息中间件，也就是我们的MQ服务器</p><p><strong>JMS producer</strong> 消息生产者，创建和发送JMS消息的客户端应用</p><p><strong>JMS consumer</strong> 消息消费者，接收和处理JMS消息的客户端应用</p><p><strong>JMS message</strong> </p><ul><li>消息头<ul><li>JMSDestination：消息发送的目的地,主要是指Queue和Topic</li><li>JMSDeliveryMode：持久模式和非持久模式</li><li>JMSExpiration：一定时间过期 ttl为0表示永不过期 如果发送后，在消息过期时间之后消息还没有被发送到，消息被清除</li><li>JMSPriority：消息优先级 0-4普通 5-9加急，加急一定先于普通到达</li><li>JMSMessage：唯一识别每个消息的标识由MQ产生。</li></ul></li><li>消息体 封装具体的消息数据  发送和接收消息体类型必须一致对应<ul><li><p>TextMessage：普通字符串消息，包含一个string</p></li><li><p>MapMessage：一个Map类型的消息，key为string类型，，而值为Java的基本类型</p></li><li><p>BytesMessage：二进制数组消息，包含一个byte[]</p></li><li><p>StreamMessage：Java数据流消息，用标准流操作来顺序的填充和读取。</p></li><li><p>ObjectMessage：对象消息，包含一个可序列化的Java对象</p></li></ul></li><li>消息属性<ul><li>如果需要除消息头字段以外的值，那么可以使用消息属性</li><li>识别&#x2F;去重&#x2F;重点标注等操作非常有用的方法</li><li>他们是以属性名和属性值对的形式制定的。可以将属性是为消息头得扩展，属性指定一些消息头没有包括的<strong>附加信息</strong>，比如可以在属性里指定消息选择器。message.setStringProperty()</li></ul></li></ul><h2 id="3-4-可靠性"><a href="#3-4-可靠性" class="headerlink" title="3.4 可靠性"></a>3.4 可靠性</h2><h3 id="3-4-1-Persistent持久性"><a href="#3-4-1-Persistent持久性" class="headerlink" title="3.4.1 Persistent持久性"></a>3.4.1 Persistent持久性</h3><p><strong>参数设置</strong></p><ul><li><p>非持久：messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT) 当服务器宕机或者订阅者离线，消息不存在</p></li><li><p>持久：messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT) 当服务器宕机或者订阅者离线，消息依然存在</p></li></ul><blockquote><p>MQ挂了，消息的持久化和丢失情况如何？</p><p>队列默认传送模式为持久化，保证了消息只被传送一次且成功使用一次。</p><p>主题中，先运行一次订阅者者，此时处于在线状态。然后再运行发布者者发送信息，此时，无论订阅者是否在线，都会接收到，不在线的话，下次连接的时候，会把没有收过的消息都接收下来。</p></blockquote><p>主题持久化订阅者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JmsConsumer_Persist</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACTIVE_MQ</span> <span class="operator">=</span> <span class="string">&quot;tcp://192.168.10.102:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOPIC_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic_persist&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;持久化订阅者消费者启动&quot;</span>);</span><br><span class="line">        <span class="comment">//根据给定的url地址，创建连接工厂</span></span><br><span class="line">        <span class="type">ActiveMQConnectionFactory</span> <span class="variable">activeMQConnectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(ACTIVE_MQ);</span><br><span class="line">        <span class="comment">//获取连接并启动访问</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.setClientID(<span class="string">&quot;持久化订阅者消费者&quot;</span>);</span><br><span class="line">        <span class="comment">//创建会话session 设置事务与签收</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//创建目的地队列</span></span><br><span class="line">        <span class="type">Topic</span> <span class="variable">topic</span> <span class="operator">=</span> session.createTopic(TOPIC_NAME);</span><br><span class="line">        <span class="comment">//持久化订阅者</span></span><br><span class="line">        <span class="type">TopicSubscriber</span> <span class="variable">durableSubscriber</span> <span class="operator">=</span> session.createDurableSubscriber(topic, <span class="string">&quot;remarked&quot;</span>);</span><br><span class="line"></span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> durableSubscriber.receive();</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">null</span> != message) &#123;</span><br><span class="line">            <span class="type">TextMessage</span> <span class="variable">textMessage</span> <span class="operator">=</span> (TextMessage) message;</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到持久化消息&quot;</span> + textMessage.getText());</span><br><span class="line">            message = durableSubscriber.receive(<span class="number">5000L</span>);<span class="comment">//由于发布消息有限，接收消息等待超时后，订阅者将离线</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.in.read();<span class="comment">//保证进程不停止，按任意键退出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        durableSubscriber.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主题持久化发布者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JmsProducer_Persist</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACTIVE_MQ</span> <span class="operator">=</span> <span class="string">&quot;tcp://192.168.10.102:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOPIC_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic_persist&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line">        <span class="comment">//根据给定的url地址，创建连接工厂</span></span><br><span class="line">        <span class="type">ActiveMQConnectionFactory</span> <span class="variable">activeMQConnectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(ACTIVE_MQ);</span><br><span class="line">        <span class="comment">//获取连接并启动访问</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> activeMQConnectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//创建会话session 设置事务与签收</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//创建目的地队列</span></span><br><span class="line">        <span class="type">Topic</span> <span class="variable">topic</span> <span class="operator">=</span> session.createTopic(TOPIC_NAME);</span><br><span class="line">        <span class="comment">//创建消息生产者</span></span><br><span class="line">        <span class="type">MessageProducer</span> <span class="variable">messageProducer</span> <span class="operator">=</span> session.createProducer(topic);</span><br><span class="line">        <span class="comment">//设置持久化传输模式</span></span><br><span class="line">        messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);</span><br><span class="line"></span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生产者生产消息到mq队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//创建消息</span></span><br><span class="line">            <span class="type">TextMessage</span> <span class="variable">textMessage</span> <span class="operator">=</span> session.createTextMessage(<span class="string">&quot;msg&quot;</span> + (i + <span class="number">1</span>));</span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        messageProducer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;持久化消息发布到了MQ成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/ActiveMQ/image-20211227162921882.png" alt="image-20211227162921882"></p><h3 id="3-4-2-Transaction事务"><a href="#3-4-2-Transaction事务" class="headerlink" title="3.4.2 Transaction事务"></a>3.4.2 Transaction事务</h3><p><strong>参数设置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//事务与签收</span></span><br><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br></pre></td></tr></table></figure><p><strong>对于生产者</strong></p><ul><li><p>非事务：false 每一次messageProducer.send(textMessage);都会提交</p></li><li><p>事务：true 通过session.commit()进行提交，通过session.rollback()进行回滚</p></li></ul><p><strong>对于消费者</strong></p><ul><li><p>非事务：false 每一次messageConsumer.receive()，都会使读取消息并使其出列</p></li><li><p>事务：true 每一次messageConsumer.receive()，都可以读取消息，但只有通过session.commit()进行提交，队列中的消息才会出列，否则容易导致消息重复。通过session.rollback()进行回滚。</p></li></ul><h3 id="3-4-3-Acknowledge签收"><a href="#3-4-3-Acknowledge签收" class="headerlink" title="3.4.3 Acknowledge签收"></a>3.4.3 Acknowledge签收</h3><p><strong>参数设置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//事务与签收</span></span><br><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br></pre></td></tr></table></figure><p><strong>对于非事务</strong></p><ul><li><p>自动签收（默认）： Session.AUTO_ACKNOWLEDGE</p></li><li><p>手动签收：Session.CLIENT_ACKNOWLEDGE 客户端调用acknowledge方法手动签收，否则消息不出列</p></li><li><p>允许重复消息：Session.DUPS_OK_ACKNOWLEDGE</p></li></ul><p><strong>对于事务</strong></p><p>生产事务开启，只有commit后才能将全部消息出列变为已消费。</p><p><strong>签收与事务的关系</strong></p><p>在事务性会话中，当一个事务被成功提交则消息被自动签收。如果事务回滚，则消息会被再次传送。<br>非事务性会话中，消息何时被确认取决于创建会话时的应答模式（acknowledgement）</p><h3 id="3-4-4-集群保证"><a href="#3-4-4-集群保证" class="headerlink" title="3.4.4 集群保证"></a>3.4.4 集群保证</h3><p>详见[9 ActiveMQ的多节点集群](#9 ActiveMQ的多节点集群)</p><h2 id="3-5-JMS点对点总结"><a href="#3-5-JMS点对点总结" class="headerlink" title="3.5 JMS点对点总结"></a>3.5 JMS点对点总结</h2><p>点对点模型基于队列。</p><p>生产者发送消息到队列，消费者从队列接收消息，队列的存在使得消息的异步传输成为可能。类似于发送短信。</p><ul><li>如果Session关闭时，部分消息已被读取但是没有签收（acknowledge）或者没有事务处理（commit），那么当消费者下次连接到相同的队列时，消息还能再次接收</li><li>队列可以长久地保存消息直到消费者收到消息。消费者不需要因为担心消息会丢失而时刻和队列保持激活的连接状态，充分体现了异步传输模式的优势</li></ul><h2 id="3-6-JMS订阅发布总结"><a href="#3-6-JMS订阅发布总结" class="headerlink" title="3.6 JMS订阅发布总结"></a>3.6 JMS订阅发布总结</h2><p>JMS Pub&#x2F;Sub 模型定义了如何向一个内容节点发布和订阅消息，这些节点被称作topic</p><p>主题可以被认为是消息的传输中介，发布者(publisher)发布消息到主题，订阅者(subscribe)从主题订阅消息。</p><p>主题使得消息订阅者和消息发布者保持互相独立，不需要接触即可保证消息的传送。</p><ul><li>非持久订阅：只有当客户端处于激活状态，或者是和MQ保存会话连接状态，才能收到某个主题的消息。而离线状态时生产者发送的消息，消费者永远无法获取。</li><li>持久订阅：首先客户端注册一个身份识别id（connection.setClientID）客户端每一次在线都能接收到离线时生产者发送的主题消息。</li></ul><h1 id="4-ActiveMQ的Broker"><a href="#4-ActiveMQ的Broker" class="headerlink" title="4 ActiveMQ的Broker"></a>4 ActiveMQ的Broker</h1><h2 id="4-1-Broker"><a href="#4-1-Broker" class="headerlink" title="4.1 Broker"></a>4.1 Broker</h2><p>相当于一个ActiveMQ服务器实例</p><p>说白了，Broker其实就是实现了用代码的形式启动ActiveMQ将MQ嵌入到Java代码中，以便随时用随时启动，<br>在用的时候再去启动这样能节省了资源，也保证了可靠性。</p><p>不同的配置文件模拟不同的应用场景</p><h2 id="4-2-嵌入式Broker"><a href="#4-2-嵌入式Broker" class="headerlink" title="4.2 嵌入式Broker"></a>4.2 嵌入式Broker</h2><p>用ActiveMQ Broker作为独立的消息服务器来构建JAVA应用。<br>ActiveMQ也支持在vm中通信基于嵌入式的broker,I能够无缝的集成其它java应用</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmbedBroker</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//ActiveMQ也支持在vm中通信基于嵌入式的broker,I能够无缝的集成其它java应用</span></span><br><span class="line">        <span class="type">BrokerService</span> <span class="variable">brokerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrokerService</span>();</span><br><span class="line">        brokerService.setUseJmx(<span class="literal">true</span>);</span><br><span class="line">        brokerService.addConnector(<span class="string">&quot;tcp://localhost:61616&quot;</span>);</span><br><span class="line">        brokerService.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/ActiveMQ/image-20211228002253638.png" alt="image-20211228002253638"></p><p>开启后，通过队列测试成功</p><h1 id="5-Spring整合ActiveMQ"><a href="#5-Spring整合ActiveMQ" class="headerlink" title="5 Spring整合ActiveMQ"></a>5 Spring整合ActiveMQ</h1><h2 id="5-1-添加依赖"><a href="#5-1-添加依赖" class="headerlink" title="5.1 添加依赖"></a>5.1 添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        整合Spring和ActiveMQ--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.23.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        ActiveMQ所需pool包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        Spring相关--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.23.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.23.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.23.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1_2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-2-配置文件"><a href="#5-2-配置文件" class="headerlink" title="5.2 配置文件"></a>5.2 配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    开启包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.tintin.acitvemq.spring&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置生产者--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--池化包装 对于pom中的activemq-pool--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jmsFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.activemq.pool.PooledConnectionFactory&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;stop&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionFactory&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;brokerURL&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tcp://192.168.10.102:61616&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxConnections&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置队列目的地--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;destinationQueue&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.activemq.command.ActiveMQQueue&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring-active-queue&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置主题目的地--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;destinationTopic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.activemq.command.ActiveMQTopic&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring-active-topic&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    JMS工具类 可以进行消息接收和发送--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jmsTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jms.core.JmsTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jmsFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultDestination&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;destinationQueue&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jms.support.converter.SimpleMessageConverter&quot;</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-3-队列实例"><a href="#5-3-队列实例" class="headerlink" title="5.3 队列实例"></a>5.3 队列实例</h2><h3 id="5-3-1-生产者"><a href="#5-3-1-生产者" class="headerlink" title="5.3.1 生产者"></a>5.3.1 生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMQ_Producer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">SpringMQ_Producer</span> <span class="variable">springMQ_producer</span> <span class="operator">=</span></span><br><span class="line">                applicationContext.getBean(<span class="string">&quot;springMQ_Producer&quot;</span>,SpringMQ_Producer.class);</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        springMQ_producer.jmsTemplate.send(session -&gt; session.createTextMessage(<span class="string">&quot;Spring和ActiveMQ的整合&quot;</span>)) ;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;send task over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-2-消费者"><a href="#5-3-2-消费者" class="headerlink" title="5.3.2 消费者"></a>5.3.2 消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMQ_Consumer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">SpringMQ_Consumer</span> <span class="variable">SpringMQ_Consumer</span> <span class="operator">=</span></span><br><span class="line">                applicationContext.getBean(<span class="string">&quot;springMQ_Consumer&quot;</span>,SpringMQ_Consumer.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">receivedText</span> <span class="operator">=</span> (String) SpringMQ_Consumer.jmsTemplate.receiveAndConvert();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;receive message &quot;</span>+ receivedText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-主题实例"><a href="#5-4-主题实例" class="headerlink" title="5.4 主题实例"></a>5.4 主题实例</h2><h3 id="5-4-1-生产者"><a href="#5-4-1-生产者" class="headerlink" title="5.4.1 生产者"></a>5.4.1 生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopic</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">SpringMQ_Producer</span> <span class="variable">springMQ_producer</span> <span class="operator">=</span></span><br><span class="line">            applicationContext.getBean(<span class="string">&quot;springMQ_Producer&quot;</span>,SpringMQ_Producer.class);</span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    springMQ_producer.jmsTemplate.send(session -&gt; session.createTextMessage(<span class="string">&quot;Spring和ActiveMQ的整合 for topic&quot;</span>)) ;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;send task over&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-2-消费者"><a href="#5-4-2-消费者" class="headerlink" title="5.4.2 消费者"></a>5.4.2 消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopic</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">SpringMQ_Consumer</span> <span class="variable">SpringMQ_Consumer</span> <span class="operator">=</span></span><br><span class="line">            applicationContext.getBean(<span class="string">&quot;springMQ_Consumer&quot;</span>,SpringMQ_Consumer.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">receivedText</span> <span class="operator">=</span> (String) SpringMQ_Consumer.jmsTemplate.receiveAndConvert();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;receive message &quot;</span>+ receivedText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-3-配置监听程序"><a href="#5-4-3-配置监听程序" class="headerlink" title="5.4.3 配置监听程序"></a>5.4.3 配置监听程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessageListener</span> <span class="keyword">implements</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != message &amp;&amp; message <span class="keyword">instanceof</span> TextMessage) &#123;</span><br><span class="line">            <span class="type">TextMessage</span> <span class="variable">textMessage</span> <span class="operator">=</span> (TextMessage) message;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(textMessage.getText());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置监听程序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jmsContainer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jmsFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;destination&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;destinationQueue&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageListener&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myMessageListener&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/ActiveMQ/image-20211228194157206.png" alt="image-20211228194157206"></p><p>消费者无序启动，监听器直接实例化一个消费者并接收消息</p><h1 id="6-SpringBoot整合ActiveMQ"><a href="#6-SpringBoot整合ActiveMQ" class="headerlink" title="6 SpringBoot整合ActiveMQ"></a>6 SpringBoot整合ActiveMQ</h1><h2 id="6-1-添加依赖"><a href="#6-1-添加依赖" class="headerlink" title="6.1  添加依赖"></a>6.1  添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-2-队列实现"><a href="#6-2-队列实现" class="headerlink" title="6.2 队列实现"></a>6.2 队列实现</h2><h3 id="6-2-1-生产者"><a href="#6-2-1-生产者" class="headerlink" title="6.2.1 生产者"></a>6.2.1 生产者</h3><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7777</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://192.168.10.102:61616</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">    <span class="attr">pub-sub-domain:</span> <span class="literal">false</span> <span class="comment"># false = queue, true = topic</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己定义队列名称</span></span><br><span class="line"><span class="attr">myqueue:</span> <span class="string">boot-activemq-queue</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 配置Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigBean</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;myqueue&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String myQueue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveMQQueue</span>(myQueue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableJms</span> <span class="comment">//开启注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueueProducer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Queue queue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        jmsMessagingTemplate.convertAndSend(queue, UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootMqQueueProducerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(BootMqQueueProducerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试单元</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = BootMqQueueProducerApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BootMqQueueProducerApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> QueueProducer queueProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSend</span><span class="params">()</span> &#123;</span><br><span class="line">        queueProducer.produceMsg();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消息定时投放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//间隔时间3s 定投</span></span><br><span class="line"><span class="meta">@Scheduled(fixedDelay = 3000)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceMsgScheduled</span><span class="params">()</span> &#123;</span><br><span class="line">    jmsMessagingTemplate.convertAndSend(queue, <span class="string">&quot;scheduled &quot;</span> + UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;send over ... ok&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-2消费者"><a href="#6-2-2消费者" class="headerlink" title="6.2.2消费者"></a>6.2.2消费者</h3><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消费者直接监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueueConsumer</span> &#123;</span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;$&#123;myqueue&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(TextMessage textMessage)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者收到消息&quot;</span> + textMessage.getText());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-主题实现"><a href="#6-3-主题实现" class="headerlink" title="6.3 主题实现"></a>6.3 主题实现</h2><h3 id="6-3-1-生产者"><a href="#6-3-1-生产者" class="headerlink" title="6.3.1 生产者"></a>6.3.1 生产者</h3><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6666</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://192.168.10.102:61616</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">    <span class="attr">pub-sub-domain:</span> <span class="literal">true</span> <span class="comment"># false = queue, true = topic</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己定义主题名称</span></span><br><span class="line"><span class="attr">mytopic:</span> <span class="string">boot-activemq-topic</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>bean配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigBean</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mytopic&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mytopic ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Topic <span class="title function_">topic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveMQTopic</span>(mytopic);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicProducer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Topic topic;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        jmsMessagingTemplate.convertAndSend(topic,<span class="string">&quot;topic &quot;</span> + UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-2-消费者"><a href="#6-3-2-消费者" class="headerlink" title="6.3.2 消费者"></a>6.3.2 消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicConsumer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;$&#123;mytopic&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(TextMessage textMessage)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(textMessage.getText());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="7-ActiveMQ的传输协议"><a href="#7-ActiveMQ的传输协议" class="headerlink" title="7 ActiveMQ的传输协议"></a>7 ActiveMQ的传输协议</h1><blockquote><p>如何修改默认的端口？</p><p>如何配置生产时使用的链接协议？</p></blockquote><h2 id="7-1-是什么"><a href="#7-1-是什么" class="headerlink" title="7.1 是什么"></a>7.1 是什么</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 conf]<span class="comment"># vim activemq.xml</span></span><br></pre></td></tr></table></figure><p>默认消息协议opernwire</p><p><img src="/2022/04/04/ActiveMQ/image-20211229183222902.png" alt="image-20211229183222902"></p><h2 id="7-2-常见消息协议"><a href="#7-2-常见消息协议" class="headerlink" title="7.2 常见消息协议"></a>7.2 常见消息协议</h2><h3 id="7-2-1-默认TCP"><a href="#7-2-1-默认TCP" class="headerlink" title="7.2.1 默认TCP"></a>7.2.1 默认TCP</h3><p>在网络传输数据前，必须要序列化数据，消息是通过一个叫wire protocol的来序列化成字节流。<br>默认情况下ActiveMQ把wire protocol叫做OpenWire,它的目的是促使网络上的效率和数据快速交互。</p><p>TCP传输的优点：<br>TCP协议传输可靠性高，稳定性强工<br>高效性：字节流方式传递，效率很高<br>有效性、可用性：：应用广泛，支持任何平台</p><h3 id="7-2-2-NIO-（New-I-x2F-O-API）"><a href="#7-2-2-NIO-（New-I-x2F-O-API）" class="headerlink" title="7.2.2 NIO （New I&#x2F;O API）"></a>7.2.2 NIO （New I&#x2F;O API）</h3><ol><li>NIO协议和TCP协议类似但NIO更侧重于底层的访问操作。它允许开发人员对同一资源可有更多的client调用和服务端有更多的负<br>载。</li><li>适合使用NIO协议的场景：<ol><li>可能有大量的Client去连接到Broker上，一般情况下，大量的Client去连接Broker是被操作系统的线程所限<br>因此，NIO的实现比TCP需要更少的线程去运行，所以建议使用NIO协议</li><li>可能对于Broker有一个很迟钝的网络传输，<strong>NIO比TCP提供更好的性能。</strong></li></ol></li></ol><h3 id="7-2-3-其他协议"><a href="#7-2-3-其他协议" class="headerlink" title="7.2.3 其他协议"></a>7.2.3 其他协议</h3><p>AMQP协议 即Advanced Message Queuing Protocol,一个提供统一消息服务的应用层标准高级队列应用层协议的一个开放标准,为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端&#x2F;中间件不同产品，不同开发语言等条件的限制。</p><p>stomp协议 STOMP,streamingTextOrientatedMessageProtocol，是一种为MOM(Message Oriented Middleware，面向消息的中间件)设计的简单文本协议。</p><p>SSL协议（Secure Socket Layer Protocol）</p><p>mqtt协议 （Message Queuing Telemetry Transport，消息队列遥测传输）是IBM开发的一个即时通讯协议，有可能成为物联网<br>要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部连接起来，被用来当做传感器和致动器（比如通过Twitter让房屋联网）的通信协议。</p><p>ws协议 （web socket protocol）</p><h3 id="7-2-4-小结"><a href="#7-2-4-小结" class="headerlink" title="7.2.4 小结"></a>7.2.4 小结</h3><table><thead><tr><th>协议</th><th>描述</th></tr></thead><tbody><tr><td>TCP</td><td>默认协议，性能相对不错</td></tr><tr><td>NIO</td><td>基于TCP协议之上，拓展优化，具有更好的拓展性</td></tr><tr><td>UDP</td><td>性能比TCP好，但不具有可靠性</td></tr><tr><td>SSL</td><td>安全链接</td></tr><tr><td>HTTP(S)</td><td>基于HTTP或HTTPS</td></tr><tr><td>VM</td><td>VM本身不是协议，当客户端和代理在同一个Java虚拟机(VM)中运行时,他们之间需要通信,但不想占用网络通道，而是直接通信，可以使用该方式</td></tr></tbody></table><h2 id="7-3-NIO传输案例演示"><a href="#7-3-NIO传输案例演示" class="headerlink" title="7.3 NIO传输案例演示"></a>7.3 NIO传输案例演示</h2><p>如果您不特别指定ActiveMQ的网络监听端口，那么这些端口都将使用BIO网络IO模型。（OpenWire, STOMP, AMQP<br>所以为了首先提高单节点的网络吞吐性能，我们需要明确指定Active的网络IO模型，</p><p>如下图，uri以nio开头表示使用以tcp协议为基础的NIO网络IO模型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">&quot;nio&quot;</span> <span class="attr">uri</span>=<span class="string">&quot;nio://0.0.0.0:61618?trace=true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/ActiveMQ/image-20211229192338872.png" alt="image-20211229192338872"></p><h2 id="7-4-NIO传输案例演示增强"><a href="#7-4-NIO传输案例演示增强" class="headerlink" title="7.4 NIO传输案例演示增强"></a>7.4 NIO传输案例演示增强</h2><blockquote><p>上述NIO性能不错了，如何进一步优化？</p><p>URI格式头以”nio”开头，表示这个端口使用以TCP协议为基础的NIO网络IO模型。但是这样的设置方式，只能使这个端口支持Openwire协议。</p><p>那么我们怎么既让这个端口支持Nlo网络lo模型，又让它支持多个协议呢？</p></blockquote><p>使用auto关键字<br>解决<br>使用“+”符号来为端口设置多种特性<br>如果我们既需要某一个端口支持NIO网络IO模型，又需要它支持多个协议<img src="/2022/04/04/ActiveMQ/image-20211229224135978.png" alt="image-20211229224135978"></p><p><img src="/2022/04/04/ActiveMQ/image-20211229224057758.png" alt="image-20211229224057758"></p><h1 id="8-ActiveMQ消息存储与持久化"><a href="#8-ActiveMQ消息存储与持久化" class="headerlink" title="8 ActiveMQ消息存储与持久化"></a>8 ActiveMQ消息存储与持久化</h1><h2 id="8-1-简介"><a href="#8-1-简介" class="headerlink" title="8.1 简介"></a>8.1 简介</h2><p>保证MQ服务器宕机后，消息不会丢失</p><p>为了避免意外宕机以后丢失信息，需要做到重启后可以恢复消息队列，消息系统一般都会采用<strong>持久化机制。</strong></p><p>ActiveMQ的消息持久化机制有JDBC，AMQ，KahaDB和LevelDB，无论使用哪种持久化方式，消息的存储逻辑都是一致的。就是在发送者将消息发送出去后，消息中心首先将消息存储到本地数据文件、内存数据库或者远程数据库等再试图将消息发送给接收者，成功则将消息从存储中删除，失败则继续尝试发送。</p><p>消息中心启动以后首先要检查指定的存储位置，如果有未发送成功的消息，则需要把消息发送出去。</p><h2 id="8-2-存储方式"><a href="#8-2-存储方式" class="headerlink" title="8.2 存储方式"></a>8.2 存储方式</h2><h3 id="8-2-1-AMQ-Message-Store-了解"><a href="#8-2-1-AMQ-Message-Store-了解" class="headerlink" title="8.2.1 AMQ Message Store(了解)"></a>8.2.1 AMQ Message Store(了解)</h3><p>文件存储形式，写入速度快、易恢复。文件默认大小32M。当存储文件的所有消息都被消费，该文件被标识为可删除。适用于ActiveMQ 5.3前 </p><h3 id="8-2-2-KahaDB消息存储-默认"><a href="#8-2-2-KahaDB消息存储-默认" class="headerlink" title="8.2.2 KahaDB消息存储(默认)"></a>8.2.2 KahaDB消息存储(默认)</h3><p>基于日志文件，从ActiveMQ5.4开始默认的持久化插件</p><p>activemq.xml中的配置</p><p><img src="/2022/04/04/ActiveMQ/image-20211230035948183.png" alt="image-20211230035948183"></p><p>消息存储使用一个<strong>事务日志（b-<Number>.log）</Number></strong>和仅仅用一个<strong>索引文件（db.data）</strong>来存储它所有的地址。<br>KahaDB是一个专门针对消息持久化的解决方案,它对典型的消息使用模式进行了优化。<br>数据被追加到data logs中。当不再需要log文件中的数据的时候,log文件会被丢弃</p><p>存储原理</p><p><img src="/2022/04/04/ActiveMQ/image-20211230133810680.png" alt="image-20211230133810680"></p><ul><li>db-<Number>.log KahaDB存储消息到预定义大小的数据记录文件中，文件命名为db-<Number>.log。。当数据文件已满时，一个新的文件会随之创建，number数值也会随之递增，它随着消息数量的增多，如每32M一个文件，文件名按照数字进行编号，如db-1.log、db-2.log、db-3.log …。当不再有引用到数据文件中的任何消息时，文件会被<strong>删除或归档</strong>。</Number></Number></li><li>db.data该文件包含了持久化的BTree索引，索引了消息数据记录中的消息,它是消息的索引文件，本质上是B-Tree（B树），使用B-Tree作为索引指向db-<Number>.log里面存储的消息。</Number></li><li>db.free 记录当前db.data文件里哪些页面是空闲的，文件具体内容是所有空闲页的ID</li><li>db.redo 用来进行消息恢复,如果KahaDB消息存储在强制退出后启动用于恢复BTree索引。</li><li>lock文件锁，表示当前获得kahadb读写权限的broker。</li></ul><h3 id="8-2-3-JDBC消息存储"><a href="#8-2-3-JDBC消息存储" class="headerlink" title="8.2.3 JDBC消息存储"></a>8.2.3 JDBC消息存储</h3><p><img src="/2022/04/04/ActiveMQ/image-20211230151943446.png" alt="image-20211230151943446"></p><p>消息存储于数据库中</p><h3 id="8-2-4-LevelDB消息存储（了解）"><a href="#8-2-4-LevelDB消息存储（了解）" class="headerlink" title="8.2.4 LevelDB消息存储（了解）"></a>8.2.4 LevelDB消息存储（了解）</h3><p>这种文件系统是从ActiveMQ5.8之后引进的，它和KahaDB非常相似，也是<strong>基于文件</strong>的本地数据库储存形式，但是它提供比KahaDB更快的<strong>持久性</strong>。但它不使用自定义B-Tree实现来索引预写日志，而是使用基于LevelDB的索引</p><h3 id="8-2-5-JDBC-Message-store-with-ActiveMQ-Journal"><a href="#8-2-5-JDBC-Message-store-with-ActiveMQ-Journal" class="headerlink" title="8.2.5 JDBC Message store with ActiveMQ Journal"></a>8.2.5 JDBC Message store with ActiveMQ Journal</h3><h2 id="8-3-JDBC消息存储"><a href="#8-3-JDBC消息存储" class="headerlink" title="8.3 JDBC消息存储"></a>8.3 JDBC消息存储</h2><h3 id="8-3-1-lib文件夹中添加数据库驱动jar包"><a href="#8-3-1-lib文件夹中添加数据库驱动jar包" class="headerlink" title="8.3.1 lib文件夹中添加数据库驱动jar包"></a>8.3.1 lib文件夹中添加数据库驱动jar包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 module]<span class="comment"># mv mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar activemq-5.16.3/lib/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-3-2-修改activemq-xml的持久化配置"><a href="#8-3-2-修改activemq-xml的持久化配置" class="headerlink" title="8.3.2 修改activemq.xml的持久化配置"></a>8.3.2 修改activemq.xml的持久化配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;kahaDB directory=&quot;$&#123;activemq.data&#125;/kahadb&quot;/&gt; 原先的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcPersistenceAdapter</span> <span class="attr">dataSource</span>=<span class="string">&quot;#mysql-ds&quot;</span> <span class="attr">createTablesOnStartup</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>dataSource指定将要引用的持久化数据库的bean名称，createTablesOnStartup是否在启动的时候创建数据表，默认值是true，<br>这样每次启动都会去创建数据表了，一般是第一次启动的时候设置为true之后改成false。</p><h3 id="8-3-3-数据源配置"><a href="#8-3-3-数据源配置" class="headerlink" title="8.3.3 数据源配置"></a>8.3.3 数据源配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mysql-ds&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp2.BasicDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://192.168.137.1:3306/activemq?relaxAutoCommit=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true&quot;</span>/&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--XML必须使用转译字符,而且还要加上serverTimezone和useSSL--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tintin&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxTotal&quot;</span> <span class="attr">value</span>=<span class="string">&quot;200&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolPreparedStatements&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3-4-MySQL授予远程连接的权限"><a href="#8-3-4-MySQL授予远程连接的权限" class="headerlink" title="8.3.4 MySQL授予远程连接的权限"></a>8.3.4 MySQL授予远程连接的权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span> HOST,<span class="keyword">USER</span> <span class="keyword">FROM</span> <span class="keyword">USER</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">USER</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;192.168.10.102&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;tintin&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;192.168.10.102&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION</span><br><span class="line">FLUSH PRIVILEGES; # 刷新权限</span><br></pre></td></tr></table></figure><p><a href="%E6%9D%82%E8%AE%B0.md#MySQL%E6%8E%88%E4%BA%88%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9D%83%E9%99%90">MySQL授予远程连接的权限</a></p><h3 id="8-3-5-创建数据库并自动生成表"><a href="#8-3-5-创建数据库并自动生成表" class="headerlink" title="8.3.5 创建数据库并自动生成表"></a>8.3.5 创建数据库并自动生成表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createa DATABASE activemq;</span><br></pre></td></tr></table></figure><table>        <tr><td colspan="2" align="center">ACTIVEMQ_MSGS表</td></tr>         <tr><td>字段</td><td>描述</td></tr>    <tr><td>ID</td><td>自增的数据库主键</td></tr>    <tr><td>CONTAINER</td><td>消息的Destination</td></tr>    <tr><td>MSGID_PROD</td><td>消息发送者的主键</td></tr>    <tr><td>MSG_SEQ</td><td>是发送消息的顺序，MSGID_PROD+MSG_SEQ可以组成JMS的MessagelD</td></tr>    <tr><td>EXPIRATION</td><td>消息的过期时间，存储的是从1970-01-01到现在的毫秒数</td></tr>    <tr><td>MSG</td><td>消息本体的Java序列化对象的二进制数据</td></tr>    <tr><td>PRIORITY</td><td>优先级，从0-9，数值越大优先级越高</td></tr><table><table>        <tr><td colspan="2" align="center">ACTIVEMQ_ACKS表</td></tr>     <tr><td colspan="2">用于存储订阅关系。如果是持久化Topic，订阅者和服务器的订阅关系在这个表保存。</td></tr>    <tr><td>字段</td><td>描述</td></tr>    <tr><td>CONTAINER</td><td>消息的Destination</td></tr>    <tr><td>SUB_DEST</td><td>如果是使用Static集群，这个字段会有集群其他系统的信息</td></tr>    <tr><td>CLIENT_ID</td><td>每个订阅者都必须有一个唯一的客户端ID用以区分</td></tr>    <tr><td>SUB_NAME</td><td>订阅者名称</td></tr>    <tr><td>SELECTOR</td><td>选择器，可以选择只消费满足条件的消息。条件可以用自定义属性实现，可支持多属性AND和OR操作</td></tr>    <tr><td>LAST_ACKED_ID</td><td>记录消费过的消息的ID。</td></tr><table><table>        <tr><td align="center">ACTIVEMQ_LOCK表</td></tr>         <tr><td>表activemq_lock在集群环境中才有用，只有一个Broker可以获得消息，称为Master Broker，其他的只能作为备份等待MasterBroker不可用，才可能成为下一个Master Broker。这个表用于记录哪个Broker是当前的Master Broker。</td></tr><table><h3 id="8-3-6-代码验证以及数据库情况"><a href="#8-3-6-代码验证以及数据库情况" class="headerlink" title="8.3.6 代码验证以及数据库情况"></a>8.3.6 代码验证以及数据库情况</h3><p>在点对点类型中<br>当DeliveryMode设置为NON_PERSISTENCE时，消息被保存在内存中；<br>当DeliveryMode设置为PERSISTENCE时，消息保存在broker的相应的文件或者数据库中。<br>而且点对点类型中消息一旦被Consumer消费就从broker中删除。</p><p><img src="/2022/04/04/ActiveMQ/image-20211230203911552.png" alt="image-20211230203911552"></p><p><img src="/2022/04/04/ActiveMQ/image-20211230203923363.png" alt="image-20211230203923363"></p><p>在发布订阅类型中</p><p>订阅者和服务器的订阅关系在ACTIVEMQ_ACKS表保存。</p><p><img src="/2022/04/04/ActiveMQ/image-20211230210844650.png" alt="image-20211230210844650"></p><h3 id="8-3-7-填坑"><a href="#8-3-7-填坑" class="headerlink" title="8.3.7 填坑"></a>8.3.7 填坑</h3><p>数据库jar包<br>记得需要使用到的相关jar文件放置到ActiveMQ安装路径下的lib目录。mysqI-jdbc驱动的jar包和对应的数据库连接池jar包<br>createTablesOnStartup属性</p><p>在jdbcPersistenceAdapter标签中设置了createTablesOnStartup属性为true时在第一次启动ActiveMQ时，ActiveMQ服务节点会自动创建所需要的数据表。启动完成后可以去掉这个属性，或者更改createTablesOnStartup属性为false。</p><p>下滑线坑爹<br>“java.lang.lllegalStateException:BeanFactory not initialized or already closed”这是因为您的操作系统的机器名中有“_”符号。请更改机器名并且重启后即可解决问题。</p><h2 id="8-4-JDBC-Message-store-with-ActiveMQ-Journal"><a href="#8-4-JDBC-Message-store-with-ActiveMQ-Journal" class="headerlink" title="8.4 JDBC Message store with ActiveMQ Journal"></a>8.4 JDBC Message store with ActiveMQ Journal</h2><p>这种方式克服了JDBC Store的不足，JDBC每次消息过来，都需要去写库和读库。<br>ActiveMQ Journal，使用高速缓存写入技术，大大提高了性能。<br>当<strong>消费者的消费速度能够及时跟上生产者消息的生产速度</strong>时，journal文件能够大大减少需要写入到DB中的消息。</p><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceFactory</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">journalPersistenceAdapterFactory</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">journalLogFiles</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">journalLogFileSize</span>=<span class="string">&quot;32768&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">useJournal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">useQuickJournal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">dataSource</span>=<span class="string">&quot;#mysql-ds&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">dataDirectory</span>=<span class="string">&quot;activemq-data&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">persistenceFactory</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">&lt;!--&lt;persistenceAdapter&gt;--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;kahaDB directory=&quot;$&#123;activemq.data&#125;/kahadb&quot;/&gt; 原先的配置--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;jdbcPersistenceAdapter dataSource=&quot;#mysql-ds&quot; createTablesOnStartup=&quot;false&quot;/&gt;</span></span><br><span class="line"><span class="comment"> &lt;/persistenceAdapter&gt;--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-5-持久化机制总结"><a href="#8-5-持久化机制总结" class="headerlink" title="8.5 持久化机制总结"></a>8.5 持久化机制总结</h2><p><img src="/2022/04/04/ActiveMQ/image-20211230214753485.png" alt="image-20211230214753485"></p><h1 id="9-ActiveMQ的多节点集群"><a href="#9-ActiveMQ的多节点集群" class="headerlink" title="9 ActiveMQ的多节点集群"></a>9 ActiveMQ的多节点集群</h1><p>基于ZooKeeper和LevelDB搭建ActiveMQ集群。</p><p>集群仅提供主备方式的高可用集群功能， 避免单点故障。<br>.</p><h2 id="9-1-三种集群方式"><a href="#9-1-三种集群方式" class="headerlink" title="9.1 三种集群方式"></a>9.1 三种集群方式</h2><p>基于sharedFileSystem共享文件系统</p><p><img src="/2022/04/04/ActiveMQ/image-20211231135735442.png" alt="image-20211231135735442"></p><p>基于JDBC</p><p>基于Replicated Level DB</p><p><img src="/2022/04/04/ActiveMQ/image-20211231140136788.png" alt="image-20211231140136788"></p><p>已弃用</p><h2 id="9-2-基于Replicated-Level-DB集群配置部署"><a href="#9-2-基于Replicated-Level-DB集群配置部署" class="headerlink" title="9.2 基于Replicated Level DB集群配置部署"></a>9.2 基于Replicated Level DB集群配置部署</h2><h3 id="9-2-1-环境"><a href="#9-2-1-环境" class="headerlink" title="9.2.1 环境"></a>9.2.1 环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 module]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.5.1804 (Core) </span><br></pre></td></tr></table></figure><p>activemq-5.16.3  </p><p>jdk1.8.0_311  </p><p>zookeeper-3.5.7</p><h3 id="9-2-2-单机部署规划"><a href="#9-2-2-单机部署规划" class="headerlink" title="9.2.2 单机部署规划"></a>9.2.2 单机部署规划</h3><p><img src="/2022/04/04/ActiveMQ/image-20211231141647433.png" alt="image-20211231141647433"></p><h3 id="9-2-3-配置zk集群"><a href="#9-2-3-配置zk集群" class="headerlink" title="9.2.3 配置zk集群"></a>9.2.3 配置zk集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 mq_cluster]<span class="comment"># mkdir /zk_culster/</span></span><br><span class="line">[root@hadoop102 zk_cluster]<span class="comment"># cp -r /opt/module/zookeeper-3.5.7/ zk_node01</span></span><br><span class="line">[root@hadoop102 zk_cluster]<span class="comment"># cp -r /opt/module/zookeeper-3.5.7/ zk_node02</span></span><br><span class="line">[root@hadoop102 zk_cluster]<span class="comment"># cp -r /opt/module/zookeeper-3.5.7/ zk_node03</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># zoo.cfg</span></span><br><span class="line">dataDir=/zk_cluster/zk_node01/zkData</span><br><span class="line">clientPort=<span class="number">2191</span></span><br><span class="line"><span class="meta"># server.几号服务器=服务器地址:follower与leader交换信息的端口：挂掉后选举新leader后的端口 </span></span><br><span class="line">#################<span class="meta">#cluster########################</span></span><br><span class="line">server<span class="number">.1</span>=hadoop102:<span class="number">2881</span>:<span class="number">3881</span></span><br><span class="line">server<span class="number">.2</span>=hadoop102:<span class="number">2882</span>:<span class="number">3882</span></span><br><span class="line">server<span class="number">.3</span>=hadoop102:<span class="number">2883</span>:<span class="number">3883</span>                             </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 zk_culster]<span class="comment"># echo 1 &gt; zk_node01/zkData/myid</span></span><br><span class="line">[root@hadoop102 zk_culster]<span class="comment"># echo 2 &gt; zk_node02/zkData/myid</span></span><br><span class="line">[root@hadoop102 zk_culster]<span class="comment"># echo 3 &gt; zk_node03/zkData/myid</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-2-4-创建mq集群目录"><a href="#9-2-4-创建mq集群目录" class="headerlink" title="9.2.4 创建mq集群目录"></a>9.2.4 创建mq集群目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 module]<span class="comment"># mkdir /mq_cluster/</span></span><br><span class="line">[root@hadoop102 module]<span class="comment"># cd /mq_cluster/</span></span><br><span class="line">[root@hadoop102 mq_cluster]<span class="comment"># cp -r /opt/module/activemq-5.16.3/ mq_node01</span></span><br><span class="line">[root@hadoop102 mq_cluster]<span class="comment"># cp -r mq_node01 mq_node02</span></span><br><span class="line">[root@hadoop102 mq_cluster]<span class="comment"># cp -r mq_node01 mq_node03</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-2-5-修改管理前台的端口"><a href="#9-2-5-修改管理前台的端口" class="headerlink" title="9.2.5 修改管理前台的端口"></a>9.2.5 修改管理前台的端口</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jetty.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;8162&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-2-6-集群配置"><a href="#9-2-6-集群配置" class="headerlink" title="9.2.6 集群配置"></a>9.2.6 集群配置</h3><p>brokerName一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 mq_cluster]<span class="comment"># vim mq_node01/conf/activemq.xml</span></span><br><span class="line">[root@hadoop102 mq_cluster]<span class="comment"># vim mq_node02/conf/activemq.xml</span></span><br><span class="line">[root@hadoop102 mq_cluster]<span class="comment"># vim mq_node03/conf/activemq.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改为本机对应域名 而不是localhost--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">broker</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://activemq.apache.org/schema/core&quot;</span> <span class="attr">brokerName</span>=<span class="string">&quot;hadoop102&quot;</span> <span class="attr">dataDirectory</span>=<span class="string">&quot;$&#123;activemq.data&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>持久化配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">replicatedLevelDB</span></span></span><br><span class="line"><span class="tag">                <span class="attr">directory</span>=<span class="string">&quot;$&#123;activemq.data&#125;/leveldb&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">replicas</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">bind</span>=<span class="string">&quot;tcp://0.0.0.0:63631&quot;</span> &lt;!<span class="attr">--63631</span> <span class="attr">63631--</span>&gt;</span></span><br><span class="line">                zkAddress=&quot;hadoop102:2191,hadoop102:2192,hadoop102:2193&quot;</span><br><span class="line">                sync=&quot;local_disk&quot;</span><br><span class="line">                zkPath=&quot;/activemq/leveldb-stores&quot;</span><br><span class="line">                hostname=&quot;hadoop102&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-2-7-修改消息端口"><a href="#9-2-7-修改消息端口" class="headerlink" title="9.2.7 修改消息端口"></a>9.2.7 修改消息端口</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">&quot;openwire&quot;</span> <span class="attr">uri</span>=<span class="string">&quot;tcp://0.0.0.0:61618?maximumConnections=1000<span class="symbol">&amp;amp;</span>wireFormat.maxFrameSize=104857600&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-2-8-启动zk集群后启动mq集群"><a href="#9-2-8-启动zk集群后启动mq集群" class="headerlink" title="9.2.8 启动zk集群后启动mq集群"></a>9.2.8 启动zk集群后启动mq集群</h3><p><img src="/2022/04/04/ActiveMQ/image-20211231155350713.png" alt="image-20211231155350713"></p><p>查看zk状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 zk_cluster]<span class="comment"># zk_node01/bin/zkCli.sh -server hadoop102:2191</span></span><br><span class="line"></span><br><span class="line">[zk: hadoop102:2191(CONNECTED) 1] <span class="built_in">ls</span> /</span><br><span class="line">[activemq, zookeeper]</span><br><span class="line">[zk: hadoop102:2191(CONNECTED) 2] <span class="built_in">ls</span> /activemq</span><br><span class="line">[leveldb-stores]</span><br><span class="line">[zk: hadoop102:2191(CONNECTED) 3] <span class="built_in">ls</span> /activemq/leveldb-stores</span><br><span class="line">[00000000000, 00000000001, 00000000003]</span><br><span class="line">[zk: hadoop102:2191(CONNECTED) 5] get /activemq/leveldb-stores/00000000000</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;hadoop102&quot;</span>,<span class="string">&quot;container&quot;</span>:null,<span class="string">&quot;address&quot;</span>:<span class="string">&quot;tcp://hadoop102:63631&quot;</span>,<span class="string">&quot;position&quot;</span>:-1,<span class="string">&quot;weight&quot;</span>:1,<span class="string">&quot;elected&quot;</span>:<span class="string">&quot;0000000000&quot;</span>&#125;</span><br><span class="line">[zk: hadoop102:2191(CONNECTED) 6] get /activemq/leveldb-stores/00000000001</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;hadoop102&quot;</span>,<span class="string">&quot;container&quot;</span>:null,<span class="string">&quot;address&quot;</span>:null,<span class="string">&quot;position&quot;</span>:-1,<span class="string">&quot;weight&quot;</span>:1,<span class="string">&quot;elected&quot;</span>:null&#125;</span><br><span class="line">[zk: hadoop102:2191(CONNECTED) 8] get /activemq/leveldb-stores/00000000003</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;hadoop102&quot;</span>,<span class="string">&quot;container&quot;</span>:null,<span class="string">&quot;address&quot;</span>:null,<span class="string">&quot;position&quot;</span>:-1,<span class="string">&quot;weight&quot;</span>:1,<span class="string">&quot;elected&quot;</span>:null&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mq集群挂载zk成功</p><p>查看mq状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 zk_cluster]<span class="comment"># ps -ef| grep activemq| grep -v grep</span></span><br><span class="line">root       2776      1  2 15:50 pts/0    00:00:27 /opt/module/jdk1.8.0_311/bin/java -Xms64M -Xmx1G -Djava.util.logging.config.file=logging.properties -Djava.security.auth.login.config=/mq_cluster/mq_node01//conf/login.config -Dcom.sun.management.jmxremote -Djava.awt.headless=<span class="literal">true</span> -Djava.io.tmpdir=/mq_cluster/mq_node01//tmp -Dactivemq.classpath=/mq_cluster/mq_node01//conf:/mq_cluster/mq_node01//../lib/: -Dactivemq.home=/mq_cluster/mq_node01/ -Dactivemq.base=/mq_cluster/mq_node01/ -Dactivemq.conf=/mq_cluster/mq_node01//conf -Dactivemq.data=/mq_cluster/mq_node01//data -jar /mq_cluster/mq_node01//bin/activemq.jar start</span><br><span class="line">root       2863      1  1 15:50 pts/0    00:00:13 /opt/module/jdk1.8.0_311/bin/java -Xms64M -Xmx1G -Djava.util.logging.config.file=logging.properties -Djava.security.auth.login.config=/mq_cluster/mq_node02//conf/login.config -Dcom.sun.management.jmxremote -Djava.awt.headless=<span class="literal">true</span> -Djava.io.tmpdir=/mq_cluster/mq_node02//tmp -Dactivemq.classpath=/mq_cluster/mq_node02//conf:/mq_cluster/mq_node02//../lib/: -Dactivemq.home=/mq_cluster/mq_node02/ -Dactivemq.base=/mq_cluster/mq_node02/ -Dactivemq.conf=/mq_cluster/mq_node02//conf -Dactivemq.data=/mq_cluster/mq_node02//data -jar /mq_cluster/mq_node02//bin/activemq.jar start</span><br><span class="line">root       3394      1  1 15:53 pts/0    00:00:09 /opt/module/jdk1.8.0_311/bin/java -Xms64M -Xmx1G -Djava.util.logging.config.file=logging.properties -Djava.security.auth.login.config=/mq_cluster/mq_node03//conf/login.config -Dcom.sun.management.jmxremote -Djava.awt.headless=<span class="literal">true</span> -Djava.io.tmpdir=/mq_cluster/mq_node03//tmp -Dactivemq.classpath=/mq_cluster/mq_node03//conf:/mq_cluster/mq_node03//../lib/: -Dactivemq.home=/mq_cluster/mq_node03/ -Dactivemq.base=/mq_cluster/mq_node03/ -Dactivemq.conf=/mq_cluster/mq_node03//conf -Dactivemq.data=/mq_cluster/mq_node03//data -jar /mq_cluster/mq_node03//bin/activemq.jar start</span><br><span class="line"></span><br><span class="line">[root@hadoop102 zk_cluster]<span class="comment"># netstat -anp |grep 8161</span></span><br><span class="line">tcp6       0      0 :::8161                 :::*                    LISTEN      2776/java           </span><br><span class="line">[root@hadoop102 zk_cluster]<span class="comment"># netstat -anp |grep 8162</span></span><br><span class="line">[root@hadoop102 zk_cluster]<span class="comment"># netstat -anp |grep 8163</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>仅一个端口正在运行能被访问</p><h2 id="9-3-集群可用性测试"><a href="#9-3-集群可用性测试" class="headerlink" title="9.3 集群可用性测试"></a>9.3 集群可用性测试</h2><p>ActiveMQ的客户端只能访问Master的Broker,其他处于Slave的Broker不能访问，所以客户端连接的Broker应该使用failover协议(失败转移)</p><p>当一个ActiveMQ节点挂掉或者一个Zookeeper节点挂掉，ActiveMQ服务依然正常运转，如果仅剩一个ActiveMQ节点,由于不能选举Master，所以ActiveMQ不能正常运行；</p><p>同样的,如果Zookeeper仅剩一个节点活动，不管ActiveMQ各节点存活，ActiveMQ也不能正常提供服务。(ActiveMQ集群的高<br>可用，依赖于Zookeeper集群的高可用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACTIVEMQ_URL_CLUSTER</span> <span class="operator">=</span> <span class="string">&quot;failover:(tcp://192.168.10.102:61616,tcp://192.168.10.102:61617,tcp://192.168.10.102:61618)?randomize=false&quot;</span>;<span class="comment">//失败转移协议的访问url</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME_CLUSTER</span> <span class="operator">=</span> <span class="string">&quot;queue1&quot;</span>;</span><br></pre></td></tr></table></figure><p>干掉master端口 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 mq_node02]<span class="comment"># kill -9 2776</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="10-高级特性与面试"><a href="#10-高级特性与面试" class="headerlink" title="10 高级特性与面试"></a>10 高级特性与面试</h1><h2 id="10-1-异步投递"><a href="#10-1-异步投递" class="headerlink" title="10.1 异步投递"></a>10.1 异步投递</h2><p>ActiveMQ支持同步、异步两种发送的模式将消息发送到broker,模式的选择对发送更(产出率&#x3D;发送数据总量&#x2F;时间)主要受发送延时的影响，使用异步发送可以显著的提高发送的性能。</p><p>ActiveMQ默认使用异步发送的模式：除非明确指定使用同步发送的方式或者在未使用事务的前提下发送持久化的消息，这两种情况<br>都是同步发送的。</p><p><strong>同步发送</strong></p><p>如果你没有使用事务且发送的是持久化的消息，每一次发送都是同步发送的且会阻塞producer直到broker返回一个确认，表示消息已<br>经被安全的持久化到磁盘。确认机制提供了消息安全的保障，但同时会阻塞客户端带来了很大的延时。</p><p><strong>异步发送</strong></p><p>很多高性能的应用，允许在失败的情况下有少量的数据丢失。如果你的应用满足这个特点，你可以使用异步发送来提高生产率，即使<br>发送的是持久化的消息。</p><p>它可以最大化produer端的发送效率。我们通常在发送消息量比较密集的情况下使用异步发送，它可以很大的提升Producer性能；<br>不过这也带来了额外的问题，就是需要消耗较多的Client端内存同时也会导致broker端性能消耗增加；此外它不能有效的确保消息的发送成功。在useAsyncSend&#x3D;true的情况下客户端需要容忍消息丢失的可能。</p><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">        activeMQConnectionFactory.setUseAsyncSend(<span class="literal">true</span>);<span class="comment">//开启异步投递</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//异步投递，成功后将执行消息回调函数</span></span><br><span class="line">            textMessage = session.createTextMessage(<span class="string">&quot;msg&quot;</span> + (i + <span class="number">1</span>));</span><br><span class="line">            textMessage.setJMSMessageID(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">6</span>) + <span class="string">&quot;---tintin&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msgID</span> <span class="operator">=</span> textMessage.getJMSMessageID();</span><br><span class="line">            messageProducer.send(textMessage, <span class="keyword">new</span> <span class="title class_">AsyncCallback</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">                    System.out.println(msgID + <span class="string">&quot;has been sent successfully&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(JMSException e)</span> &#123;</span><br><span class="line">                    System.out.println(msgID + <span class="string">&quot;failed to send&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="10-2-延时投递"><a href="#10-2-延时投递" class="headerlink" title="10.2 延时投递"></a>10.2 延时投递</h2><table><thead><tr><th>Property name</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>AMQ_SCHEDULED_DELAY</td><td>long</td><td>延迟投递的时间</td></tr><tr><td>AMQ_SCHEDULED_PERIOD</td><td>long</td><td>重复投递的时间间隔</td></tr><tr><td>AMQ_SCHEDULED_REPEAT</td><td>int</td><td>重复投递次数</td></tr><tr><td>AMQ_SCHEDULED_CRON</td><td>String</td><td>Cron表达式</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--activemq.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">broker</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://activemq.apache.org/schema/core&quot;</span> <span class="attr">brokerName</span>=<span class="string">&quot;localhost&quot;</span> <span class="attr">dataDirectory</span>=<span class="string">&quot;$&#123;activemq.data&#125;&quot;</span> <span class="attr">schedulerSupport</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">textMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY,<span class="number">3000</span>);</span><br><span class="line">         textMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD,<span class="number">4000</span>);</span><br><span class="line">         textMessage.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT,<span class="number">5</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-3-消息重试"><a href="#10-3-消息重试" class="headerlink" title="10.3 消息重试"></a>10.3 消息重试</h2><p><strong>引起消息重发的原因</strong></p><ol><li>Client用了transactions且在session中调用了rollback()</li><li>Client用了transactions且在调用commit()之前关闭或者没有commit</li><li>Client在CLIENT_ACKNOWLEDGE的传递模式下，在session中调用了recover()</li></ol><p><strong>重发间隔</strong>：1</p><p><strong>重发次数</strong>：6（引起消息重发6次后将不会再重发）</p><p><strong>有毒消息</strong>：</p><p>一个消息初redelivedred 超过默认的最大重发次数（默认6次）时，消费端会给MQ发送一个”poison ack”告诉broker不要再发了。这个时候 broker 会把这个消息放到 DLQ（死信队列）</p><p><img src="/2022/04/04/ActiveMQ/image-20220101161150929.png" alt="image-20220101161150929"></p><p><strong>属性</strong></p><p><img src="/2022/04/04/ActiveMQ/image-20220101160849517.png" alt="image-20220101160849517"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不整合spring直接set属性</span></span><br><span class="line"><span class="type">RedeliveryPolicy</span> <span class="variable">redeliveryPolicy</span> <span class="operator">=</span> newRedeliveryPolicy(）;</span><br><span class="line">redeliveryPolicy.setMaximumRedeliveries(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/ActiveMQ/image-20220101162248225.png" alt="image-20220101162248225"></p><h2 id="10-4-死信队列"><a href="#10-4-死信队列" class="headerlink" title="10.4 死信队列"></a>10.4 死信队列</h2><p>ActiveMQ中的概念。即一条消息再被重发了多次后（默认为重发6次redeliveryCounter&#x3D;&#x3D;6），将会被ActiveMQ移入“死信队列”。开发人员可以在这个Queue中查看处理出错的消息，进行人工干预</p><p><img src="/2022/04/04/ActiveMQ/image-20220101161150929.png" alt="image-20220101161150929"></p><p><img src="/2022/04/04/ActiveMQ/image-20220101163114978.png" alt="image-20220101163114978"></p><p>将所有的DeadLetter保存在一个共享的队列中，这是ActiveMQ broker端默认的策略。共享队列默认为“ActiveMQ.DLQ”，可以通过“deadLetterQueue”属性来设定。</p><p><img src="/2022/04/04/ActiveMQ/image-20220101163651574.png" alt="image-20220101163651574"></p><p>也可以指定对应的死信队列</p><p><img src="/2022/04/04/ActiveMQ/image-20220101163749051.png" alt="image-20220101163749051"></p><p><img src="/2022/04/04/ActiveMQ/image-20220101163737840.png" alt="image-20220101163737840"></p><p><img src="/2022/04/04/ActiveMQ/image-20220101163906587.png" alt="image-20220101163906587"><img src="/2022/04/04/ActiveMQ/image-20220101163919118.png" alt="image-20220101163919118"></p><h2 id="10-5-保证消息不重复消费"><a href="#10-5-保证消息不重复消费" class="headerlink" title="10.5 保证消息不重复消费"></a>10.5 保证消息不重复消费</h2><p>网络延迟传输中，会造成进行MQ重试中，在重试过程中，可能会造成<strong>重复消费</strong>。</p><p>如果消息是做数据库的插入操作，给这个消息做一个<strong>唯一主键</strong>，那么就算出现重复消费的情况，就会导致主键冲突，避免数据库出现脏数据。</p><p>如果上面两种情况还不行，准备一个第三服务方来做消费记录。以<strong>redis</strong>为例，给消息分配一个全局id，只要消费过该消息，将&lt;id,message&gt;以K-V形式写入redis。那消费者开始消费前，先去redis中查询有没消费记录即可。</p><p><strong>幂等性问题</strong></p><p><strong>幂等性：就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。</strong>举个最简单的例子，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额发现多扣钱了，流水记录也变成了两条。在以前的单应用系统中，我们只需要把数据操作放入事务中即可，发生错误立即回滚，但是再响应客户端的时候也有可能出现网络中断或者异常等等。</p></table></table></table></table></table></table>]]></content>
      
      
      <categories>
          
          <category> 微服务生态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git分布式版本控制系统</title>
      <link href="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211104141620930.png" alt="image-20211104141620930"></p><span id="more"></span><h1 id="试验环境"><a href="#试验环境" class="headerlink" title="试验环境"></a>试验环境</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 ~</span><br><span class="line">$ git --version</span><br><span class="line">git version 2.33.1.windows.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="1-Git概述"><a href="#1-Git概述" class="headerlink" title="1 Git概述"></a>1 Git概述</h1><p>​    Git是一个免费的、开源的<strong>分布式版本控制系统</strong>,可以快速高效地处理从小型到大型的各种项目<br>​    Git易于学习,占地面积小,性能极快。它具有廉价的本地库,方便的暂存区域和多个工作流分支等特性。其性能优于 Subversion、CVS、 Perforce和 Clear Case等版本控制工具。</p><h2 id="1-1-什么是版本控制"><a href="#1-1-什么是版本控制" class="headerlink" title="1.1 什么是版本控制"></a>1.1 什么是版本控制</h2><p>​    版本控制是一种记录文件内容变化,以便将来<strong>査阅特定版本修订情况</strong>的系统。<br>​    版本控制其实最重要的是可以记录文件修改历史记录,从而让用户能够查看历史版本方便版本切换。</p><h2 id="1-2-为什么要版本控制"><a href="#1-2-为什么要版本控制" class="headerlink" title="1.2 为什么要版本控制"></a>1.2 为什么要版本控制</h2><p>个人开发过渡到团队协作</p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211104144652304.png" alt="image-20211104144652304"></p><h2 id="1-3-版本控制工具"><a href="#1-3-版本控制工具" class="headerlink" title="1.3 版本控制工具"></a>1.3 版本控制工具</h2><ul><li><p>集中式版本控制工具</p><p>CVS、**SVN(Subversion)**、VSS…</p><ul><li>集中化的版本控制系统诸如CVS、SVN等,都有一个<strong>单一的集中管理的服务器,保存所有文件的修订版本</strong>,而协同工作的人们都通过客户端连到这台服务器,取出最新的文件或者提交更新。多年以来,这已成为版本控制系统的标准做法。</li><li>这种做法带来了许多好处,每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限,并且管理一个集中化的版本控制系统,要远比在各个客户端上维护本地数据库来得轻松容易。</li><li>事分两面,有好有坏。这么做显而易见的缺点是<strong>中央服务器的单点故障</strong>。如果服务器宕机一小时,那么在这一小时内,谁都无法提交更新,也就无法协同工作。</li></ul></li><li><p>分布式版本控制工具</p><p>Git、Mercurial、Bazaar、Darcs…</p><ul><li><p>像Git这种分布式版本控制工具,客户端提取的不是最新版本的文件快照,而是把代码仓库完整地镜像下来(本地库)。这样任何一处协同工作用的文件发生故障,事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作,实际上都是一次对整个文件仓库的完整备份。</p></li><li><p>分布式的版本控制系统出现之后解决了集中式版本控制系统的缺陷</p><ol><li>服务器断网的情况下也可以进行开发(因为版本控制是在本地进行的)</li><li>每个客户端保存的也都是整个完整的项目(包含历史记录,更加安全)</li></ol></li></ul></li></ul><h2 id="1-3-Git历史"><a href="#1-3-Git历史" class="headerlink" title="1.3 Git历史"></a>1.3 Git历史</h2><p>​    <img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211104171619674.png" alt="image-20211104171619674"> </p><h2 id="1-5-工作机制"><a href="#1-5-工作机制" class="headerlink" title="1.5 工作机制"></a>1.5 工作机制</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211104172501233.png" alt="image-20211104172501233"></p><h2 id="1-6-Git和代码托管中心"><a href="#1-6-Git和代码托管中心" class="headerlink" title="1.6 Git和代码托管中心"></a>1.6 Git和代码托管中心</h2><p>代码托管中心是基于网络服务器的远程代码仓库,一般我们简单称为<strong>远程库</strong></p><ul><li>局域网<br>GitLab</li><li>互联网<br>Github(外网)<br>Gitee码云(国内网站)</li></ul><h1 id="2-Git安装"><a href="#2-Git安装" class="headerlink" title="2 Git安装"></a>2 Git安装</h1><p><a href="GitHub+Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.md#2Git%E5%AE%89%E8%A3%85">Git安装</a></p><h1 id="3-Git常用命令"><a href="#3-Git常用命令" class="headerlink" title="3 Git常用命令"></a>3 Git常用命令</h1><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户签名</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭</td></tr></tbody></table><h2 id="3-1-设置用户签名"><a href="#3-1-设置用户签名" class="headerlink" title="3.1 设置用户签名"></a>3.1 设置用户签名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/桌面</span><br><span class="line">$ git config --global user.name Tintin</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/桌面</span><br><span class="line">$ git config --global user.email 821294434@qq.com</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/桌面</span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 ~</span><br><span class="line">$ <span class="built_in">cat</span> ./.gitconfig</span><br><span class="line">[filter <span class="string">&quot;lfs&quot;</span>]</span><br><span class="line">        clean = git-lfs clean -- %f</span><br><span class="line">        smudge = git-lfs smudge -- %f</span><br><span class="line">        process = git-lfs filter-process</span><br><span class="line">        required = <span class="literal">true</span></span><br><span class="line">[user]</span><br><span class="line">        name = Tintin</span><br><span class="line">        email = 821294434@qq.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明:<br>签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到,以此确认本次提交是谁做的。Git首次安裝必须设置一下用户签名,否则无法提交代码。</p><blockquote><p>※注意:这里设置用户签名和将来登录 Github(或其他代码托管中心)的账号没有任何关系。 </p></blockquote><h2 id="3-2-初始化本地库"><a href="#3-2-初始化本地库" class="headerlink" title="3.2 初始化本地库"></a>3.2 初始化本地库</h2><p>初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> E:/git Repository/test/.git/</span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br></pre></td></tr></table></figure><p>查看.git文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ ll -a</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 1 82129 197609 0 Nov  4 18:06 ./</span><br><span class="line">drwxr-xr-x 1 82129 197609 0 Nov  4 18:06 ../</span><br><span class="line">drwxr-xr-x 1 82129 197609 0 Nov  4 18:06 .git/</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ <span class="built_in">cd</span> .git</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test/.git (GIT_DIR!)</span><br><span class="line">$ ll</span><br><span class="line">total 7</span><br><span class="line">-rw-r--r-- 1 82129 197609  23 Nov  4 18:06 HEAD</span><br><span class="line">-rw-r--r-- 1 82129 197609 130 Nov  4 18:06 config</span><br><span class="line">-rw-r--r-- 1 82129 197609  73 Nov  4 18:06 description</span><br><span class="line">drwxr-xr-x 1 82129 197609   0 Nov  4 18:06 hooks/</span><br><span class="line">drwxr-xr-x 1 82129 197609   0 Nov  4 18:06 info/</span><br><span class="line">drwxr-xr-x 1 82129 197609   0 Nov  4 18:06 objects/</span><br><span class="line">drwxr-xr-x 1 82129 197609   0 Nov  4 18:06 refs/</span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211104180722931.png" alt="image-20211104180722931"></p><h2 id="3-3-查看本地库状态"><a href="#3-3-查看本地库状态" class="headerlink" title="3.3 查看本地库状态"></a>3.3 查看本地库状态</h2><p>第一次查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">nothing to commit (create/copy files and use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure><p>新建文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ vim hello.txt</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ <span class="built_in">cat</span> hello.txt</span><br><span class="line">hello tintin! hello git!</span><br><span class="line">hello tintin! hello git!</span><br><span class="line"></span><br><span class="line">hello tintin! hello git!</span><br><span class="line"></span><br><span class="line">hello tintin! hello git!</span><br><span class="line"></span><br><span class="line">hello tintin! hello git!</span><br><span class="line"></span><br><span class="line">hello tintin! hello git!</span><br><span class="line"></span><br><span class="line">hello tintin! hello git!</span><br><span class="line"></span><br><span class="line">hello tintin! hello git!</span><br></pre></td></tr></table></figure><p>查看状态（检测到为追踪的文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        hello.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4-添加到暂存区"><a href="#3-4-添加到暂存区" class="headerlink" title="3.4 添加到暂存区"></a>3.4 添加到暂存区</h2><p>将工作区文件添加到暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git add hello.txt</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看状态（检测到暂存区有新文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        new file:   hello.txt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除暂存区的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git <span class="built_in">rm</span> --cached hello.txt</span><br><span class="line"><span class="built_in">rm</span> <span class="string">&#x27;hello.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ ll</span><br><span class="line">total 1</span><br><span class="line">-rw-r--r-- 1 82129 197609 209 Nov  4 19:28 hello.txt</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        hello.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-5-提交本地库"><a href="#3-5-提交本地库" class="headerlink" title="3.5 提交本地库"></a>3.5 提交本地库</h2><p>将暂存区的文件提交到本地库中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git commit -m <span class="string">&quot;V1&quot;</span> hello.txt</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">[master (root-commit) a5908a3] V1</span><br><span class="line"> 1 file changed, 17 insertions(+)</span><br><span class="line"> create mode 100644 hello.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看状态（没有文件需要提交）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git reflog</span><br><span class="line">a5908a3 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (initial): V1</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit a5908a39aa3e94eeb24a33dd76c337e7dca09f91 (HEAD -&gt; master)</span><br><span class="line">Author: Tintin &lt;821294434@qq.com&gt;</span><br><span class="line">Date:   Thu Nov 4 19:36:57 2021 +0800</span><br><span class="line"></span><br><span class="line">    V1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-6-修改文件"><a href="#3-6-修改文件" class="headerlink" title="3.6 修改文件"></a>3.6 修改文件</h2><p>修改后查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ vim hello.txt</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改的文件添加到暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git add hello.txt</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>撤销修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git restore --staged hello.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加到本地库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git commit -m <span class="string">&quot;V3&quot;</span> hello.txt</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">[master 94bbf6f] V3</span><br><span class="line"> 1 file changed, 1 insertion(+), 2 deletions(-)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git reflog</span><br><span class="line">94bbf6f (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: V3</span><br><span class="line">f07c8f3 HEAD@&#123;1&#125;: commit: V2</span><br><span class="line">a5908a3 HEAD@&#123;2&#125;: commit (initial): V1</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 94bbf6f479ea90808f2a67f4076f7be0de90594b (HEAD -&gt; master)</span><br><span class="line">Author: Tintin &lt;821294434@qq.com&gt;</span><br><span class="line">Date:   Thu Nov 4 19:51:42 2021 +0800</span><br><span class="line"></span><br><span class="line">    V3</span><br><span class="line"></span><br><span class="line">commit f07c8f3c3ba34ef871aca2a01aa7749d08a5a64b</span><br><span class="line">Author: Tintin &lt;821294434@qq.com&gt;</span><br><span class="line">Date:   Thu Nov 4 19:46:44 2021 +0800</span><br><span class="line"></span><br><span class="line">    V2</span><br><span class="line"></span><br><span class="line">commit a5908a39aa3e94eeb24a33dd76c337e7dca09f91</span><br><span class="line">Author: Tintin &lt;821294434@qq.com&gt;</span><br><span class="line">Date:   Thu Nov 4 19:36:57 2021 +0800</span><br><span class="line"></span><br><span class="line">    V1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-7-查看历史版本"><a href="#3-7-查看历史版本" class="headerlink" title="3.7 查看历史版本"></a>3.7 查看历史版本</h2><p>查看历史版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git reflog</span><br><span class="line">94bbf6f (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: V3</span><br><span class="line">f07c8f3 HEAD@&#123;1&#125;: commit: V2</span><br><span class="line">a5908a3 HEAD@&#123;2&#125;: commit (initial): V1</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 94bbf6f479ea90808f2a67f4076f7be0de90594b (HEAD -&gt; master)</span><br><span class="line">Author: Tintin &lt;821294434@qq.com&gt;</span><br><span class="line">Date:   Thu Nov 4 19:51:42 2021 +0800</span><br><span class="line"></span><br><span class="line">    V3</span><br><span class="line"></span><br><span class="line">commit f07c8f3c3ba34ef871aca2a01aa7749d08a5a64b</span><br><span class="line">Author: Tintin &lt;821294434@qq.com&gt;</span><br><span class="line">Date:   Thu Nov 4 19:46:44 2021 +0800</span><br><span class="line"></span><br><span class="line">    V2</span><br><span class="line"></span><br><span class="line">commit a5908a39aa3e94eeb24a33dd76c337e7dca09f91</span><br><span class="line">Author: Tintin &lt;821294434@qq.com&gt;</span><br><span class="line">Date:   Thu Nov 4 19:36:57 2021 +0800</span><br><span class="line"></span><br><span class="line">    V1</span><br></pre></td></tr></table></figure><p>版本穿梭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git reflog</span><br><span class="line">94bbf6f (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: V3</span><br><span class="line">f07c8f3 HEAD@&#123;1&#125;: commit: V2</span><br><span class="line">a5908a3 HEAD@&#123;2&#125;: commit (initial): V1</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git reset --hard f07c8f3</span><br><span class="line">HEAD is now at f07c8f3 V2</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git reflog</span><br><span class="line">f07c8f3 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to f07c8f3</span><br><span class="line">94bbf6f HEAD@&#123;1&#125;: commit: V3</span><br><span class="line">f07c8f3 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: V2</span><br><span class="line">a5908a3 HEAD@&#123;3&#125;: commit (initial): V1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Git切换版本,底层其实是移动的HEAD指针,具体原理如下图所示。</p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211104201727564.png" alt="image-20211104201727564"></p><h1 id="4-Git分支操作"><a href="#4-Git分支操作" class="headerlink" title="4 Git分支操作"></a>4 Git分支操作</h1><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211104201821515.png" alt="image-20211104201821515"></p><h2 id="4-1-什么是分支"><a href="#4-1-什么是分支" class="headerlink" title="4.1 什么是分支"></a>4.1 什么是分支</h2><p>​    在版本控制过程中,同时推进多个任务,为每个任务,我们就可以创建每个任务的单独分支。<strong>使用分支意味着程序员可以把自己的工作从开发主线上分离开来,开发自己分支的时候,不会影响主线分支的运行。</strong>对于初学者而言,分支可以简单理解为副本,一个分支就是个单独的副本。(分支底层其实也是指针的引用)</p><h2 id="4-2-分支的好处"><a href="#4-2-分支的好处" class="headerlink" title="4.2 分支的好处"></a>4.2 分支的好处</h2><p>同时并行推进多个功能开发,提高开发效率。各个分支在开发过程中,如果某一个分支开发失败,不会对其他分支有任何影响。失败<br>的分支删除重新开始即可。</p><h2 id="4-4-分支的操作"><a href="#4-4-分支的操作" class="headerlink" title="4.4 分支的操作"></a>4.4 分支的操作</h2><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h3 id="4-3-1-查看分支"><a href="#4-3-1-查看分支" class="headerlink" title="4.3.1 查看分支"></a>4.3.1 查看分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git branch -v</span><br><span class="line">* master 94bbf6f V3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-3-2-创建分支"><a href="#4-3-2-创建分支" class="headerlink" title="4.3.2 创建分支"></a>4.3.2 创建分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git branch hot-fix</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git branch -v</span><br><span class="line">  hot-fix 94bbf6f V3</span><br><span class="line">* master  94bbf6f V3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-3-3-修改分支"><a href="#4-3-3-修改分支" class="headerlink" title="4.3.3 修改分支"></a>4.3.3 修改分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git checkout hot-fix</span><br><span class="line">Switched to branch <span class="string">&#x27;hot-fix&#x27;</span></span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (hot-fix)</span><br><span class="line">$ git branch -v</span><br><span class="line">* hot-fix 94bbf6f V3</span><br><span class="line">  master  94bbf6f V3</span><br></pre></td></tr></table></figure><p>在不同分支依旧可以新建修改提交文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (hot-fix)</span><br><span class="line">$ vim hello.txt</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (hot-fix)</span><br><span class="line">$ <span class="built_in">cat</span> hello.txt</span><br><span class="line">hello tintin! hello git!</span><br><span class="line">hello tintin! hello git!</span><br><span class="line"></span><br><span class="line">hello tintin! hello git!</span><br><span class="line"></span><br><span class="line">hello tintin! this file had been editted! hot fixed by on branch <span class="string">&quot;hot-fix&quot;</span></span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (hot-fix)</span><br><span class="line">$ git status</span><br><span class="line">On branch hot-fix</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (hot-fix)</span><br><span class="line">$ git add hello.txt</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (hot-fix)</span><br><span class="line">$ git status</span><br><span class="line">On branch hot-fix</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (hot-fix)</span><br><span class="line">$ git commit -m <span class="string">&quot;hot-fix V1&quot;</span> hello.txt</span><br><span class="line">[hot-fix 5151216] hot-fix V1</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (hot-fix)</span><br><span class="line">$ git reflog</span><br><span class="line">5151216 (HEAD -&gt; hot-fix) HEAD@&#123;0&#125;: commit: hot-fix V1</span><br><span class="line">94bbf6f (master) HEAD@&#123;1&#125;: checkout: moving from master to hot-fix</span><br><span class="line">94bbf6f (master) HEAD@&#123;2&#125;: reset: moving to 94bbf6f</span><br><span class="line">f07c8f3 HEAD@&#123;3&#125;: reset: moving to f07c8f3</span><br><span class="line">94bbf6f (master) HEAD@&#123;4&#125;: commit: V3</span><br><span class="line">f07c8f3 HEAD@&#123;5&#125;: commit: V2</span><br><span class="line">a5908a3 HEAD@&#123;6&#125;: commit (initial): V1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-3-4-合并分支"><a href="#4-3-4-合并分支" class="headerlink" title="4.3.4 合并分支"></a>4.3.4 合并分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (hot-fix)</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git merge hot-fix</span><br><span class="line">Updating 94bbf6f..5151216</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ <span class="built_in">cat</span> hello.txt</span><br><span class="line">hello tintin! hello git!</span><br><span class="line">hello tintin! hello git!</span><br><span class="line"></span><br><span class="line">hello tintin! hello git!</span><br><span class="line"></span><br><span class="line">hello tintin! this file had been editted! hot fixed by on branch <span class="string">&quot;hot-fix&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-3-5-产生冲突"><a href="#4-3-5-产生冲突" class="headerlink" title="4.3.5 产生冲突"></a>4.3.5 产生冲突</h3><p>冲突产生的原因:</p><p>合并分支时,两个分支在同一个文件的同一个位置有两套完全不同的修改。Git无法替我们决定使用哪一个。必须人为决定新代码内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ git merge hot-fix</span><br><span class="line">Auto-merging hello.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> hello.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master|MERGING)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run <span class="string">&quot;git commit&quot;</span>)</span><br><span class="line">  (use <span class="string">&quot;git merge --abort&quot;</span> to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution)</span><br><span class="line">        both modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105004625559.png" alt="image-20211105004625559"></p><h3 id="4-3-6-解决冲突"><a href="#4-3-6-解决冲突" class="headerlink" title="4.3.6 解决冲突"></a>4.3.6 解决冲突</h3><ol><li><p>编辑有冲突的文件,删除特殊符号,决定要使用的内容</p></li><li><p>添加到暂存区</p></li><li><p>执行提交(注意:此时使用 git commit命令时不能带文件名)</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master|MERGING)</span><br><span class="line">$ vim hello.txt</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master|MERGING)</span><br><span class="line">$ git add hello.txt</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master|MERGING)</span><br><span class="line">$ git commit -m <span class="string">&quot;merge test&quot;</span></span><br><span class="line">[master 0461bd8] merge <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git Repository/test (master)</span><br><span class="line">$ <span class="built_in">cat</span> hello.txt</span><br><span class="line">hello tintin! hello git!</span><br><span class="line">hello tintin! hello git!</span><br><span class="line"></span><br><span class="line">hello tintin! hello git!</span><br><span class="line"></span><br><span class="line">hello tintin! this file had been editted! hot fixed by on branch <span class="string">&quot;hot-fix&quot;</span></span><br><span class="line"></span><br><span class="line">updated by brance <span class="string">&quot;master&quot;</span></span><br><span class="line">edited by branch <span class="string">&quot;hot-fix&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建分支与切换分支图解"><a href="#创建分支与切换分支图解" class="headerlink" title="创建分支与切换分支图解"></a>创建分支与切换分支图解</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105005520616.png" alt="image-20211105005520616"></p><p>master、hot-fix其实都是指向具体版本记录的指针。当前所在的分支,其实是由HEAD决定的。</p><p>所以创建分支的本质就是多创建一个指针<br>    HEAD如果指向 master,那么我们现在就在 master分支上。<br>    HEAD如果执行 hotfix,那么我们现在就在 hotfix分支上<br>    所以切换分支的本质就是移动HEAD指针。</p><h1 id="5-GIt团队协作机制"><a href="#5-GIt团队协作机制" class="headerlink" title="5 GIt团队协作机制"></a>5 GIt团队协作机制</h1><h2 id="5-1-团队内协作"><a href="#5-1-团队内协作" class="headerlink" title="5.1 团队内协作"></a>5.1 团队内协作</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105010301122.png" alt="image-20211105010301122"></p><h2 id="5-2-跨团队协作"><a href="#5-2-跨团队协作" class="headerlink" title="5.2 跨团队协作"></a>5.2 跨团队协作</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105011536481.png" alt="image-20211105011536481"></p><h1 id="6-Github操作"><a href="#6-Github操作" class="headerlink" title="6 Github操作"></a>6 Github操作</h1><p>Ps:全球最大同性交友网站,技术宅男的天堂,新世界的大门,你还在等什么?</p><h2 id="6-1-创建远程仓库"><a href="#6-1-创建远程仓库" class="headerlink" title="6.1 创建远程仓库"></a>6.1 创建远程仓库</h2><h2 id="6-2-远程仓库操作"><a href="#6-2-远程仓库操作" class="headerlink" title="6.2 远程仓库操作"></a>6.2 远程仓库操作</h2><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 远程库地址别名 分支</td><td>推送本地分支的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后与当前本地分支直解合并</td></tr></tbody></table><h3 id="6-2-1-创建远程库别名"><a href="#6-2-1-创建远程库别名" class="headerlink" title="6.2.1 创建远程库别名"></a>6.2.1 创建远程库别名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git repository/test (master)</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git repository/test (master)</span><br><span class="line">$ git remote add <span class="built_in">test</span> https://github.com/TintinLY/test.git</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git repository/test (master)</span><br><span class="line">$ git remote -v</span><br><span class="line"><span class="built_in">test</span>    https://github.com/TintinLY/test.git (fetch)</span><br><span class="line"><span class="built_in">test</span>    https://github.com/TintinLY/test.git (push)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2-2-推送本地分支到远程仓库"><a href="#6-2-2-推送本地分支到远程仓库" class="headerlink" title="6.2.2 推送本地分支到远程仓库"></a>6.2.2 推送本地分支到远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git repository/test (master)</span><br><span class="line">$ git branch -v</span><br><span class="line">  hot-fix 355f767 hot-fix edited</span><br><span class="line">* master  0461bd8 merge <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git repository/test (master)</span><br><span class="line">$ git push <span class="built_in">test</span> master</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/TintinLY/test.git/&#x27;</span>: Failed to connect to github.com port 443 after 21098 ms: Timed out</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git repository/test (master)</span><br><span class="line">$ git push <span class="built_in">test</span> master</span><br><span class="line">Enumerating objects: 21, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (21/21), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (14/14), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (21/21), 1.60 KiB | 205.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 21 (delta 5), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">To https://github.com/TintinLY/test.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105143643570.png" alt="image-20211105143643570"></p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105143730643.png" alt="image-20211105143730643"></p><h3 id="6-2-3-拉取远程仓库到本地库"><a href="#6-2-3-拉取远程仓库到本地库" class="headerlink" title="6.2.3 拉取远程仓库到本地库"></a>6.2.3 拉取远程仓库到本地库</h3><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105144146682.png" alt="image-20211105144146682"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git repository/test (master)</span><br><span class="line">$ git pull <span class="built_in">test</span> master</span><br><span class="line">remote: Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), 664 bytes | 73.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">From https://github.com/TintinLY/test</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">   0461bd8..17194d0  master     -&gt; <span class="built_in">test</span>/master</span><br><span class="line">Updating 0461bd8..17194d0</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 2 ++</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git repository/test (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2-4-克隆远程库到本地"><a href="#6-2-4-克隆远程库到本地" class="headerlink" title="6.2.4 克隆远程库到本地"></a>6.2.4 克隆远程库到本地</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git repository</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/TintinLY/test.git</span><br><span class="line">fatal: destination path <span class="string">&#x27;test&#x27;</span> already exists and is not an empty directory.</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git repository</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/TintinLY/test2.git</span><br><span class="line">Cloning into <span class="string">&#x27;test2&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 6, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 6 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Receiving objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git repository</span><br><span class="line">$ <span class="built_in">cd</span> test2</span><br><span class="line"></span><br><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git repository/test2 (main)</span><br><span class="line">$ git remote -v</span><br><span class="line">origin  https://github.com/TintinLY/test2.git (fetch)</span><br><span class="line">origin  https://github.com/TintinLY/test2.git (push)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>小结: clone会做如下操作。1、拉取代码。2、初始化本地仓库。3、创建别名origin</p></blockquote><h3 id="6-2-5-邀请加入团队"><a href="#6-2-5-邀请加入团队" class="headerlink" title="6.2.5 邀请加入团队"></a>6.2.5 邀请加入团队</h3><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105150121556.png" alt="image-20211105150121556"></p><p>被邀请账户点击链接获得邀请函并接收或拒绝</p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105150329140.png" alt="image-20211105150329140"></p><h2 id="6-3-跨团队协作"><a href="#6-3-跨团队协作" class="headerlink" title="6.3 跨团队协作"></a>6.3 跨团队协作</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105151113450.png" alt="image-20211105151113450"></p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105151223495.png" alt="image-20211105151223495"></p><h2 id="6-4-SSH免登录"><a href="#6-4-SSH免登录" class="headerlink" title="6.4 SSH免登录"></a>6.4 SSH免登录</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105151638340.png" alt="image-20211105151638340"></p><p><a href="C:\Users\82129.ssh">磁盘下的ssh密钥路径</a></p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105151759262.png" alt="image-20211105151759262"></p><p>复制公钥内容粘贴到github上</p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105152041270.png" alt="image-20211105152041270"></p><p>利用ssh链接可以拉取或推送文件</p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105152309079.png" alt="image-20211105152309079"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">82129@DESKTOP-R0J8UMG MINGW64 /e/git repository/test (master)</span><br><span class="line">$ git pull git@github.com:TintinLY/test.git master</span><br><span class="line">remote: Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), 654 bytes | 72.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">From github.com:TintinLY/test</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Updating 17194d0..3643863</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 2 ++</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="7-IDEA集成Git"><a href="#7-IDEA集成Git" class="headerlink" title="7 IDEA集成Git"></a>7 IDEA集成Git</h1><h2 id="7-1-配置Git忽略"><a href="#7-1-配置Git忽略" class="headerlink" title="7.1 配置Git忽略"></a>7.1 配置Git忽略</h2><p>与顼目的实际功能无关,不参与服务器上部署运行。把它们忽略掉能够屏蔽IDE工具之间的差异。</p><ol><li><p>创建忽略规则文件ⅹ XXX.Ignore(前缀名随便起,建议是 git. ignore)<br>这个文件的存放位置原则上在哪里都可以,为了便于让~ gitconfig文件引用,建议也放在用户目录下</p><p>编辑本地忽略配置文件，文件名任意 (git.ignore)</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># Compiled class file </span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"># Log file </span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># BlueJ files </span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line"># Mobile Tools for Java (J2ME)</span><br><span class="line">.mtj.tmp/</span><br><span class="line"></span><br><span class="line"># Package Files #</span><br><span class="line">*.jar </span><br><span class="line">*.war </span><br><span class="line">*.nar </span><br><span class="line">*.ear </span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz </span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line"></span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">target</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在 gitconfig文件中引用忽略配置文件(此文件在 Windows的家目录中)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[filter &quot;lfs&quot;]</span><br><span class="line">clean = git-lfs clean -- %f</span><br><span class="line">smudge = git-lfs smudge -- %f</span><br><span class="line">process = git-lfs filter-process</span><br><span class="line">required = true</span><br><span class="line">[user]</span><br><span class="line">name = Tintin</span><br><span class="line">email = 821294434@qq.com</span><br><span class="line">[core]</span><br><span class="line">excludesfile = C:/Users/82129/git.ignore</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意：这里路径中一定要使用“&#x2F;”，不能使用“\”</p></blockquote><h2 id="7-2-定位Git程序"><a href="#7-2-定位Git程序" class="headerlink" title="7.2 定位Git程序"></a>7.2 定位Git程序</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105203759229.png" alt="image-20211105203759229"></p><h2 id="7-3-初始化到本地库"><a href="#7-3-初始化到本地库" class="headerlink" title="7.3 初始化到本地库"></a>7.3 初始化到本地库</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105203909216.png" alt="image-20211105203909216"></p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105204127708.png" alt="image-20211105204127708"></p><h2 id="7-4-添加到暂存区"><a href="#7-4-添加到暂存区" class="headerlink" title="7.4 添加到暂存区"></a>7.4 添加到暂存区</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105204915174.png" alt="image-20211105204915174"></p><p>新建文件时自动识别</p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105205000910.png" alt="image-20211105205000910"></p><h2 id="7-5-提交到本地库"><a href="#7-5-提交到本地库" class="headerlink" title="7.5 提交到本地库"></a>7.5 提交到本地库</h2><h2 id="7-6-切换版本"><a href="#7-6-切换版本" class="headerlink" title="7.6 切换版本"></a>7.6 切换版本</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105211440754.png" alt="image-20211105211440754"></p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211105211620791.png" alt="image-20211105211620791"></p><h2 id="7-7-创建分支"><a href="#7-7-创建分支" class="headerlink" title="7.7 创建分支"></a>7.7 创建分支</h2><h2 id="7-8-切换分支"><a href="#7-8-切换分支" class="headerlink" title="7.8 切换分支"></a>7.8 切换分支</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106003743447.png" alt="image-20211106003743447"></p><h2 id="7-9-合并分支"><a href="#7-9-合并分支" class="headerlink" title="7.9 合并分支"></a>7.9 合并分支</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106005003243.png" alt="image-20211106005003243"></p><h2 id="7-10-解决冲突"><a href="#7-10-解决冲突" class="headerlink" title="7.10 解决冲突"></a>7.10 解决冲突</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106012057276.png" alt="image-20211106012057276"></p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106012121318.png" alt="image-20211106012121318"></p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106012228861.png" alt="image-20211106012228861"></p><h1 id="8-IDEA集成GitHub"><a href="#8-IDEA集成GitHub" class="headerlink" title="8 IDEA集成GitHub"></a>8 IDEA集成GitHub</h1><h2 id="8-1-设置GitHub账号"><a href="#8-1-设置GitHub账号" class="headerlink" title="8.1 设置GitHub账号"></a>8.1 设置GitHub账号</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106012631544.png" alt="image-20211106012631544"></p><h2 id="8-2-分享工程到GitHub"><a href="#8-2-分享工程到GitHub" class="headerlink" title="8.2 分享工程到GitHub"></a>8.2 分享工程到GitHub</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106013136220.png" alt="image-20211106013136220"></p><h2 id="8-3-push"><a href="#8-3-push" class="headerlink" title="8.3 push"></a>8.3 push</h2><h2 id="8-4-pull"><a href="#8-4-pull" class="headerlink" title="8.4 pull"></a>8.4 pull</h2><p>注意:pu是拉取远端仓库代码到本地,如果远程库代码和本地库代码不一致,会自动合并,如果自动合并失败,还会涉及到手动解决冲突的问题。4</p><h2 id="8-5-clone"><a href="#8-5-clone" class="headerlink" title="8.5 clone"></a>8.5 clone</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106014137275.png" alt="image-20211106014137275"></p><h1 id="9-国内代码托运中心-码云Gitee"><a href="#9-国内代码托运中心-码云Gitee" class="headerlink" title="9 国内代码托运中心 码云Gitee"></a>9 国内代码托运中心 码云Gitee</h1><h2 id="9-1-简介"><a href="#9-1-简介" class="headerlink" title="9.1 简介"></a>9.1 简介</h2><p>码云是开源中国推出的基于Git的代码托管服务中心,网址是htps:&#x2F; gitee. com,使用方式跟 Github一样,而且它还是一个中文网站,如果你英文不是很好它是最好的选择</p><h2 id="9-2注册登录"><a href="#9-2注册登录" class="headerlink" title="9.2注册登录"></a>9.2注册登录</h2><h2 id="9-3-创建远程库"><a href="#9-3-创建远程库" class="headerlink" title="9.3 创建远程库"></a>9.3 创建远程库</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106020352143.png" alt="image-20211106020352143"></p><h2 id="9-4-IDEA集成Gitee"><a href="#9-4-IDEA集成Gitee" class="headerlink" title="9.4 IDEA集成Gitee"></a>9.4 IDEA集成Gitee</h2><h3 id="9-4-1-安装插件"><a href="#9-4-1-安装插件" class="headerlink" title="9.4.1 安装插件"></a>9.4.1 安装插件</h3><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106020451091.png" alt="image-20211106020451091"></p><h3 id="9-4-2-连接Gitee"><a href="#9-4-2-连接Gitee" class="headerlink" title="9.4.2 连接Gitee"></a>9.4.2 连接Gitee</h3><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106020826022.png" alt="image-20211106020826022"></p><h2 id="9-5-码云复制GitHub项目"><a href="#9-5-码云复制GitHub项目" class="headerlink" title="9.5 码云复制GitHub项目"></a>9.5 码云复制GitHub项目</h2><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106021609469.png" alt="image-20211106021609469"></p><p>更新项目</p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106021640252.png" alt="image-20211106021640252"></p><h1 id="10-自建代码托管平台GitLab"><a href="#10-自建代码托管平台GitLab" class="headerlink" title="10 自建代码托管平台GitLab"></a>10 自建代码托管平台GitLab</h1><h2 id="10-1-简介"><a href="#10-1-简介" class="headerlink" title="10.1 简介"></a>10.1 简介</h2><p>Gitlab是由 GitlabInc.开发,使用MT许可证的基于网络的Git仓库管理工具,且具有wik和isue跟踪功能。使用Git作为代码管理工具,并在此基础上搭建起来的web服务Gitlab由乌克兰程序员 Dmitriy Zaporozhets和 valery Sizov开发,它使用Ruby语言写成。后来,一些部分用Go语言重写。截止2018年5月,该公司约有290名团队成员,以及2000多名开源贡献者。 Gitlab被BM,Sony, JulichResearch Center,NASA, Alibaba,Invincea, OrEilly Media, Leibniz-Rechenzentrum(IRZ),CERN, SpaceX等组织使用。</p><h2 id="10-2-官网"><a href="#10-2-官网" class="headerlink" title="10.2 官网"></a>10.2 官网</h2><p><a href="https://about.gitlab.com/">Iterate faster, innovate together | GitLab</a></p><h2 id="10-3-GitLab-安装"><a href="#10-3-GitLab-安装" class="headerlink" title="10.3 GitLab 安装"></a>10.3 GitLab 安装</h2><h3 id="10-3-1-服务器准备"><a href="#10-3-1-服务器准备" class="headerlink" title="10.3.1 服务器准备"></a>10.3.1 服务器准备</h3><p>准备一个系统为 CentOS7 以上版本的服务器，要求内存 4G，磁盘 50G。 </p><p>关闭防火墙，并且配置好主机名和 IP，保证服务器可以上网。 </p><p>此教程使用虚拟机：主机名：gitlab-server IP 地址：192.168.6.200 </p><h3 id="10-3-2-安装包准备"><a href="#10-3-2-安装包准备" class="headerlink" title="10.3.2 安装包准备"></a>10.3.2 安装包准备</h3><p>Yum 在线安装 gitlab- ce 时，需要下载几百 M 的安装文件，非常耗时，所以最好提前把 所需 RPM 包下载到本地，然后使用离线 rpm 的方式安装。 </p><p>下载地址： <a href="https://packages.gitlab.com/gitlab/gitlab%02ce/packages/el/7/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm">https://packages.gitlab.com/gitlab/gitlabce/packages/el/7/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm</a> 注：资料里提供了此 rpm 包，直接将此包上传到服务器&#x2F;opt&#x2F;module 目录下即可。</p><h3 id="10-3-3-编写安装脚本"><a href="#10-3-3-编写安装脚本" class="headerlink" title="10.3.3 编写安装脚本"></a>10.3.3 编写安装脚本</h3><p>安装 gitlab 步骤比较繁琐，因此我们可以参考官网编写 gitlab 的安装脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab-server module]# vim gitlab-install.sh sudo rpm -ivh /opt/module/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm sudo yum install -y curl policycoreutils-python openssh-server croniesudo lokkit -s http -s ssh sudo yum install -y postfix sudo service postfix start sudo chkconfig postfix on curl https://packages.gitlab.com/install/repositories/gitlab/gitlabce/script.rpm.sh | sudo bash sudo EXTERNAL_URL=&quot;http://gitlab.example.com&quot; yum -y install gitlabce</span><br></pre></td></tr></table></figure><p> 给脚本增加执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab-server module]# chmod +x gitlab-install.sh [root@gitlab-server module]# ll 总用量 403104 -rw-r--r--. 1 root root 412774002 4 月 7 15:47 gitlab-ce-13.10.2- ce.0.el7.x86_64.rpm -rwxr-xr-x. 1 root root 416 4 月 7 15:49 gitlab-install.sh </span><br></pre></td></tr></table></figure><p>然后执行该脚本，开始安装 gitlab-ce。注意一定要保证服务器可以上网。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab-server module]# ./gitlab-install.sh  警告：/opt/module/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm: 头 V4  RSA/SHA1 Signature, 密钥 ID f27eab47: NOKEY 准备中... #################################  [100%] 正在升级/安装... 1:gitlab-ce-13.10.2-ce.0.el7  ################################# [100%] 。 。 。 。 。 。 </span><br></pre></td></tr></table></figure><h3 id="10-3-4-初始化-GitLab-服务"><a href="#10-3-4-初始化-GitLab-服务" class="headerlink" title="10.3.4 初始化 GitLab 服务"></a>10.3.4 初始化 GitLab 服务</h3><p>执行以下命令初始化 GitLab 服务，过程大概需要几分钟，耐心等待…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab-server module]# gitlab-ctl reconfigure 。 。 。 。 。 。 Running handlers: Running handlers complete Chef Client finished, 425/608 resources updated in 03 minutes 08  seconds gitlab Reconfigured! </span><br></pre></td></tr></table></figure><h3 id="10-3-5-启动-GitLab-服务"><a href="#10-3-5-启动-GitLab-服务" class="headerlink" title="10.3.5 启动 GitLab 服务"></a>10.3.5 启动 GitLab 服务</h3><p>执行以下命令启动 GitLab 服务，如需停止，执行 gitlab-ctl stop</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab-server module]# gitlab-ctl start ok: run: alertmanager: (pid 6812) 134s ok: run: gitaly: (pid 6740) 135s ok: run: gitlab-monitor: (pid 6765) 135s  ok: run: gitlab-workhorse: (pid 6722) 136s ok: run: logrotate: (pid 5994) 197s ok: run: nginx: (pid 5930) 203s ok: run: node-exporter: (pid 6234) 185s ok: run: postgres-exporter: (pid 6834) 133s ok: run: postgresql: (pid 5456) 257s ok: run: prometheus: (pid 6777) 134s ok: run: redis: (pid 5327) 263s ok: run: redis-exporter: (pid 6391) 173s ok: run: sidekiq: (pid 5797) 215s ok: run: unicorn: (pid 5728) 221s </span><br></pre></td></tr></table></figure><h3 id="10-3-6-使用浏览器访问-GitLab"><a href="#10-3-6-使用浏览器访问-GitLab" class="headerlink" title="10.3.6 使用浏览器访问 GitLab"></a>10.3.6 使用浏览器访问 GitLab</h3><p>使用主机名或者 IP 地址即可访问 GitLab 服务。需要提前配一下 windows 的 hosts 文件</p><p><img src="/2022/04/04/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20211106024549751.png" alt="image-20211106024549751"></p><p>首次登陆之前，需要修改下 GitLab 提供的 root 账户的密码，要求 8 位以上，包含大小 写子母和特殊符号。因此我们修改密码为 Atguigu.123456 然后使用修改后的密码登录 GitLab。</p><h3 id="10-3-7-GitLab-创建远程库"><a href="#10-3-7-GitLab-创建远程库" class="headerlink" title="10.3.7 GitLab 创建远程库"></a>10.3.7 GitLab 创建远程库</h3><h3 id="10-3-8-IDEA-集成-GitLab"><a href="#10-3-8-IDEA-集成-GitLab" class="headerlink" title="10.3.8 IDEA 集成 GitLab"></a>10.3.8 IDEA 集成 GitLab</h3><p>安装 GitLab 插件</p><p>设置 GitLab 插件</p><p>注意：gitlab 网页上复制过来的连接是：<a href="http://gitlab.example.com/root/git-test.git%EF%BC%8C">http://gitlab.example.com/root/git-test.git，</a> 需要手动修改为：<a href="http://gitlab-server/root/git-test.git">http://gitlab-server/root/git-test.git</a> 选择 gitlab 远程连接，进行 push。</p>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客测试文</title>
      <link href="/2022/04/04/tintin%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95%E6%96%87/"/>
      <url>/2022/04/04/tintin%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h2 id="解决hexo使用markdown图片无法显示问题"><a href="#解决hexo使用markdown图片无法显示问题" class="headerlink" title="解决hexo使用markdown图片无法显示问题"></a>解决hexo使用markdown图片无法显示问题</h2><p>在搭建hexo博客的时候会遇见图片上传是否麻烦，使用markdown编写博客时我们习惯将图片保存到本地，使用‘![]{}’的格式+相对路径去插入图片，但是在使用<code>hexo d</code>的时候相对路径会被转换导致最后发布上去的博客图片无法查看。下面提供几种解决方案：</p><span id="more"></span><p>查看hexo官网，可以看到官网推荐将<code>post_asset_folder</code>属性置为true，在新建博客<code>hexo n “xxx”</code>的时候会在根目录下创建一个同名的文件夹，将需要插入的图片放到这个目录。</p><p>在markdown文件中使用如下格式进行图片的访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如此就能够在hexo中访问到图片，但是这种方式，我们在VScode或者<a href="https://so.csdn.net/so/search?q=Typora&spm=1001.2101.3001.7020">Typora</a>种编写文档的时候是无法查看到图片的，无法渲染。</p><p>为了解决无法渲染和不习惯的图片插入格式，可以使用hexo-asset-image。</p><p><strong>测试图片</strong></p><p>本地图片：</p><p><img src="/2022/04/04/tintin%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95%E6%96%87/tintin1-16490384314761.jpg" alt="tintin1"></p><p>由于hexo3版本后对很多插件支持有问题，<a href="https://github.com/CodeFalling/hexo-asset-image.git">hexo-asset-image</a>插件在处理<code>data.permalink</code>链接时出现路径错误，把年月去掉了，导致最后生成的路径为<code>%d/xxx/xxx</code>需要对其做兼容处理。通过判断当前版本是否等于<code>3</code>的版本做不同的路径分割。</p><h2 id="测试预览摘要"><a href="#测试预览摘要" class="headerlink" title="测试预览摘要"></a>测试预览摘要</h2><!-- more --><h2 id="解决访问gitee等图床，访问简书csdn博客图片时无法显示问题"><a href="#解决访问gitee等图床，访问简书csdn博客图片时无法显示问题" class="headerlink" title="解决访问gitee等图床，访问简书csdn博客图片时无法显示问题"></a>解决访问gitee等图床，访问简书csdn博客图片时无法显示问题</h2><ul><li>这是由于防外链机制，可以在html头加no referrer</li><li>更换云服务存储图片，如阿里云oss</li></ul><p><strong>测试图片</strong></p><p>网络图片：</p><p><img src="https://edu-tintin-8001.oss-cn-beijing.aliyuncs.com/images/tintin3.jpg" alt="tintin3.jpg"></p><h2 id="测试链接"><a href="#测试链接" class="headerlink" title="测试链接"></a>测试链接</h2><p>markdown格式：<a href="https://www.baidu.com/">百度一下，你就知道 (baidu.com)</a></p><p>url格式：<a href="https://www.baidu.com/">https://www.baidu.com</a></p><h2 id="测试代码块"><a href="#测试代码块" class="headerlink" title="测试代码块"></a>测试代码块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>code</code></p><h2 id="测试MarkDown语法"><a href="#测试MarkDown语法" class="headerlink" title="测试MarkDown语法"></a>测试MarkDown语法</h2><h1 id="Markdown概述"><a href="#Markdown概述" class="headerlink" title="Markdown概述"></a><span id="test">Markdown概述</span></h1><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong>。</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="二级标题（格式一）"><a href="#二级标题（格式一）" class="headerlink" title="二级标题（格式一）"></a>二级标题（格式一）</h2><p>使用&#x3D;和-标记  </p><h2 id="二级标题（格式二）"><a href="#二级标题（格式二）" class="headerlink" title="二级标题（格式二）"></a>二级标题（格式二）</h2><p>使用#标记</p><h3 id="三级标题（格式二）"><a href="#三级标题（格式二）" class="headerlink" title="三级标题（格式二）"></a>三级标题（格式二）</h3><h4 id="四级标题（格式二）"><a href="#四级标题（格式二）" class="headerlink" title="四级标题（格式二）"></a>四级标题（格式二）</h4><h5 id="五级标题（格式二）"><a href="#五级标题（格式二）" class="headerlink" title="五级标题（格式二）"></a>五级标题（格式二）</h5><h6 id="六级标题（格式二）"><a href="#六级标题（格式二）" class="headerlink" title="六级标题（格式二）"></a>六级标题（格式二）</h6><h1 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h1><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>两个以上空格并回车换行   </p><p>第二行<br>使用空行来换行</p><p>第二行</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><em>斜体文本</em><br><em>italic text</em>   </p><p><strong>粗体文本</strong><br><strong>bord text</strong>   </p><p><em><strong>粗斜体</strong></em><br><em><strong>italic bord text</strong></em>     </p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><hr><hr><hr><hr><hr><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>普通文字</p><p><del>删除的文字</del></p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>通过html标签<u>实现</u></p><p><u>带下划线的文本</u></p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>创建一个脚注<a href="%E8%BF%99%E9%87%8C%E6%98%AF%E8%84%9A%E6%B3%A8%E5%86%85%E5%AE%B9">^ ps.</a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>Markdown 支持有序列表和无序列表。</p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表使用星号(<em>****)、加号(<strong>+</strong>)或是减号(</em>*-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><ul><li>星号第一项</li><li>星号第二项</li><li>星号第三项</li></ul><ul><li>加号第一项</li><li>加号第二项</li><li>加号第三项</li></ul><ul><li>减号第一项</li><li>减号第二项</li><li>减号第三项</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>有序列表使用数字并加上 <strong>.</strong> 号来表示，如：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><ol><li>第一项<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项<ol><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ol></li></ol><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p><blockquote><p>区块引用</p><p>挺好的</p></blockquote><h2 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h2><blockquote><p>区块中的列表：</p><ol><li>第一项</li><li>第二项<ol><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ol></li></ol></blockquote><h2 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h2><p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加四个空格的缩进。</p><p>列表中使用区块实例如下：</p><ol><li><p>第一项</p><blockquote><p>区块引用</p><p>挺好的</p></blockquote></li><li><p>第二项</p><blockquote><p>区块引用</p></blockquote></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="段落中区分函数或代码片段"><a href="#段落中区分函数或代码片段" class="headerlink" title="段落中区分函数或代码片段"></a>段落中区分函数或代码片段</h2><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来，例如：在这个段落中我们使用了<code>print()</code>函数</p><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCode</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;测试打印&quot;</span>)；</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以用 <strong>&#96;&#96;&#96;</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ol><li><p>使用中括号[]和括弧()</p><p>这是一个链接<a href="https://www.baidu.com/">baidu</a></p></li><li><p>使用砖石符号&lt;&gt;</p><p><a href="https://www.baidu.com/">https://www.baidu.com</a></p></li></ol><h2 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h2><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行： 类似于脚注</p><p>这个链接用<a href="http://www.google.com/">a</a>作为网址变量<a href="http://www.google.com/">google</a></p><p>这个链接用<a href="https://www.baidu.com/">bc</a>作为网址变量<a href="https://www.baidu.com/">baidu</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>Markdown 图片语法格式如下：</p><p>![alt 属性文本](..&#x2F;..&#x2F;..&#x2F;文档&#x2F;Typora 笔记本&#x2F;图片地址)</p><p>![alt 属性文本](..&#x2F;..&#x2F;..&#x2F;文档&#x2F;Typora 笔记本&#x2F;图片地址 “可选标题”)</p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p><p>当然，你也可以像网址那样对图片网址使用变量:</p><p>这个链接用<a href="http://www.google.com/">a</a>作为网址变量<a href="http://www.google.com/">picture</a></p><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><table><thead><tr><th>表头</th><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td><td>单元格</td></tr></tbody></table><p><strong>我们可以设置表格的对齐方式：</strong></p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><h2 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h2><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><p>在这段文字中我们使用了<code>&lt;kdb&gt;</code>标签 ，来表示按键组合 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> ；使用了<code>&lt;b&gt;</code>来表示<b>粗体</b>；使用了<i>标签 来表示斜体</i></p><p>；使用了<code>&lt;em&gt;</code>标签来呈现<em>被强调的文本</em>；使用了<code>&lt;sup&gt;</code>来向文档添加<sub>脚注</sub>以及表示方程式中的指数值时非常有用。如果和 <a> 标签结合起来使用，就可以创建出很好的超链接脚注。使用<code>&lt;br&gt;</code>标签来换行<br>从这里开始会换行</a></p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><p><strong>加粗</strong></p><p>**不加粗**</p><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：<br>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 &#x3D;  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p><h2 id="锚点与链接（实现标题跳转）"><a href="#锚点与链接（实现标题跳转）" class="headerlink" title="锚点与链接（实现标题跳转）"></a><a id="test2">锚点与链接（实现标题跳转）</a></h2><p><a href="#test">点击返回顶部</a></p><p><a href="#Markdown%E6%A6%82%E8%BF%B0">点击返回顶部</a></p><p><a href="#%E5%8C%BA%E5%9D%97">点击跳转到区块部分</a></p><p>[测试标题相同的情况](</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/02/hello-world/"/>
      <url>/2022/04/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
